
c:/Users/S534735/Desktop/IOT_Final_Project/RobotSpyCar/firmware/subscriber/target/1.2.1/photon/subscriber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3f60  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000300  080a3f64  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005b8  20000368  20000368  00030368  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a3fcc  080a3fcc  00023fcc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3ff4  080a3ff4  00023ff4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ea63d  00000000  00000000  00023ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000149b2  00000000  00000000  0010e635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00018da0  00000000  00000000  00122fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002710  00000000  00000000  0013bd87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003d70  00000000  00000000  0013e497  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002ddd4  00000000  00000000  00142207  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002efd5  00000000  00000000  0016ffdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b012b  00000000  00000000  0019efb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000cdac  00000000  00000000  0024f0dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	f4 2b 0a 08                                         .+..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fd79 	bl	80a2b24 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fd7e 	bl	80a2b3a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3f64 	.word	0x080a3f64
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	20000920 	.word	0x20000920
 80a0058:	20000920 	.word	0x20000920

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fdbb 	bl	80a1bd8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3f14 	.word	0x080a3f14
 80a0084:	080a3f5c 	.word	0x080a3f5c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b860 	b.w	80a014c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f82f 	bl	80a00f0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bd61 	b.w	80a1b5c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bf8d 	b.w	80a0fb8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bf93 	b.w	80a0fc8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a00b4:	b513      	push	{r0, r1, r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7+0x1c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00ba:	460a      	mov	r2, r1
 80a00bc:	781b      	ldrb	r3, [r3, #0]
 80a00be:	4905      	ldr	r1, [pc, #20]	; (80a00d4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7+0x20>)
 80a00c0:	f88d 3000 	strb.w	r3, [sp]
 80a00c4:	233c      	movs	r3, #60	; 0x3c
 80a00c6:	f001 fed9 	bl	80a1e7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	b002      	add	sp, #8
 80a00ce:	bd10      	pop	{r4, pc}
 80a00d0:	20000370 	.word	0x20000370
 80a00d4:	080a2c08 	.word	0x080a2c08

080a00d8 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a00d8:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00da:	f000 fd6f 	bl	80a0bbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00de:	4b03      	ldr	r3, [pc, #12]	; (80a00ec <_ZN10CloudClass7processEv+0x14>)
 80a00e0:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a00e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00e6:	f000 bf47 	b.w	80a0f78 <spark_process>
 80a00ea:	bf00      	nop
 80a00ec:	2000084c 	.word	0x2000084c

080a00f0 <loop>:
}



void loop()
{
 80a00f0:	4770      	bx	lr

080a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00f2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00f4:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00f6:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a00f8:	b17c      	cbz	r4, 80a011a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00fa:	6863      	ldr	r3, [r4, #4]
 80a00fc:	3b01      	subs	r3, #1
 80a00fe:	6063      	str	r3, [r4, #4]
 80a0100:	b95b      	cbnz	r3, 80a011a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0102:	6823      	ldr	r3, [r4, #0]
 80a0104:	4620      	mov	r0, r4
 80a0106:	689b      	ldr	r3, [r3, #8]
 80a0108:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a010a:	68a3      	ldr	r3, [r4, #8]
 80a010c:	3b01      	subs	r3, #1
 80a010e:	60a3      	str	r3, [r4, #8]
 80a0110:	b91b      	cbnz	r3, 80a011a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0112:	6823      	ldr	r3, [r4, #0]
 80a0114:	4620      	mov	r0, r4
 80a0116:	68db      	ldr	r3, [r3, #12]
 80a0118:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a011a:	4628      	mov	r0, r5
 80a011c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0120 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0120:	b510      	push	{r4, lr}
 80a0122:	4604      	mov	r4, r0
 80a0124:	4b03      	ldr	r3, [pc, #12]	; (80a0134 <_ZN9TCPClientD1Ev+0x14>)
 80a0126:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a012a:	f7ff ffe2 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a012e:	4620      	mov	r0, r4
 80a0130:	bd10      	pop	{r4, pc}
 80a0132:	bf00      	nop
 80a0134:	080a3c24 	.word	0x080a3c24

080a0138 <_ZN9TCPClientD0Ev>:
 80a0138:	b510      	push	{r4, lr}
 80a013a:	4604      	mov	r4, r0
 80a013c:	f7ff fff0 	bl	80a0120 <_ZN9TCPClientD1Ev>
 80a0140:	4620      	mov	r0, r4
 80a0142:	211c      	movs	r1, #28
 80a0144:	f002 fb93 	bl	80a286e <_ZdlPvj>
 80a0148:	4620      	mov	r0, r4
 80a014a:	bd10      	pop	{r4, pc}

080a014c <setup>:

ArduCAM myCAM(OV5642, SPI_CS);


void setup()
{
 80a014c:	b530      	push	{r4, r5, lr}
     */
    int publishVitals(system_tick_t period = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80a014e:	2200      	movs	r2, #0
 80a0150:	b08f      	sub	sp, #60	; 0x3c
 80a0152:	9201      	str	r2, [sp, #4]
 80a0154:	9200      	str	r2, [sp, #0]
 80a0156:	2301      	movs	r3, #1
 80a0158:	498c      	ldr	r1, [pc, #560]	; (80a038c <setup+0x240>)
 80a015a:	488d      	ldr	r0, [pc, #564]	; (80a0390 <setup+0x244>)
 80a015c:	f000 ff1c 	bl	80a0f98 <spark_subscribe>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0160:	498c      	ldr	r1, [pc, #560]	; (80a0394 <setup+0x248>)
 80a0162:	a80a      	add	r0, sp, #40	; 0x28
 80a0164:	f001 fb25 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.subscribe("Capture", myHandler, ALL_DEVICES);
  Particle.publish("status", "Good morning, Version: " + String(VERSION_SLUG));
 80a0168:	498b      	ldr	r1, [pc, #556]	; (80a0398 <setup+0x24c>)
 80a016a:	a806      	add	r0, sp, #24
 80a016c:	f001 fb21 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0170:	a906      	add	r1, sp, #24
 80a0172:	a80a      	add	r0, sp, #40	; 0x28
 80a0174:	f001 fb91 	bl	80a189a <_ZplRK15StringSumHelperRK6String>
 80a0178:	6801      	ldr	r1, [r0, #0]
 80a017a:	a804      	add	r0, sp, #16
 80a017c:	f7ff ff9a 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a0180:	a805      	add	r0, sp, #20
 80a0182:	f7ff ffb6 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0186:	a806      	add	r0, sp, #24
 80a0188:	f001 facc 	bl	80a1724 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a018c:	a80a      	add	r0, sp, #40	; 0x28
 80a018e:	f001 fac9 	bl	80a1724 <_ZN6StringD1Ev>
  delay(1000);
 80a0192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0196:	f001 fc7f 	bl	80a1a98 <delay>

  uint8_t vid,pid;
  uint8_t temp;

  Wire.setSpeed(CLOCK_SPEED_100KHZ);
 80a019a:	f002 fb43 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a019e:	497f      	ldr	r1, [pc, #508]	; (80a039c <setup+0x250>)
 80a01a0:	f002 f9da 	bl	80a2558 <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
 80a01a4:	f002 fb3e 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a01a8:	f002 f9da 	bl	80a2560 <_ZN7TwoWire5beginEv>

  Serial.begin(115200);
 80a01ac:	f002 f892 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a01b0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a01b4:	f002 f882 	bl	80a22bc <_ZN9USBSerial5beginEl>
  Serial.println("ArduCAM Start!");
 80a01b8:	f002 f88c 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a01bc:	4978      	ldr	r1, [pc, #480]	; (80a03a0 <setup+0x254>)
 80a01be:	f001 fbda 	bl	80a1976 <_ZN5Print7printlnEPKc>

  // set the SPI_CS as an output:
  pinMode(SPI_CS, OUTPUT);
 80a01c2:	200c      	movs	r0, #12
 80a01c4:	2101      	movs	r1, #1
 80a01c6:	f002 fae1 	bl	80a278c <pinMode>

  // initialize SPI:
  SPI.begin();
 80a01ca:	4876      	ldr	r0, [pc, #472]	; (80a03a4 <setup+0x258>)
 80a01cc:	f000 ff40 	bl	80a1050 <_ZN8SPIClass5beginEv>
  //SPI.begin(SPI_MODE_MASTER);
  //SPI.begin(SPI_MODE_SLAVE, SPI_CS);


  while(1) {
    Particle.publish("status", "checking for camera");
 80a01d0:	4975      	ldr	r1, [pc, #468]	; (80a03a8 <setup+0x25c>)
 80a01d2:	a80a      	add	r0, sp, #40	; 0x28
 80a01d4:	f7ff ff6e 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a01d8:	a80b      	add	r0, sp, #44	; 0x2c
 80a01da:	f7ff ff8a 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Serial.println("Checking for camera...");
 80a01de:	f002 f879 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a01e2:	4972      	ldr	r1, [pc, #456]	; (80a03ac <setup+0x260>)
 80a01e4:	f001 fbc7 	bl	80a1976 <_ZN5Print7printlnEPKc>

    //Check if the ArduCAM SPI bus is OK
    myCAM.write_reg(ARDUCHIP_TEST1, 0x55);
 80a01e8:	2255      	movs	r2, #85	; 0x55
 80a01ea:	2100      	movs	r1, #0
 80a01ec:	4870      	ldr	r0, [pc, #448]	; (80a03b0 <setup+0x264>)
 80a01ee:	f000 fb05 	bl	80a07fc <_ZN7ArduCAM9write_regEhh>
    temp = myCAM.read_reg(ARDUCHIP_TEST1);
 80a01f2:	2100      	movs	r1, #0
 80a01f4:	486e      	ldr	r0, [pc, #440]	; (80a03b0 <setup+0x264>)
 80a01f6:	f000 fb4a 	bl	80a088e <_ZN7ArduCAM8read_regEh>
    if(temp != 0x55)
 80a01fa:	2855      	cmp	r0, #85	; 0x55
    Particle.publish("status", "checking for camera");
    Serial.println("Checking for camera...");

    //Check if the ArduCAM SPI bus is OK
    myCAM.write_reg(ARDUCHIP_TEST1, 0x55);
    temp = myCAM.read_reg(ARDUCHIP_TEST1);
 80a01fc:	4604      	mov	r4, r0
    if(temp != 0x55)
 80a01fe:	d025      	beq.n	80a024c <setup+0x100>
    {
      Serial.println("SPI interface Error!");
 80a0200:	f002 f868 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a0204:	496b      	ldr	r1, [pc, #428]	; (80a03b4 <setup+0x268>)
 80a0206:	f001 fbb6 	bl	80a1976 <_ZN5Print7printlnEPKc>
      Serial.println("myCam.read_reg said " + String(temp));
 80a020a:	f002 f863 	bl	80a22d4 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a020e:	496a      	ldr	r1, [pc, #424]	; (80a03b8 <setup+0x26c>)
 80a0210:	4605      	mov	r5, r0
 80a0212:	a80a      	add	r0, sp, #40	; 0x28
 80a0214:	f001 facd 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0218:	220a      	movs	r2, #10
 80a021a:	4621      	mov	r1, r4
 80a021c:	a806      	add	r0, sp, #24
 80a021e:	f001 faec 	bl	80a17fa <_ZN6StringC1Ehh>
 80a0222:	a906      	add	r1, sp, #24
 80a0224:	a80a      	add	r0, sp, #40	; 0x28
 80a0226:	f001 fb38 	bl	80a189a <_ZplRK15StringSumHelperRK6String>
 80a022a:	6801      	ldr	r1, [r0, #0]
 80a022c:	4628      	mov	r0, r5
 80a022e:	f001 fba2 	bl	80a1976 <_ZN5Print7printlnEPKc>
 80a0232:	a806      	add	r0, sp, #24
 80a0234:	f001 fa76 	bl	80a1724 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0238:	a80a      	add	r0, sp, #40	; 0x28
 80a023a:	f001 fa73 	bl	80a1724 <_ZN6StringD1Ev>
      delay(5000);
 80a023e:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0242:	f001 fc29 	bl	80a1a98 <delay>
    }
    else {
      break;
    }
    Particle.process();
 80a0246:	f7ff ff47 	bl	80a00d8 <_ZN10CloudClass7processEv>
  SPI.begin();
  //SPI.begin(SPI_MODE_MASTER);
  //SPI.begin(SPI_MODE_SLAVE, SPI_CS);


  while(1) {
 80a024a:	e7c1      	b.n	80a01d0 <setup+0x84>
      break;
    }
    Particle.process();
  }

    Particle.publish("status", "Camera found.");
 80a024c:	a80a      	add	r0, sp, #40	; 0x28
 80a024e:	495b      	ldr	r1, [pc, #364]	; (80a03bc <setup+0x270>)
 80a0250:	f7ff ff30 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a0254:	a80b      	add	r0, sp, #44	; 0x2c
 80a0256:	f7ff ff4c 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>


while(1){
  //Check if the camera module type is OV5642
  myCAM.rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid);
 80a025a:	f10d 020e 	add.w	r2, sp, #14
 80a025e:	f243 010a 	movw	r1, #12298	; 0x300a
 80a0262:	4853      	ldr	r0, [pc, #332]	; (80a03b0 <setup+0x264>)
 80a0264:	f000 fbac 	bl	80a09c0 <_ZN7ArduCAM15rdSensorReg16_8EtPh>
  myCAM.rdSensorReg16_8(OV5642_CHIPID_LOW, &pid);
 80a0268:	f10d 020f 	add.w	r2, sp, #15
 80a026c:	f243 010b 	movw	r1, #12299	; 0x300b
 80a0270:	484f      	ldr	r0, [pc, #316]	; (80a03b0 <setup+0x264>)
 80a0272:	f000 fba5 	bl	80a09c0 <_ZN7ArduCAM15rdSensorReg16_8EtPh>
  if ((vid != 0x56) || (pid != 0x42)){
 80a0276:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a027a:	2b56      	cmp	r3, #86	; 0x56
 80a027c:	d103      	bne.n	80a0286 <setup+0x13a>
 80a027e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a0282:	2b42      	cmp	r3, #66	; 0x42
 80a0284:	d026      	beq.n	80a02d4 <setup+0x188>
    Serial.println(F("Can't find OV5642 module!"));
 80a0286:	f002 f825 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a028a:	494d      	ldr	r1, [pc, #308]	; (80a03c0 <setup+0x274>)
 80a028c:	f001 fb7d 	bl	80a198a <_ZN5Print7printlnEPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0290:	494c      	ldr	r1, [pc, #304]	; (80a03c4 <setup+0x278>)
 80a0292:	a80a      	add	r0, sp, #40	; 0x28
 80a0294:	f001 fa8d 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.publish("status", "Not found, camera says " + String::format("%d:%d", vid, pid));
 80a0298:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a029c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80a02a0:	a806      	add	r0, sp, #24
 80a02a2:	4949      	ldr	r1, [pc, #292]	; (80a03c8 <setup+0x27c>)
 80a02a4:	f001 fb06 	bl	80a18b4 <_ZN6String6formatEPKcz>
 80a02a8:	a906      	add	r1, sp, #24
 80a02aa:	a80a      	add	r0, sp, #40	; 0x28
 80a02ac:	f001 faf5 	bl	80a189a <_ZplRK15StringSumHelperRK6String>
 80a02b0:	6801      	ldr	r1, [r0, #0]
 80a02b2:	a804      	add	r0, sp, #16
 80a02b4:	f7ff fefe 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a02b8:	a805      	add	r0, sp, #20
 80a02ba:	f7ff ff1a 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02be:	a806      	add	r0, sp, #24
 80a02c0:	f001 fa30 	bl	80a1724 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a02c4:	a80a      	add	r0, sp, #40	; 0x28
 80a02c6:	f001 fa2d 	bl	80a1724 <_ZN6StringD1Ev>
    delay(5000);
 80a02ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80a02ce:	f001 fbe3 	bl	80a1a98 <delay>
  }

    Particle.publish("status", "Camera found.");


while(1){
 80a02d2:	e7c2      	b.n	80a025a <setup+0x10e>
    Particle.publish("status", "Not found, camera says " + String::format("%d:%d", vid, pid));
    delay(5000);
    continue;
  }
  else {
    Serial.println(F("OV5642 detected."));
 80a02d4:	f001 fffe 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a02d8:	493c      	ldr	r1, [pc, #240]	; (80a03cc <setup+0x280>)
 80a02da:	f001 fb56 	bl	80a198a <_ZN5Print7printlnEPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a02de:	493c      	ldr	r1, [pc, #240]	; (80a03d0 <setup+0x284>)
 80a02e0:	a80a      	add	r0, sp, #40	; 0x28
 80a02e2:	f001 fa66 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.publish("status", "OV5642 detected: " + String::format("%d:%d", vid, pid));
 80a02e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a02ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80a02ee:	a806      	add	r0, sp, #24
 80a02f0:	4935      	ldr	r1, [pc, #212]	; (80a03c8 <setup+0x27c>)
 80a02f2:	f001 fadf 	bl	80a18b4 <_ZN6String6formatEPKcz>
 80a02f6:	a906      	add	r1, sp, #24
 80a02f8:	a80a      	add	r0, sp, #40	; 0x28
 80a02fa:	f001 face 	bl	80a189a <_ZplRK15StringSumHelperRK6String>
 80a02fe:	6801      	ldr	r1, [r0, #0]
 80a0300:	a804      	add	r0, sp, #16
 80a0302:	f7ff fed7 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a0306:	a805      	add	r0, sp, #20
 80a0308:	f7ff fef3 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a030c:	a806      	add	r0, sp, #24
 80a030e:	f001 fa09 	bl	80a1724 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0312:	a80a      	add	r0, sp, #40	; 0x28
 80a0314:	f001 fa06 	bl	80a1724 <_ZN6StringD1Ev>
    break;
  }
}


  Serial.println("Camera found, initializing...");
 80a0318:	f001 ffdc 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a031c:	492d      	ldr	r1, [pc, #180]	; (80a03d4 <setup+0x288>)
 80a031e:	f001 fb2a 	bl	80a1976 <_ZN5Print7printlnEPKc>
    //myCAM.write_reg(ARDUCHIP_MODE, 0x01);		 	//Switch to CAM

    //Change MCU mode
    myCAM.set_format(JPEG);
 80a0322:	2101      	movs	r1, #1
 80a0324:	4822      	ldr	r0, [pc, #136]	; (80a03b0 <setup+0x264>)
 80a0326:	f000 fae1 	bl	80a08ec <_ZN7ArduCAM10set_formatEh>
    delay(100);
 80a032a:	2064      	movs	r0, #100	; 0x64
 80a032c:	f001 fbb4 	bl	80a1a98 <delay>

    myCAM.InitCAM();
 80a0330:	481f      	ldr	r0, [pc, #124]	; (80a03b0 <setup+0x264>)
 80a0332:	f000 fb75 	bl	80a0a20 <_ZN7ArduCAM7InitCAMEv>
    delay(100);
 80a0336:	2064      	movs	r0, #100	; 0x64
 80a0338:	f001 fbae 	bl	80a1a98 <delay>

//    myCAM.set_format(JPEG);
//    delay(100);

    myCAM.set_bit(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);
 80a033c:	2202      	movs	r2, #2
 80a033e:	2103      	movs	r1, #3
 80a0340:	481b      	ldr	r0, [pc, #108]	; (80a03b0 <setup+0x264>)
 80a0342:	f000 faa8 	bl	80a0896 <_ZN7ArduCAM7set_bitEhh>
    //myCAM.write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);
    delay(100);
 80a0346:	2064      	movs	r0, #100	; 0x64
 80a0348:	f001 fba6 	bl	80a1a98 <delay>

    myCAM.clear_fifo_flag();
 80a034c:	4818      	ldr	r0, [pc, #96]	; (80a03b0 <setup+0x264>)
 80a034e:	f000 fa5d 	bl	80a080c <_ZN7ArduCAM15clear_fifo_flagEv>
    delay(100);
 80a0352:	2064      	movs	r0, #100	; 0x64
 80a0354:	f001 fba0 	bl	80a1a98 <delay>

    myCAM.write_reg(ARDUCHIP_FRAMES,0x00);
 80a0358:	2200      	movs	r2, #0
 80a035a:	2101      	movs	r1, #1
 80a035c:	4814      	ldr	r0, [pc, #80]	; (80a03b0 <setup+0x264>)
 80a035e:	f000 fa4d 	bl	80a07fc <_ZN7ArduCAM9write_regEhh>
    delay(100);
 80a0362:	2064      	movs	r0, #100	; 0x64
 80a0364:	f001 fb98 	bl	80a1a98 <delay>

    myCAM.OV5642_set_JPEG_size(OV5642_320x240);
 80a0368:	2100      	movs	r1, #0
 80a036a:	4811      	ldr	r0, [pc, #68]	; (80a03b0 <setup+0x264>)
 80a036c:	f000 fb02 	bl	80a0974 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh>
    //myCAM.OV5640_set_JPEG_size(OV5642_1600x1200);
    //myCAM.OV5640_set_JPEG_size(OV5642_640x480);    // ?
    //delay(100);

    // wait a sec`
    delay(1000);
 80a0370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0374:	f001 fb90 	bl	80a1a98 <delay>


    client.connect(SERVER_ADDRESS, SERVER_TCP_PORT);
 80a0378:	2300      	movs	r3, #0
 80a037a:	f241 52ae 	movw	r2, #5550	; 0x15ae
 80a037e:	4916      	ldr	r1, [pc, #88]	; (80a03d8 <setup+0x28c>)
 80a0380:	4816      	ldr	r0, [pc, #88]	; (80a03dc <setup+0x290>)
 80a0382:	f001 f99b 	bl	80a16bc <_ZN9TCPClient7connectEPKctm>
}
 80a0386:	b00f      	add	sp, #60	; 0x3c
 80a0388:	bd30      	pop	{r4, r5, pc}
 80a038a:	bf00      	nop
 80a038c:	080a03e1 	.word	0x080a03e1
 80a0390:	080a2c0f 	.word	0x080a2c0f
 80a0394:	080a2c17 	.word	0x080a2c17
 80a0398:	080a2c2f 	.word	0x080a2c2f
 80a039c:	000186a0 	.word	0x000186a0
 80a03a0:	080a2c32 	.word	0x080a2c32
 80a03a4:	2000082c 	.word	0x2000082c
 80a03a8:	080a2c41 	.word	0x080a2c41
 80a03ac:	080a2c55 	.word	0x080a2c55
 80a03b0:	20000374 	.word	0x20000374
 80a03b4:	080a2c6c 	.word	0x080a2c6c
 80a03b8:	080a2c81 	.word	0x080a2c81
 80a03bc:	080a2c96 	.word	0x080a2c96
 80a03c0:	080a2ca4 	.word	0x080a2ca4
 80a03c4:	080a2cbe 	.word	0x080a2cbe
 80a03c8:	080a2cd6 	.word	0x080a2cd6
 80a03cc:	080a2cdc 	.word	0x080a2cdc
 80a03d0:	080a2ced 	.word	0x080a2ced
 80a03d4:	080a2cff 	.word	0x080a2cff
 80a03d8:	080a2d1d 	.word	0x080a2d1d
 80a03dc:	20000380 	.word	0x20000380

080a03e0 <_Z9myHandlerPKcS0_>:



void myHandler(const char *event, const char *data)
{
 80a03e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (!client.connected()) {
 80a03e4:	488b      	ldr	r0, [pc, #556]	; (80a0614 <_Z9myHandlerPKcS0_+0x234>)
}



void myHandler(const char *event, const char *data)
{
 80a03e6:	b08b      	sub	sp, #44	; 0x2c
    if (!client.connected()) {
 80a03e8:	f001 f8d7 	bl	80a159a <_ZN9TCPClient9connectedEv>
 80a03ec:	4604      	mov	r4, r0
 80a03ee:	b988      	cbnz	r0, 80a0414 <_Z9myHandlerPKcS0_+0x34>
        //client.stop();
        Particle.publish("status", "Attempting to reconnect to TCP Server...");
 80a03f0:	4989      	ldr	r1, [pc, #548]	; (80a0618 <_Z9myHandlerPKcS0_+0x238>)
 80a03f2:	a806      	add	r0, sp, #24
 80a03f4:	f7ff fe5e 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a03f8:	a807      	add	r0, sp, #28
 80a03fa:	f7ff fe7a 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (!client.connect(SERVER_ADDRESS, SERVER_TCP_PORT)) {
 80a03fe:	4623      	mov	r3, r4
 80a0400:	f241 52ae 	movw	r2, #5550	; 0x15ae
 80a0404:	4985      	ldr	r1, [pc, #532]	; (80a061c <_Z9myHandlerPKcS0_+0x23c>)
 80a0406:	4883      	ldr	r0, [pc, #524]	; (80a0614 <_Z9myHandlerPKcS0_+0x234>)
 80a0408:	f001 f958 	bl	80a16bc <_ZN9TCPClient7connectEPKctm>
 80a040c:	b910      	cbnz	r0, 80a0414 <_Z9myHandlerPKcS0_+0x34>
            delay(1000);
 80a040e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0412:	e0fa      	b.n	80a060a <_Z9myHandlerPKcS0_+0x22a>
            return;
        }
    }

    Particle.publish("status", "Taking a picture...");
 80a0414:	4982      	ldr	r1, [pc, #520]	; (80a0620 <_Z9myHandlerPKcS0_+0x240>)
 80a0416:	a806      	add	r0, sp, #24
 80a0418:	f7ff fe4c 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a041c:	a807      	add	r0, sp, #28
 80a041e:	f7ff fe68 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Serial.println("Taking a picture...");
 80a0422:	f001 ff57 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a0426:	497e      	ldr	r1, [pc, #504]	; (80a0620 <_Z9myHandlerPKcS0_+0x240>)
 80a0428:	f001 faa5 	bl	80a1976 <_ZN5Print7printlnEPKc>
    //myCAM.OV5640_set_JPEG_size(OV5640_320x240);   //works
    //myCAM.OV5640_set_JPEG_size(OV5642_1600x1200); //doesn't work
    //myCAM.OV5640_set_JPEG_size(OV5642_1280x960);  // doesn't work?
    //myCAM.OV5640_set_JPEG_size(OV5642_640x480);    // ?

    myCAM.OV5642_set_JPEG_size(OV5642_2592x1944); //works
 80a042c:	2106      	movs	r1, #6
 80a042e:	487d      	ldr	r0, [pc, #500]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a0430:	f000 faa0 	bl	80a0974 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh>
    delay(100);
 80a0434:	2064      	movs	r0, #100	; 0x64
 80a0436:	f001 fb2f 	bl	80a1a98 <delay>

    //myCAM.set_bit(ARDUCHIP_GPIO,GPIO_PWDN_MASK);
    //myCAM.clear_bit(ARDUCHIP_GPIO,GPIO_PWDN_MASK);


    myCAM.flush_fifo();
 80a043a:	487a      	ldr	r0, [pc, #488]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a043c:	f000 f9ea 	bl	80a0814 <_ZN7ArduCAM10flush_fifoEv>
    delay(100);
 80a0440:	2064      	movs	r0, #100	; 0x64
 80a0442:	f001 fb29 	bl	80a1a98 <delay>

    myCAM.clear_fifo_flag();
 80a0446:	4877      	ldr	r0, [pc, #476]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a0448:	f000 f9e0 	bl	80a080c <_ZN7ArduCAM15clear_fifo_flagEv>
    delay(100);
 80a044c:	2064      	movs	r0, #100	; 0x64
 80a044e:	f001 fb23 	bl	80a1a98 <delay>

    myCAM.start_capture();
 80a0452:	4874      	ldr	r0, [pc, #464]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a0454:	f000 f9d6 	bl	80a0804 <_ZN7ArduCAM13start_captureEv>
    delay(100);
 80a0458:	2064      	movs	r0, #100	; 0x64
 80a045a:	f001 fb1d 	bl	80a1a98 <delay>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a045e:	f000 fbad 	bl	80a0bbc <HAL_Timer_Get_Milli_Seconds>
 80a0462:	4607      	mov	r7, r0
 80a0464:	f000 fbaa 	bl	80a0bbc <HAL_Timer_Get_Milli_Seconds>
 80a0468:	4606      	mov	r6, r0


//
//  wait for the photo to be done
//
    while(!myCAM.get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK)) {
 80a046a:	2208      	movs	r2, #8
 80a046c:	2141      	movs	r1, #65	; 0x41
 80a046e:	486d      	ldr	r0, [pc, #436]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a0470:	f000 fa20 	bl	80a08b4 <_ZN7ArduCAM7get_bitEhh>
 80a0474:	bb98      	cbnz	r0, 80a04de <_Z9myHandlerPKcS0_+0xfe>
        Particle.process();
 80a0476:	f7ff fe2f 	bl	80a00d8 <_ZN10CloudClass7processEv>
        delay(10);
 80a047a:	200a      	movs	r0, #10
 80a047c:	f001 fb0c 	bl	80a1a98 <delay>
 80a0480:	f000 fb9c 	bl	80a0bbc <HAL_Timer_Get_Milli_Seconds>

        unsigned long now = millis();
        if ((now - last_publish) > 1000) {
 80a0484:	1b83      	subs	r3, r0, r6
 80a0486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a048a:	4604      	mov	r4, r0
 80a048c:	eba0 0507 	sub.w	r5, r0, r7
 80a0490:	d91a      	bls.n	80a04c8 <_Z9myHandlerPKcS0_+0xe8>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0492:	4965      	ldr	r1, [pc, #404]	; (80a0628 <_Z9myHandlerPKcS0_+0x248>)
 80a0494:	a806      	add	r0, sp, #24
 80a0496:	f001 f98c 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
            Particle.publish("status", "waiting for photo " + String(now-start_time));
 80a049a:	220a      	movs	r2, #10
 80a049c:	4629      	mov	r1, r5
 80a049e:	a802      	add	r0, sp, #8
 80a04a0:	f001 f9d0 	bl	80a1844 <_ZN6StringC1Emh>
 80a04a4:	a902      	add	r1, sp, #8
 80a04a6:	a806      	add	r0, sp, #24
 80a04a8:	f001 f9f7 	bl	80a189a <_ZplRK15StringSumHelperRK6String>
 80a04ac:	6801      	ldr	r1, [r0, #0]
 80a04ae:	4668      	mov	r0, sp
 80a04b0:	f7ff fe00 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a04b4:	a801      	add	r0, sp, #4
 80a04b6:	f7ff fe1c 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a04ba:	a802      	add	r0, sp, #8
 80a04bc:	f001 f932 	bl	80a1724 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a04c0:	a806      	add	r0, sp, #24
 80a04c2:	f001 f92f 	bl	80a1724 <_ZN6StringD1Ev>
            last_publish = now;
 80a04c6:	4626      	mov	r6, r4
        }

        if ((now-start_time) > 30000) {
 80a04c8:	f247 5330 	movw	r3, #30000	; 0x7530
 80a04cc:	429d      	cmp	r5, r3
 80a04ce:	d9cc      	bls.n	80a046a <_Z9myHandlerPKcS0_+0x8a>
            Particle.publish("status", "bailing...");
 80a04d0:	a806      	add	r0, sp, #24
 80a04d2:	4956      	ldr	r1, [pc, #344]	; (80a062c <_Z9myHandlerPKcS0_+0x24c>)
 80a04d4:	f7ff fdee 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a04d8:	a807      	add	r0, sp, #28
 80a04da:	f7ff fe0a 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            break;
        }
    }
    delay(100);
 80a04de:	2064      	movs	r0, #100	; 0x64
 80a04e0:	f001 fada 	bl	80a1a98 <delay>

    int length = myCAM.read_fifo_length();
 80a04e4:	484f      	ldr	r0, [pc, #316]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a04e6:	f000 f9eb 	bl	80a08c0 <_ZN7ArduCAM16read_fifo_lengthEv>
 80a04ea:	4604      	mov	r4, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a04ec:	4950      	ldr	r1, [pc, #320]	; (80a0630 <_Z9myHandlerPKcS0_+0x250>)
 80a04ee:	a806      	add	r0, sp, #24
 80a04f0:	f001 f95f 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.publish("status", "Image size is " + String(length));
 80a04f4:	220a      	movs	r2, #10
 80a04f6:	4621      	mov	r1, r4
 80a04f8:	a802      	add	r0, sp, #8
 80a04fa:	f001 f990 	bl	80a181e <_ZN6StringC1Eih>
 80a04fe:	a902      	add	r1, sp, #8
 80a0500:	a806      	add	r0, sp, #24
 80a0502:	f001 f9ca 	bl	80a189a <_ZplRK15StringSumHelperRK6String>
 80a0506:	6801      	ldr	r1, [r0, #0]
 80a0508:	4668      	mov	r0, sp
 80a050a:	f7ff fdd3 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a050e:	a801      	add	r0, sp, #4
 80a0510:	f7ff fdef 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0514:	a802      	add	r0, sp, #8
 80a0516:	f001 f905 	bl	80a1724 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a051a:	a806      	add	r0, sp, #24
 80a051c:	f001 f902 	bl	80a1724 <_ZN6StringD1Ev>
    Serial.println("Image size is " + String(length));
 80a0520:	f001 fed8 	bl	80a22d4 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0524:	4942      	ldr	r1, [pc, #264]	; (80a0630 <_Z9myHandlerPKcS0_+0x250>)
 80a0526:	4605      	mov	r5, r0
 80a0528:	a806      	add	r0, sp, #24
 80a052a:	f001 f942 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a052e:	220a      	movs	r2, #10
 80a0530:	4621      	mov	r1, r4
 80a0532:	a802      	add	r0, sp, #8
 80a0534:	f001 f973 	bl	80a181e <_ZN6StringC1Eih>
 80a0538:	a902      	add	r1, sp, #8
 80a053a:	a806      	add	r0, sp, #24
 80a053c:	f001 f9ad 	bl	80a189a <_ZplRK15StringSumHelperRK6String>
 80a0540:	6801      	ldr	r1, [r0, #0]
 80a0542:	4628      	mov	r0, r5
 80a0544:	f001 fa17 	bl	80a1976 <_ZN5Print7printlnEPKc>
 80a0548:	a802      	add	r0, sp, #8
 80a054a:	f001 f8eb 	bl	80a1724 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a054e:	a806      	add	r0, sp, #24
 80a0550:	f001 f8e8 	bl	80a1724 <_ZN6StringD1Ev>
    uint8_t temp = 0xff, temp_last = 0;
    int bytesRead = 0;



    if(myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK))
 80a0554:	2208      	movs	r2, #8
 80a0556:	2141      	movs	r1, #65	; 0x41
 80a0558:	4832      	ldr	r0, [pc, #200]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a055a:	f000 f9ab 	bl	80a08b4 <_ZN7ArduCAM7get_bitEhh>
 80a055e:	2800      	cmp	r0, #0
 80a0560:	d045      	beq.n	80a05ee <_Z9myHandlerPKcS0_+0x20e>
    {
        delay(100);
 80a0562:	2064      	movs	r0, #100	; 0x64
 80a0564:	f001 fa98 	bl	80a1a98 <delay>
        Serial.println(F("ACK CMD CAM Capture Done."));
 80a0568:	f001 feb4 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a056c:	4931      	ldr	r1, [pc, #196]	; (80a0634 <_Z9myHandlerPKcS0_+0x254>)
 80a056e:	f001 fa0c 	bl	80a198a <_ZN5Print7printlnEPK19__FlashStringHelper>
        Particle.publish("status", "Capture done");
 80a0572:	4931      	ldr	r1, [pc, #196]	; (80a0638 <_Z9myHandlerPKcS0_+0x258>)
 80a0574:	a806      	add	r0, sp, #24
 80a0576:	f7ff fd9d 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a057a:	a807      	add	r0, sp, #28
 80a057c:	f7ff fdb9 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

        //#if !(defined (OV5642_MINI_5MP_PLUS) ||(defined (ARDUCAM_SHIELD_V2) && defined (OV5642_CAM)))
        //SPI.transfer(0xFF);
        //#endif

        tx_buffer_index = 0;
 80a0580:	4c2e      	ldr	r4, [pc, #184]	; (80a063c <_Z9myHandlerPKcS0_+0x25c>)
        Serial.println(F("ACK CMD CAM Capture Done."));
        Particle.publish("status", "Capture done");

        //myCAM.CS_LOW();

        myCAM.set_fifo_burst();
 80a0582:	4828      	ldr	r0, [pc, #160]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a0584:	f000 f8fa 	bl	80a077c <_ZN7ArduCAM14set_fifo_burstEv>

        //#if !(defined (OV5642_MINI_5MP_PLUS) ||(defined (ARDUCAM_SHIELD_V2) && defined (OV5642_CAM)))
        //SPI.transfer(0xFF);
        //#endif

        tx_buffer_index = 0;
 80a0588:	2300      	movs	r3, #0
        temp = 0;
 80a058a:	461d      	mov	r5, r3
            temp_last = temp;
            temp = myCAM.read_fifo();
            bytesRead++;


            buffer[tx_buffer_index++] = temp;
 80a058c:	4627      	mov	r7, r4

        //#if !(defined (OV5642_MINI_5MP_PLUS) ||(defined (ARDUCAM_SHIELD_V2) && defined (OV5642_CAM)))
        //SPI.transfer(0xFF);
        //#endif

        tx_buffer_index = 0;
 80a058e:	4e2c      	ldr	r6, [pc, #176]	; (80a0640 <_Z9myHandlerPKcS0_+0x260>)
            temp_last = temp;
            temp = myCAM.read_fifo();
            bytesRead++;


            buffer[tx_buffer_index++] = temp;
 80a0590:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80a0644 <_Z9myHandlerPKcS0_+0x264>

        //#if !(defined (OV5642_MINI_5MP_PLUS) ||(defined (ARDUCAM_SHIELD_V2) && defined (OV5642_CAM)))
        //SPI.transfer(0xFF);
        //#endif

        tx_buffer_index = 0;
 80a0594:	6023      	str	r3, [r4, #0]
        temp = 0;

        //while (bytesRead < length)
        while( (temp != 0xD9) | (temp_last != 0xFF) )
 80a0596:	2dd9      	cmp	r5, #217	; 0xd9
 80a0598:	d108      	bne.n	80a05ac <_Z9myHandlerPKcS0_+0x1cc>
 80a059a:	2bff      	cmp	r3, #255	; 0xff
 80a059c:	d106      	bne.n	80a05ac <_Z9myHandlerPKcS0_+0x1cc>
                break;
            }
        }


        if (tx_buffer_index != 0) {
 80a059e:	6822      	ldr	r2, [r4, #0]
 80a05a0:	b1ea      	cbz	r2, 80a05de <_Z9myHandlerPKcS0_+0x1fe>
            client.write(buffer, tx_buffer_index);
 80a05a2:	4928      	ldr	r1, [pc, #160]	; (80a0644 <_Z9myHandlerPKcS0_+0x264>)
 80a05a4:	481b      	ldr	r0, [pc, #108]	; (80a0614 <_Z9myHandlerPKcS0_+0x234>)
 80a05a6:	f000 fe58 	bl	80a125a <_ZN9TCPClient5writeEPKhj>
 80a05aa:	e018      	b.n	80a05de <_Z9myHandlerPKcS0_+0x1fe>

        //while (bytesRead < length)
        while( (temp != 0xD9) | (temp_last != 0xFF) )
        {
            temp_last = temp;
            temp = myCAM.read_fifo();
 80a05ac:	481d      	ldr	r0, [pc, #116]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a05ae:	f000 f96b 	bl	80a0888 <_ZN7ArduCAM9read_fifoEv>
            bytesRead++;


            buffer[tx_buffer_index++] = temp;
 80a05b2:	6823      	ldr	r3, [r4, #0]

        //while (bytesRead < length)
        while( (temp != 0xD9) | (temp_last != 0xFF) )
        {
            temp_last = temp;
            temp = myCAM.read_fifo();
 80a05b4:	4681      	mov	r9, r0
            bytesRead++;


            buffer[tx_buffer_index++] = temp;
 80a05b6:	1c5a      	adds	r2, r3, #1

            if (tx_buffer_index >= TX_BUFFER_MAX) {
 80a05b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
            temp_last = temp;
            temp = myCAM.read_fifo();
            bytesRead++;


            buffer[tx_buffer_index++] = temp;
 80a05bc:	6022      	str	r2, [r4, #0]
 80a05be:	f808 0003 	strb.w	r0, [r8, r3]

            if (tx_buffer_index >= TX_BUFFER_MAX) {
 80a05c2:	db07      	blt.n	80a05d4 <_Z9myHandlerPKcS0_+0x1f4>
                client.write(buffer, tx_buffer_index);
 80a05c4:	491f      	ldr	r1, [pc, #124]	; (80a0644 <_Z9myHandlerPKcS0_+0x264>)
 80a05c6:	4813      	ldr	r0, [pc, #76]	; (80a0614 <_Z9myHandlerPKcS0_+0x234>)
 80a05c8:	f000 fe47 	bl	80a125a <_ZN9TCPClient5writeEPKhj>

                tx_buffer_index = 0;
 80a05cc:	2300      	movs	r3, #0
 80a05ce:	603b      	str	r3, [r7, #0]
                Particle.process();
 80a05d0:	f7ff fd82 	bl	80a00d8 <_ZN10CloudClass7processEv>
            }

            if (bytesRead > 2048000) {
 80a05d4:	3e01      	subs	r6, #1
        temp = 0;

        //while (bytesRead < length)
        while( (temp != 0xD9) | (temp_last != 0xFF) )
        {
            temp_last = temp;
 80a05d6:	462b      	mov	r3, r5

                tx_buffer_index = 0;
                Particle.process();
            }

            if (bytesRead > 2048000) {
 80a05d8:	d0e1      	beq.n	80a059e <_Z9myHandlerPKcS0_+0x1be>

        //while (bytesRead < length)
        while( (temp != 0xD9) | (temp_last != 0xFF) )
        {
            temp_last = temp;
            temp = myCAM.read_fifo();
 80a05da:	464d      	mov	r5, r9
 80a05dc:	e7db      	b.n	80a0596 <_Z9myHandlerPKcS0_+0x1b6>
            client.write(buffer, tx_buffer_index);
        }

        //Clear the capture done flag
        //myCAM.CS_HIGH();
        myCAM.clear_fifo_flag();
 80a05de:	4811      	ldr	r0, [pc, #68]	; (80a0624 <_Z9myHandlerPKcS0_+0x244>)
 80a05e0:	f000 f914 	bl	80a080c <_ZN7ArduCAM15clear_fifo_flagEv>

        Serial.println(F("End of Photo"));
 80a05e4:	f001 fe76 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a05e8:	4917      	ldr	r1, [pc, #92]	; (80a0648 <_Z9myHandlerPKcS0_+0x268>)
 80a05ea:	f001 f9ce 	bl	80a198a <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    Serial.println("sleeping 10 seconds");
 80a05ee:	f001 fe71 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a05f2:	4916      	ldr	r1, [pc, #88]	; (80a064c <_Z9myHandlerPKcS0_+0x26c>)
 80a05f4:	f001 f9bf 	bl	80a1976 <_ZN5Print7printlnEPKc>
    Particle.publish("status", "Sleeping 10 seconds");
 80a05f8:	4915      	ldr	r1, [pc, #84]	; (80a0650 <_Z9myHandlerPKcS0_+0x270>)
 80a05fa:	a806      	add	r0, sp, #24
 80a05fc:	f7ff fd5a 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.5.constprop.7>
 80a0600:	a807      	add	r0, sp, #28
 80a0602:	f7ff fd76 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(10 * 1000);
 80a0606:	f242 7010 	movw	r0, #10000	; 0x2710
 80a060a:	f001 fa45 	bl	80a1a98 <delay>
}
 80a060e:	b00b      	add	sp, #44	; 0x2c
 80a0610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0614:	20000380 	.word	0x20000380
 80a0618:	080a2d2b 	.word	0x080a2d2b
 80a061c:	080a2d1d 	.word	0x080a2d1d
 80a0620:	080a2d54 	.word	0x080a2d54
 80a0624:	20000374 	.word	0x20000374
 80a0628:	080a2d68 	.word	0x080a2d68
 80a062c:	080a2d7b 	.word	0x080a2d7b
 80a0630:	080a2d86 	.word	0x080a2d86
 80a0634:	080a2d95 	.word	0x080a2d95
 80a0638:	080a2daf 	.word	0x080a2daf
 80a063c:	2000036c 	.word	0x2000036c
 80a0640:	001f4001 	.word	0x001f4001
 80a0644:	2000039c 	.word	0x2000039c
 80a0648:	080a2dbc 	.word	0x080a2dbc
 80a064c:	080a2dc9 	.word	0x080a2dc9
 80a0650:	080a2ddd 	.word	0x080a2ddd

080a0654 <_GLOBAL__sub_I_client>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0654:	4b0c      	ldr	r3, [pc, #48]	; (80a0688 <_GLOBAL__sub_I_client+0x34>)


void loop()
{
 
 80a0656:	b510      	push	{r4, lr}
 80a0658:	2400      	movs	r4, #0
 80a065a:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a065c:	f000 fa66 	bl	80a0b2c <HAL_Pin_Map>
#include "ArduCAM.h"
#include "memorysaver.h"
SYSTEM_THREAD(ENABLED);
 80a0660:	4621      	mov	r1, r4

#define VERSION_SLUG "7n"

TCPClient client;
 80a0662:	4c0a      	ldr	r4, [pc, #40]	; (80a068c <_GLOBAL__sub_I_client+0x38>)
#include "ArduCAM.h"
#include "memorysaver.h"
SYSTEM_THREAD(ENABLED);
 80a0664:	2001      	movs	r0, #1
 80a0666:	f000 fc0b 	bl	80a0e80 <system_thread_set_state>

#define VERSION_SLUG "7n"

TCPClient client;
 80a066a:	4620      	mov	r0, r4
 80a066c:	f001 f804 	bl	80a1678 <_ZN9TCPClientC1Ev>
 80a0670:	4a07      	ldr	r2, [pc, #28]	; (80a0690 <_GLOBAL__sub_I_client+0x3c>)
 80a0672:	4908      	ldr	r1, [pc, #32]	; (80a0694 <_GLOBAL__sub_I_client+0x40>)
 80a0674:	4620      	mov	r0, r4
 80a0676:	f002 f8f5 	bl	80a2864 <__aeabi_atexit>


void loop()
{
 
 80a067a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x1F, 0x00,
//      0x00, 0x00
//};


ArduCAM myCAM(OV5642, SPI_CS);
 80a067e:	220c      	movs	r2, #12
 80a0680:	2103      	movs	r1, #3
 80a0682:	4805      	ldr	r0, [pc, #20]	; (80a0698 <_GLOBAL__sub_I_client+0x44>)
 80a0684:	f000 b842 	b.w	80a070c <_ZN7ArduCAMC1Ehi>
 80a0688:	20000370 	.word	0x20000370
 80a068c:	20000380 	.word	0x20000380
 80a0690:	20000368 	.word	0x20000368
 80a0694:	080a0121 	.word	0x080a0121
 80a0698:	20000374 	.word	0x20000374

080a069c <_GLOBAL__sub_I_serInStr>:
 80a069c:	f000 ba46 	b.w	80a0b2c <HAL_Pin_Map>

080a06a0 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
 80a06a0:	f000 ba44 	b.w	80a0b2c <HAL_Pin_Map>

080a06a4 <_GLOBAL__sub_I__Z10BlynkResetv>:
 80a06a4:	f000 ba42 	b.w	80a0b2c <HAL_Pin_Map>

080a06a8 <_GLOBAL__sub_I_BlynkNoOpCbk>:
 80a06a8:	f000 ba40 	b.w	80a0b2c <HAL_Pin_Map>

080a06ac <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a06ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a06ae:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a06b0:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a06b2:	4608      	mov	r0, r1
 80a06b4:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a06b6:	b133      	cbz	r3, 80a06c6 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a06b8:	b93d      	cbnz	r5, 80a06ca <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a06ba:	490c      	ldr	r1, [pc, #48]	; (80a06ec <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a06bc:	b004      	add	sp, #16
 80a06be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a06c2:	f001 b945 	b.w	80a1950 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a06c6:	4b0a      	ldr	r3, [pc, #40]	; (80a06f0 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a06c8:	e000      	b.n	80a06cc <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a06ca:	4b0a      	ldr	r3, [pc, #40]	; (80a06f4 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a06cc:	7b16      	ldrb	r6, [r2, #12]
 80a06ce:	4c0a      	ldr	r4, [pc, #40]	; (80a06f8 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a06d0:	490a      	ldr	r1, [pc, #40]	; (80a06fc <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a06d2:	7b52      	ldrb	r2, [r2, #13]
 80a06d4:	2e01      	cmp	r6, #1
 80a06d6:	bf08      	it	eq
 80a06d8:	4621      	moveq	r1, r4
 80a06da:	9202      	str	r2, [sp, #8]
 80a06dc:	9101      	str	r1, [sp, #4]
 80a06de:	9500      	str	r5, [sp, #0]
 80a06e0:	4a07      	ldr	r2, [pc, #28]	; (80a0700 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a06e2:	2100      	movs	r1, #0
 80a06e4:	f001 f97f 	bl	80a19e6 <_ZN5Print11printf_implEbPKcz>
  }
 80a06e8:	b004      	add	sp, #16
 80a06ea:	bd70      	pop	{r4, r5, r6, pc}
 80a06ec:	080a3921 	.word	0x080a3921
 80a06f0:	080a3c99 	.word	0x080a3c99
 80a06f4:	080a3910 	.word	0x080a3910
 80a06f8:	080a3919 	.word	0x080a3919
 80a06fc:	080a391d 	.word	0x080a391d
 80a0700:	080a3937 	.word	0x080a3937

080a0704 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0704:	6803      	ldr	r3, [r0, #0]
 80a0706:	b2c9      	uxtb	r1, r1
 80a0708:	689b      	ldr	r3, [r3, #8]
 80a070a:	4718      	bx	r3

080a070c <_ZN7ArduCAMC1Ehi>:
ArduCAM::ArduCAM()
{
  sensor_model = OV7670;
  sensor_addr = 0x42;
}
ArduCAM::ArduCAM(byte model ,int CS)
 80a070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a070e:	4617      	mov	r7, r2
 80a0710:	4604      	mov	r4, r0
 80a0712:	460e      	mov	r6, r1
		}
	#else
		#if defined(ESP8266)
		  B_CS = CS;
		#else
		  P_CS  = portOutputRegister(digitalPinToPort(CS));
 80a0714:	f000 fa0a 	bl	80a0b2c <HAL_Pin_Map>
 80a0718:	251c      	movs	r5, #28
 80a071a:	437d      	muls	r5, r7
 80a071c:	5943      	ldr	r3, [r0, r5]
 80a071e:	3314      	adds	r3, #20
 80a0720:	6023      	str	r3, [r4, #0]
		  B_CS  = digitalPinToBitMask(CS);
 80a0722:	f000 fa03 	bl	80a0b2c <HAL_Pin_Map>
 80a0726:	4428      	add	r0, r5
 80a0728:	8883      	ldrh	r3, [r0, #4]
		#endif
	#endif
 #if defined (RASPBERRY_PI)
   pinMode(CS, OUTPUT);
 #else
	  pinMode(CS, OUTPUT);
 80a072a:	2101      	movs	r1, #1
	#else
		#if defined(ESP8266)
		  B_CS = CS;
		#else
		  P_CS  = portOutputRegister(digitalPinToPort(CS));
		  B_CS  = digitalPinToBitMask(CS);
 80a072c:	6063      	str	r3, [r4, #4]
		#endif
	#endif
 #if defined (RASPBERRY_PI)
   pinMode(CS, OUTPUT);
 #else
	  pinMode(CS, OUTPUT);
 80a072e:	b2b8      	uxth	r0, r7
 80a0730:	f002 f82c 	bl	80a278c <pinMode>
      sbi(P_CS, B_CS);
 80a0734:	4b10      	ldr	r3, [pc, #64]	; (80a0778 <_ZN7ArduCAMC1Ehi+0x6c>)
 80a0736:	681b      	ldr	r3, [r3, #0]
 80a0738:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80a073c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80a0740:	8313      	strh	r3, [r2, #24]
	#endif
	sensor_model = model;
 80a0742:	7266      	strb	r6, [r4, #9]
	switch (sensor_model)
 80a0744:	2e10      	cmp	r6, #16
 80a0746:	d812      	bhi.n	80a076e <_ZN7ArduCAMC1Ehi+0x62>
 80a0748:	e8df f006 	tbb	[pc, r6]
 80a074c:	0d110b11 	.word	0x0d110b11
 80a0750:	090f0f0d 	.word	0x090f0f0d
 80a0754:	0d0b1111 	.word	0x0d0b1111
 80a0758:	0d110f09 	.word	0x0d110f09
 80a075c:	0d          	.byte	0x0d
 80a075d:	00          	.byte	0x00
    break;
    case MT9M112:
    	#if defined (RASPBERRY_PI)
    		sensor_addr = 0x5d;
    	#else
      	sensor_addr = 0x90;
 80a075e:	2390      	movs	r3, #144	; 0x90
 80a0760:	e006      	b.n	80a0770 <_ZN7ArduCAMC1Ehi+0x64>
      #endif
    break;
    case MT9M001:
      sensor_addr = 0xba;
 80a0762:	23ba      	movs	r3, #186	; 0xba
 80a0764:	e004      	b.n	80a0770 <_ZN7ArduCAMC1Ehi+0x64>
    case MT9T112:
    case MT9D112:
    	#if defined (RASPBERRY_PI)
    		sensor_addr = 0x3c;
    	#else
      	sensor_addr = 0x78;
 80a0766:	2378      	movs	r3, #120	; 0x78
 80a0768:	e002      	b.n	80a0770 <_ZN7ArduCAMC1Ehi+0x64>
    case OV9650:
    case OV9655:
    	#if defined (RASPBERRY_PI)
    		sensor_addr = 0x30;
    	#else
      	sensor_addr = 0x60;
 80a076a:	2360      	movs	r3, #96	; 0x60
 80a076c:	e000      	b.n	80a0770 <_ZN7ArduCAMC1Ehi+0x64>
    break;
		default:
			#if defined (RASPBERRY_PI)
		 		sensor_addr = 0x21;
		 	#else
		 		sensor_addr = 0x42;
 80a076e:	2342      	movs	r3, #66	; 0x42
 80a0770:	72a3      	strb	r3, [r4, #10]
		// initialize i2c:
	if (!arducam_i2c_init(sensor_addr)) {
		printf("ERROR: I2C init failed\n");
	}
	#endif
}
 80a0772:	4620      	mov	r0, r4
 80a0774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0776:	bf00      	nop
 80a0778:	200007a0 	.word	0x200007a0

080a077c <_ZN7ArduCAM14set_fifo_burstEv>:
void ArduCAM::set_fifo_burst()
{
	#if defined (RASPBERRY_PI)
	transfer(BURST_FIFO_READ);
	#else
    SPI.transfer(BURST_FIFO_READ);
 80a077c:	213c      	movs	r1, #60	; 0x3c
 80a077e:	4801      	ldr	r0, [pc, #4]	; (80a0784 <_ZN7ArduCAM14set_fifo_burstEv+0x8>)
 80a0780:	f000 bcf4 	b.w	80a116c <_ZN8SPIClass8transferEh>
 80a0784:	2000082c 	.word	0x2000082c

080a0788 <_ZN7ArduCAM9bus_writeEii>:
      break;
  }
}

uint8_t ArduCAM::bus_write(int address,int value)
{
 80a0788:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a078c:	4688      	mov	r8, r1
 80a078e:	4617      	mov	r7, r2
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
 80a0790:	4c16      	ldr	r4, [pc, #88]	; (80a07ec <_ZN7ArduCAM9bus_writeEii+0x64>)
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 80a0792:	4b17      	ldr	r3, [pc, #92]	; (80a07f0 <_ZN7ArduCAM9bus_writeEii+0x68>)
 80a0794:	4a17      	ldr	r2, [pc, #92]	; (80a07f4 <_ZN7ArduCAM9bus_writeEii+0x6c>)
#endif

	cbi(P_CS, B_CS);
 80a0796:	4e18      	ldr	r6, [pc, #96]	; (80a07f8 <_ZN7ArduCAM9bus_writeEii+0x70>)
 80a0798:	9300      	str	r3, [sp, #0]
 80a079a:	2501      	movs	r5, #1
 80a079c:	2300      	movs	r3, #0
}

uint8_t ArduCAM::bus_write(int address,int value)
{
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
 80a079e:	4669      	mov	r1, sp
 80a07a0:	4620      	mov	r0, r4
 80a07a2:	f88d 3004 	strb.w	r3, [sp, #4]
 80a07a6:	9202      	str	r2, [sp, #8]
 80a07a8:	f88d 300d 	strb.w	r3, [sp, #13]
 80a07ac:	f88d 500c 	strb.w	r5, [sp, #12]
 80a07b0:	f000 fc6c 	bl	80a108c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
#endif

	cbi(P_CS, B_CS);
 80a07b4:	6833      	ldr	r3, [r6, #0]
	#if defined (RASPBERRY_PI)
		arducam_spi_write(address | 0x80, value);
	#else
		SPI.transfer(address);
 80a07b6:	fa5f f188 	uxtb.w	r1, r8
{
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
#endif

	cbi(P_CS, B_CS);
 80a07ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80a07be:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	#if defined (RASPBERRY_PI)
		arducam_spi_write(address | 0x80, value);
	#else
		SPI.transfer(address);
 80a07c2:	4620      	mov	r0, r4
{
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
#endif

	cbi(P_CS, B_CS);
 80a07c4:	8353      	strh	r3, [r2, #26]
	#if defined (RASPBERRY_PI)
		arducam_spi_write(address | 0x80, value);
	#else
		SPI.transfer(address);
 80a07c6:	f000 fcd1 	bl	80a116c <_ZN8SPIClass8transferEh>
		SPI.transfer(value);
 80a07ca:	b2f9      	uxtb	r1, r7
 80a07cc:	4620      	mov	r0, r4
 80a07ce:	f000 fccd 	bl	80a116c <_ZN8SPIClass8transferEh>
	#endif
	sbi(P_CS, B_CS);
 80a07d2:	6833      	ldr	r3, [r6, #0]

#if defined (PARTICLE)
	SPI.endTransaction();
 80a07d4:	4620      	mov	r0, r4
		arducam_spi_write(address | 0x80, value);
	#else
		SPI.transfer(address);
		SPI.transfer(value);
	#endif
	sbi(P_CS, B_CS);
 80a07d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80a07da:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80a07de:	8313      	strh	r3, [r2, #24]

#if defined (PARTICLE)
	SPI.endTransaction();
 80a07e0:	f000 fc3b 	bl	80a105a <_ZN8SPIClass14endTransactionEv>
#endif

	return 1;
}
 80a07e4:	4628      	mov	r0, r5
 80a07e6:	b004      	add	sp, #16
 80a07e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a07ec:	2000082c 	.word	0x2000082c
 80a07f0:	080a2dfc 	.word	0x080a2dfc
 80a07f4:	007a1200 	.word	0x007a1200
 80a07f8:	200007a0 	.word	0x200007a0

080a07fc <_ZN7ArduCAM9write_regEhh>:
void ArduCAM::write_reg(uint8_t addr, uint8_t data)
{
	#if defined (RASPBERRY_PI)
		bus_write(addr , data);
	#else
	 bus_write(addr | 0x80, data);
 80a07fc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a0800:	f7ff bfc2 	b.w	80a0788 <_ZN7ArduCAM9bus_writeEii>

080a0804 <_ZN7ArduCAM13start_captureEv>:
 80a0804:	2202      	movs	r2, #2
 80a0806:	2184      	movs	r1, #132	; 0x84
 80a0808:	f7ff bfbe 	b.w	80a0788 <_ZN7ArduCAM9bus_writeEii>

080a080c <_ZN7ArduCAM15clear_fifo_flagEv>:
 80a080c:	2201      	movs	r2, #1
 80a080e:	2184      	movs	r1, #132	; 0x84
 80a0810:	f7ff bfba 	b.w	80a0788 <_ZN7ArduCAM9bus_writeEii>

080a0814 <_ZN7ArduCAM10flush_fifoEv>:
 80a0814:	f7ff bffa 	b.w	80a080c <_ZN7ArduCAM15clear_fifo_flagEv>

080a0818 <_ZN7ArduCAM8bus_readEi>:

	return 1;
}

uint8_t ArduCAM:: bus_read(int address)
{
 80a0818:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a081a:	460f      	mov	r7, r1
 80a081c:	4b16      	ldr	r3, [pc, #88]	; (80a0878 <_ZN7ArduCAM8bus_readEi+0x60>)
 80a081e:	b085      	sub	sp, #20
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
 80a0820:	4c16      	ldr	r4, [pc, #88]	; (80a087c <_ZN7ArduCAM8bus_readEi+0x64>)
 80a0822:	9300      	str	r3, [sp, #0]
 80a0824:	4b16      	ldr	r3, [pc, #88]	; (80a0880 <_ZN7ArduCAM8bus_readEi+0x68>)
#endif

	uint8_t value;
	cbi(P_CS, B_CS);
 80a0826:	4e17      	ldr	r6, [pc, #92]	; (80a0884 <_ZN7ArduCAM8bus_readEi+0x6c>)
 80a0828:	2500      	movs	r5, #0
 80a082a:	9302      	str	r3, [sp, #8]
}

uint8_t ArduCAM:: bus_read(int address)
{
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
 80a082c:	4669      	mov	r1, sp
 80a082e:	2301      	movs	r3, #1
 80a0830:	4620      	mov	r0, r4
 80a0832:	f88d 5004 	strb.w	r5, [sp, #4]
 80a0836:	f88d 300c 	strb.w	r3, [sp, #12]
 80a083a:	f88d 500d 	strb.w	r5, [sp, #13]
 80a083e:	f000 fc25 	bl	80a108c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
#endif

	uint8_t value;
	cbi(P_CS, B_CS);
 80a0842:	6833      	ldr	r3, [r6, #0]
		  #if defined (PARTICLE)
                SPI.endTransaction();
            #endif
		  return value;
		#else
		  SPI.transfer(address);
 80a0844:	b2f9      	uxtb	r1, r7
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
#endif

	uint8_t value;
	cbi(P_CS, B_CS);
 80a0846:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80a084a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
		  #if defined (PARTICLE)
                SPI.endTransaction();
            #endif
		  return value;
		#else
		  SPI.transfer(address);
 80a084e:	4620      	mov	r0, r4
#if defined (PARTICLE)
  SPI.beginTransaction(SPISettings(8*MHZ, MSBFIRST, SPI_MODE0));
#endif

	uint8_t value;
	cbi(P_CS, B_CS);
 80a0850:	8353      	strh	r3, [r2, #26]
		  #if defined (PARTICLE)
                SPI.endTransaction();
            #endif
		  return value;
		#else
		  SPI.transfer(address);
 80a0852:	f000 fc8b 	bl	80a116c <_ZN8SPIClass8transferEh>
		  value = SPI.transfer(0x00);
 80a0856:	4629      	mov	r1, r5
 80a0858:	4620      	mov	r0, r4
 80a085a:	f000 fc87 	bl	80a116c <_ZN8SPIClass8transferEh>
 80a085e:	4605      	mov	r5, r0
		  // take the SS pin high to de-select the chip:
		  sbi(P_CS, B_CS);
 80a0860:	6833      	ldr	r3, [r6, #0]
		  #if defined (PARTICLE)
                SPI.endTransaction();
 80a0862:	4620      	mov	r0, r4
		  return value;
		#else
		  SPI.transfer(address);
		  value = SPI.transfer(0x00);
		  // take the SS pin high to de-select the chip:
		  sbi(P_CS, B_CS);
 80a0864:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80a0868:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80a086c:	8313      	strh	r3, [r2, #24]
		  #if defined (PARTICLE)
                SPI.endTransaction();
 80a086e:	f000 fbf4 	bl	80a105a <_ZN8SPIClass14endTransactionEv>
                SPI.endTransaction();
            #endif
		  return value;
		#endif
#endif
}
 80a0872:	4628      	mov	r0, r5
 80a0874:	b005      	add	sp, #20
 80a0876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0878:	080a2dfc 	.word	0x080a2dfc
 80a087c:	2000082c 	.word	0x2000082c
 80a0880:	007a1200 	.word	0x007a1200
 80a0884:	200007a0 	.word	0x200007a0

080a0888 <_ZN7ArduCAM9read_fifoEv>:
}

uint8_t ArduCAM::read_fifo(void)
{
	uint8_t data;
	data = bus_read(SINGLE_FIFO_READ);
 80a0888:	213d      	movs	r1, #61	; 0x3d
 80a088a:	f7ff bfc5 	b.w	80a0818 <_ZN7ArduCAM8bus_readEi>

080a088e <_ZN7ArduCAM8read_regEh>:
{
	uint8_t data;
	#if defined (RASPBERRY_PI)
		data = bus_read(addr);	
	#else
		data = bus_read(addr & 0x7F);
 80a088e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80a0892:	f7ff bfc1 	b.w	80a0818 <_ZN7ArduCAM8bus_readEi>

080a0896 <_ZN7ArduCAM7set_bitEhh>:
}

//My add
//Set corresponding bit  
void ArduCAM::set_bit(uint8_t addr, uint8_t bit)
{
 80a0896:	b570      	push	{r4, r5, r6, lr}
 80a0898:	4605      	mov	r5, r0
 80a089a:	460e      	mov	r6, r1
 80a089c:	4614      	mov	r4, r2
	uint8_t temp;
	temp = read_reg(addr);
 80a089e:	f7ff fff6 	bl	80a088e <_ZN7ArduCAM8read_regEh>
	write_reg(addr, temp | bit);
 80a08a2:	ea40 0204 	orr.w	r2, r0, r4
 80a08a6:	4631      	mov	r1, r6
 80a08a8:	4628      	mov	r0, r5
}
 80a08aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
//Set corresponding bit  
void ArduCAM::set_bit(uint8_t addr, uint8_t bit)
{
	uint8_t temp;
	temp = read_reg(addr);
	write_reg(addr, temp | bit);
 80a08ae:	b2d2      	uxtb	r2, r2
 80a08b0:	f7ff bfa4 	b.w	80a07fc <_ZN7ArduCAM9write_regEhh>

080a08b4 <_ZN7ArduCAM7get_bitEhh>:
	write_reg(addr, temp & (~bit));
}

//Get corresponding bit status
uint8_t ArduCAM::get_bit(uint8_t addr, uint8_t bit)
{
 80a08b4:	b510      	push	{r4, lr}
 80a08b6:	4614      	mov	r4, r2
  uint8_t temp;
  temp = read_reg(addr);
 80a08b8:	f7ff ffe9 	bl	80a088e <_ZN7ArduCAM8read_regEh>
  temp = temp & bit;
  return temp;
}
 80a08bc:	4020      	ands	r0, r4
 80a08be:	bd10      	pop	{r4, pc}

080a08c0 <_ZN7ArduCAM16read_fifo_lengthEv>:
{
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
}

uint32_t ArduCAM::read_fifo_length(void)
{
 80a08c0:	b570      	push	{r4, r5, r6, lr}
{
	uint8_t data;
	#if defined (RASPBERRY_PI)
		data = bus_read(addr);	
	#else
		data = bus_read(addr & 0x7F);
 80a08c2:	2142      	movs	r1, #66	; 0x42
{
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
}

uint32_t ArduCAM::read_fifo_length(void)
{
 80a08c4:	4605      	mov	r5, r0
{
	uint8_t data;
	#if defined (RASPBERRY_PI)
		data = bus_read(addr);	
	#else
		data = bus_read(addr & 0x7F);
 80a08c6:	f7ff ffa7 	bl	80a0818 <_ZN7ArduCAM8bus_readEi>
 80a08ca:	2143      	movs	r1, #67	; 0x43
 80a08cc:	4604      	mov	r4, r0
 80a08ce:	4628      	mov	r0, r5
 80a08d0:	f7ff ffa2 	bl	80a0818 <_ZN7ArduCAM8bus_readEi>
 80a08d4:	2144      	movs	r1, #68	; 0x44
 80a08d6:	4606      	mov	r6, r0
 80a08d8:	4628      	mov	r0, r5
 80a08da:	f7ff ff9d 	bl	80a0818 <_ZN7ArduCAM8bus_readEi>
	uint32_t len1,len2,len3,length=0;
	len1 = read_reg(FIFO_SIZE1);
  len2 = read_reg(FIFO_SIZE2);
  len3 = read_reg(FIFO_SIZE3) & 0x7f;
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
	return length;	
 80a08de:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a08e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
 80a08e6:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 80a08ea:	bd70      	pop	{r4, r5, r6, pc}

080a08ec <_ZN7ArduCAM10set_formatEh>:

}

void ArduCAM::set_format(byte fmt)
{
  if (fmt == BMP)
 80a08ec:	b909      	cbnz	r1, 80a08f2 <_ZN7ArduCAM10set_formatEh+0x6>
    m_fmt = BMP;
 80a08ee:	7201      	strb	r1, [r0, #8]
 80a08f0:	4770      	bx	lr
  else
    m_fmt = JPEG;
 80a08f2:	2301      	movs	r3, #1
 80a08f4:	7203      	strb	r3, [r0, #8]
 80a08f6:	4770      	bx	lr

080a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>:
  	return 1;
}

// Read/write 8 bit value to/from 16 bit register address
byte ArduCAM::wrSensorReg16_8(int regID, int regDat)
{
 80a08f8:	b570      	push	{r4, r5, r6, lr}
 80a08fa:	4606      	mov	r6, r0
 80a08fc:	460c      	mov	r4, r1
 80a08fe:	4615      	mov	r5, r2
	#if defined (RASPBERRY_PI) 
		arducam_i2c_word_write(regID, regDat);
		//arducam_delay_ms(1);
	#else
		Wire.beginTransmission(sensor_addr >> 1);
 80a0900:	f001 ff90 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a0904:	7ab1      	ldrb	r1, [r6, #10]
 80a0906:	0849      	lsrs	r1, r1, #1
 80a0908:	f001 fe42 	bl	80a2590 <_ZN7TwoWire17beginTransmissionEi>
	  Wire.write(regID >> 8);            // sends instruction byte, MSB first
 80a090c:	f001 ff8a 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a0910:	1221      	asrs	r1, r4, #8
 80a0912:	f7ff fef7 	bl	80a0704 <_ZN7TwoWire5writeEi>
	  Wire.write(regID & 0x00FF);
 80a0916:	f001 ff85 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a091a:	b2e1      	uxtb	r1, r4
 80a091c:	f7ff fef2 	bl	80a0704 <_ZN7TwoWire5writeEi>
	  Wire.write(regDat & 0x00FF);
 80a0920:	f001 ff80 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a0924:	b2e9      	uxtb	r1, r5
 80a0926:	f7ff feed 	bl	80a0704 <_ZN7TwoWire5writeEi>
	  if (Wire.endTransmission())
 80a092a:	f001 ff7b 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a092e:	f001 fe36 	bl	80a259e <_ZN7TwoWire15endTransmissionEv>
 80a0932:	b920      	cbnz	r0, 80a093e <_ZN7ArduCAM15wrSensorReg16_8Eii+0x46>
	  {
	    return 0;
	  }
	  delay(1);
 80a0934:	2001      	movs	r0, #1
 80a0936:	f001 f8af 	bl	80a1a98 <delay>
	#endif
	return 1;
 80a093a:	2001      	movs	r0, #1
 80a093c:	bd70      	pop	{r4, r5, r6, pc}
	  Wire.write(regID >> 8);            // sends instruction byte, MSB first
	  Wire.write(regID & 0x00FF);
	  Wire.write(regDat & 0x00FF);
	  if (Wire.endTransmission())
	  {
	    return 0;
 80a093e:	2000      	movs	r0, #0
	  }
	  delay(1);
	#endif
	return 1;
}
 80a0940:	bd70      	pop	{r4, r5, r6, pc}

080a0942 <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg>:
	return 1;
}

// Write 8 bit values to 16 bit register address
int ArduCAM::wrSensorRegs16_8(const struct sensor_reg reglist[])
{
 80a0942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0946:	4607      	mov	r7, r0
 80a0948:	460c      	mov	r4, r1
		int err = 0;
	  unsigned int reg_addr;
	  unsigned char reg_val;
	  const struct sensor_reg *next = reglist;
	
	  while ((reg_addr != 0xffff) | (reg_val != 0xff))
 80a094a:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80a094e:	4545      	cmp	r5, r8
 80a0950:	f104 0404 	add.w	r4, r4, #4
 80a0954:	d101      	bne.n	80a095a <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg+0x18>
 80a0956:	2eff      	cmp	r6, #255	; 0xff
 80a0958:	d009      	beq.n	80a096e <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg+0x2c>
	  	
	   #if defined (RASPBERRY_PI)
		   reg_addr =next->reg;
       reg_val = next->val;
	   #else
	     reg_addr = pgm_read_word(&next->reg);
 80a095a:	f834 5c04 	ldrh.w	r5, [r4, #-4]
	     reg_val = pgm_read_word(&next->val);
 80a095e:	f814 6c02 	ldrb.w	r6, [r4, #-2]
	    #endif
	    err = wrSensorReg16_8(reg_addr, reg_val);
 80a0962:	4629      	mov	r1, r5
 80a0964:	4632      	mov	r2, r6
 80a0966:	4638      	mov	r0, r7
 80a0968:	f7ff ffc6 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
		int err = 0;
	  unsigned int reg_addr;
	  unsigned char reg_val;
	  const struct sensor_reg *next = reglist;
	
	  while ((reg_addr != 0xffff) | (reg_val != 0xff))
 80a096c:	e7ef      	b.n	80a094e <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg+0xc>
			yield();
		#endif
	  }
	#endif
	return 1;
}
 80a096e:	2001      	movs	r0, #1
 80a0970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0974 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh>:
void ArduCAM::OV5642_set_JPEG_size(uint8_t size)
{
#if defined(OV5642_CAM) || defined(OV5642_CAM_BIT_ROTATION_FIXED)|| defined(OV5642_MINI_5MP) || defined (OV5642_MINI_5MP_PLUS)
  uint8_t reg_val;

  switch (size)
 80a0974:	2906      	cmp	r1, #6
 80a0976:	d811      	bhi.n	80a099c <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x28>
 80a0978:	e8df f001 	tbb	[pc, r1]
 80a097c:	08060410 	.word	0x08060410
 80a0980:	0c0a      	.short	0x0c0a
 80a0982:	0e          	.byte	0x0e
 80a0983:	00          	.byte	0x00
  {
    case OV5642_320x240:
      wrSensorRegs16_8(ov5642_320x240);
      break;
    case OV5642_640x480:
      wrSensorRegs16_8(ov5642_640x480);
 80a0984:	4907      	ldr	r1, [pc, #28]	; (80a09a4 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x30>)
 80a0986:	e00a      	b.n	80a099e <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x2a>
      break;
    case OV5642_1024x768:
      wrSensorRegs16_8(ov5642_1024x768);
 80a0988:	4907      	ldr	r1, [pc, #28]	; (80a09a8 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x34>)
 80a098a:	e008      	b.n	80a099e <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x2a>
      break;
    case OV5642_1280x960:
      wrSensorRegs16_8(ov5642_1280x960);
 80a098c:	4907      	ldr	r1, [pc, #28]	; (80a09ac <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x38>)
 80a098e:	e006      	b.n	80a099e <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x2a>
      break;
    case OV5642_1600x1200:
      wrSensorRegs16_8(ov5642_1600x1200);
 80a0990:	4907      	ldr	r1, [pc, #28]	; (80a09b0 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x3c>)
 80a0992:	e004      	b.n	80a099e <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x2a>
      break;
    case OV5642_2048x1536:
      wrSensorRegs16_8(ov5642_2048x1536);
 80a0994:	4907      	ldr	r1, [pc, #28]	; (80a09b4 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x40>)
 80a0996:	e002      	b.n	80a099e <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x2a>
      break;
    case OV5642_2592x1944:
      wrSensorRegs16_8(ov5642_2592x1944);
 80a0998:	4907      	ldr	r1, [pc, #28]	; (80a09b8 <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x44>)
 80a099a:	e000      	b.n	80a099e <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x2a>
      break;
    default:
      wrSensorRegs16_8(ov5642_320x240);
 80a099c:	4907      	ldr	r1, [pc, #28]	; (80a09bc <_ZN7ArduCAM20OV5642_set_JPEG_sizeEh+0x48>)
 80a099e:	f7ff bfd0 	b.w	80a0942 <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg>
 80a09a2:	bf00      	nop
 80a09a4:	080a3a3e 	.word	0x080a3a3e
 80a09a8:	080a3b12 	.word	0x080a3b12
 80a09ac:	080a3aaa 	.word	0x080a3aaa
 80a09b0:	080a2e00 	.word	0x080a2e00
 80a09b4:	080a3956 	.word	0x080a3956
 80a09b8:	080a2f88 	.word	0x080a2f88
 80a09bc:	080a3b7a 	.word	0x080a3b7a

080a09c0 <_ZN7ArduCAM15rdSensorReg16_8EtPh>:
	  delay(1);
	#endif
	return 1;
}
byte ArduCAM::rdSensorReg16_8(uint16_t regID, uint8_t* regDat)
{
 80a09c0:	b570      	push	{r4, r5, r6, lr}
 80a09c2:	4604      	mov	r4, r0
 80a09c4:	460d      	mov	r5, r1
 80a09c6:	4616      	mov	r6, r2
	#if defined (RASPBERRY_PI) 
		arducam_i2c_word_read(regID, regDat );
	#else
		Wire.beginTransmission(sensor_addr >> 1);
 80a09c8:	f001 ff2c 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a09cc:	7aa1      	ldrb	r1, [r4, #10]
 80a09ce:	0849      	lsrs	r1, r1, #1
 80a09d0:	f001 fdde 	bl	80a2590 <_ZN7TwoWire17beginTransmissionEi>
	  Wire.write(regID >> 8);
 80a09d4:	f001 ff26 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a09d8:	0a29      	lsrs	r1, r5, #8
 80a09da:	f7ff fe93 	bl	80a0704 <_ZN7TwoWire5writeEi>
	  Wire.write(regID & 0x00FF);
 80a09de:	f001 ff21 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a09e2:	b2e9      	uxtb	r1, r5
 80a09e4:	f7ff fe8e 	bl	80a0704 <_ZN7TwoWire5writeEi>
	  Wire.endTransmission();
 80a09e8:	f001 ff1c 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a09ec:	f001 fdd7 	bl	80a259e <_ZN7TwoWire15endTransmissionEv>
	  Wire.requestFrom((sensor_addr >> 1), 1);
 80a09f0:	f001 ff18 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a09f4:	7aa1      	ldrb	r1, [r4, #10]
 80a09f6:	2201      	movs	r2, #1
 80a09f8:	40d1      	lsrs	r1, r2
 80a09fa:	f001 fdc0 	bl	80a257e <_ZN7TwoWire11requestFromEii>
	  if (Wire.available())
 80a09fe:	f001 ff11 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a0a02:	6803      	ldr	r3, [r0, #0]
 80a0a04:	691b      	ldr	r3, [r3, #16]
 80a0a06:	4798      	blx	r3
 80a0a08:	b128      	cbz	r0, 80a0a16 <_ZN7ArduCAM15rdSensorReg16_8EtPh+0x56>
	  {
	    *regDat = Wire.read();
 80a0a0a:	f001 ff0b 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a0a0e:	6803      	ldr	r3, [r0, #0]
 80a0a10:	695b      	ldr	r3, [r3, #20]
 80a0a12:	4798      	blx	r3
 80a0a14:	7030      	strb	r0, [r6, #0]
	  }
	  delay(1);
 80a0a16:	2001      	movs	r0, #1
 80a0a18:	f001 f83e 	bl	80a1a98 <delay>
	#endif  
	return 1;
}
 80a0a1c:	2001      	movs	r0, #1
 80a0a1e:	bd70      	pop	{r4, r5, r6, pc}

080a0a20 <_ZN7ArduCAM7InitCAMEv>:
	}
	#endif
}

void ArduCAM::InitCAM()
{
 80a0a20:	b513      	push	{r0, r1, r4, lr}
 
  switch (sensor_model)
 80a0a22:	7a43      	ldrb	r3, [r0, #9]
	}
	#endif
}

void ArduCAM::InitCAM()
{
 80a0a24:	4604      	mov	r4, r0
 
  switch (sensor_model)
 80a0a26:	2b03      	cmp	r3, #3
 80a0a28:	d170      	bne.n	80a0b0c <_ZN7ArduCAM7InitCAMEv+0xec>

      }
    case OV5642:
      {
#if ( defined(OV5642_CAM) || defined(OV5642_MINI_5MP) || defined(OV5642_MINI_5MP_BIT_ROTATION_FIXED) || defined(OV5642_MINI_5MP_PLUS) )
        wrSensorReg16_8(0x3008, 0x80);
 80a0a2a:	2280      	movs	r2, #128	; 0x80
 80a0a2c:	f243 0108 	movw	r1, #12296	; 0x3008
 80a0a30:	f7ff ff62 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
        wrSensorRegs16_8(OV5642_QVGA_Preview);
 80a0a34:	4936      	ldr	r1, [pc, #216]	; (80a0b10 <_ZN7ArduCAM7InitCAMEv+0xf0>)
 80a0a36:	4620      	mov	r0, r4
 80a0a38:	f7ff ff83 	bl	80a0942 <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg>
        #if defined (RASPBERRY_PI) 
			  arducam_delay_ms(100);
				#else
        delay(100);
 80a0a3c:	2064      	movs	r0, #100	; 0x64
 80a0a3e:	f001 f82b 	bl	80a1a98 <delay>
        #endif
        if (m_fmt == JPEG)
 80a0a42:	7a23      	ldrb	r3, [r4, #8]
 80a0a44:	2b01      	cmp	r3, #1
 80a0a46:	d123      	bne.n	80a0a90 <_ZN7ArduCAM7InitCAMEv+0x70>
        {
        	#if defined (RASPBERRY_PI) 
				  arducam_delay_ms(100);
					#else
	        delay(100);
 80a0a48:	2064      	movs	r0, #100	; 0x64
 80a0a4a:	f001 f825 	bl	80a1a98 <delay>
	        #endif
          wrSensorRegs16_8(OV5642_JPEG_Capture_QSXGA);
 80a0a4e:	4931      	ldr	r1, [pc, #196]	; (80a0b14 <_ZN7ArduCAM7InitCAMEv+0xf4>)
 80a0a50:	4620      	mov	r0, r4
 80a0a52:	f7ff ff76 	bl	80a0942 <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg>
          wrSensorRegs16_8(ov5642_320x240);
 80a0a56:	4930      	ldr	r1, [pc, #192]	; (80a0b18 <_ZN7ArduCAM7InitCAMEv+0xf8>)
 80a0a58:	4620      	mov	r0, r4
 80a0a5a:	f7ff ff72 	bl	80a0942 <_ZN7ArduCAM16wrSensorRegs16_8EPK10sensor_reg>
          #if defined (RASPBERRY_PI) 
			  arducam_delay_ms(100);
				#else
        delay(100);
 80a0a5e:	2064      	movs	r0, #100	; 0x64
 80a0a60:	f001 f81a 	bl	80a1a98 <delay>
        #endif
          wrSensorReg16_8(0x3818, 0xa8);
 80a0a64:	22a8      	movs	r2, #168	; 0xa8
 80a0a66:	f643 0118 	movw	r1, #14360	; 0x3818
 80a0a6a:	4620      	mov	r0, r4
 80a0a6c:	f7ff ff44 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          wrSensorReg16_8(0x3621, 0x10);
 80a0a70:	2210      	movs	r2, #16
 80a0a72:	f243 6121 	movw	r1, #13857	; 0x3621
 80a0a76:	4620      	mov	r0, r4
 80a0a78:	f7ff ff3e 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          wrSensorReg16_8(0x3801, 0xb0);
 80a0a7c:	22b0      	movs	r2, #176	; 0xb0
 80a0a7e:	f643 0101 	movw	r1, #14337	; 0x3801
 80a0a82:	4620      	mov	r0, r4
 80a0a84:	f7ff ff38 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          #if (defined(OV5642_MINI_5MP_PLUS) || (defined ARDUCAM_SHIELD_V2))
          wrSensorReg16_8(0x4407, 0x04);
 80a0a88:	2204      	movs	r2, #4
 80a0a8a:	f244 4107 	movw	r1, #17415	; 0x4407
 80a0a8e:	e03a      	b.n	80a0b06 <_ZN7ArduCAM7InitCAMEv+0xe6>
          #endif
        }
        else
        {
        	byte reg_val;
          wrSensorReg16_8(0x4740, 0x21);
 80a0a90:	2221      	movs	r2, #33	; 0x21
 80a0a92:	f244 7140 	movw	r1, #18240	; 0x4740
 80a0a96:	4620      	mov	r0, r4
 80a0a98:	f7ff ff2e 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          wrSensorReg16_8(0x501e, 0x2a);
 80a0a9c:	222a      	movs	r2, #42	; 0x2a
 80a0a9e:	f245 011e 	movw	r1, #20510	; 0x501e
 80a0aa2:	4620      	mov	r0, r4
 80a0aa4:	f7ff ff28 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          wrSensorReg16_8(0x5002, 0xf8);
 80a0aa8:	22f8      	movs	r2, #248	; 0xf8
 80a0aaa:	f245 0102 	movw	r1, #20482	; 0x5002
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	f7ff ff22 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          wrSensorReg16_8(0x501f, 0x01);
 80a0ab4:	2201      	movs	r2, #1
 80a0ab6:	f245 011f 	movw	r1, #20511	; 0x501f
 80a0aba:	4620      	mov	r0, r4
 80a0abc:	f7ff ff1c 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          wrSensorReg16_8(0x4300, 0x61);
 80a0ac0:	2261      	movs	r2, #97	; 0x61
 80a0ac2:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 80a0ac6:	4620      	mov	r0, r4
 80a0ac8:	f7ff ff16 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          rdSensorReg16_8(0x3818, &reg_val);
 80a0acc:	f10d 0207 	add.w	r2, sp, #7
 80a0ad0:	f643 0118 	movw	r1, #14360	; 0x3818
 80a0ad4:	4620      	mov	r0, r4
 80a0ad6:	f7ff ff73 	bl	80a09c0 <_ZN7ArduCAM15rdSensorReg16_8EtPh>
          wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff);
 80a0ada:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a0ade:	f643 0118 	movw	r1, #14360	; 0x3818
 80a0ae2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	f7ff ff06 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
          rdSensorReg16_8(0x3621, &reg_val);
 80a0aec:	f10d 0207 	add.w	r2, sp, #7
 80a0af0:	f243 6121 	movw	r1, #13857	; 0x3621
 80a0af4:	4620      	mov	r0, r4
 80a0af6:	f7ff ff63 	bl	80a09c0 <_ZN7ArduCAM15rdSensorReg16_8EtPh>
          wrSensorReg16_8(0x3621, reg_val & 0xdf);
 80a0afa:	f243 6121 	movw	r1, #13857	; 0x3621
 80a0afe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a0b02:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80a0b06:	4620      	mov	r0, r4
 80a0b08:	f7ff fef6 	bl	80a08f8 <_ZN7ArduCAM15wrSensorReg16_8Eii>
      }
    default:

      break;
  }
}
 80a0b0c:	b002      	add	sp, #8
 80a0b0e:	bd10      	pop	{r4, pc}
 80a0b10:	080a2ff0 	.word	0x080a2ff0
 80a0b14:	080a2e68 	.word	0x080a2e68
 80a0b18:	080a3b7a 	.word	0x080a3b7a

080a0b1c <_GLOBAL__sub_I__ZN7ArduCAMC2Ev>:
	    *regDat = (temp << 8) | Wire.read();
	  }
	  delay(1);
	#endif 
  return (1);
}
 80a0b1c:	b508      	push	{r3, lr}
 80a0b1e:	f000 f805 	bl	80a0b2c <HAL_Pin_Map>
 80a0b22:	4b01      	ldr	r3, [pc, #4]	; (80a0b28 <_GLOBAL__sub_I__ZN7ArduCAMC2Ev+0xc>)
 80a0b24:	6018      	str	r0, [r3, #0]
 80a0b26:	bd08      	pop	{r3, pc}
 80a0b28:	200007a0 	.word	0x200007a0

080a0b2c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0b2c:	b508      	push	{r3, lr}
 80a0b2e:	4b02      	ldr	r3, [pc, #8]	; (80a0b38 <HAL_Pin_Map+0xc>)
 80a0b30:	681b      	ldr	r3, [r3, #0]
 80a0b32:	681b      	ldr	r3, [r3, #0]
 80a0b34:	9301      	str	r3, [sp, #4]
 80a0b36:	bd08      	pop	{r3, pc}
 80a0b38:	080601b0 	.word	0x080601b0

080a0b3c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0b3c:	b508      	push	{r3, lr}
 80a0b3e:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <HAL_Pin_Mode+0xc>)
 80a0b40:	681b      	ldr	r3, [r3, #0]
 80a0b42:	689b      	ldr	r3, [r3, #8]
 80a0b44:	9301      	str	r3, [sp, #4]
 80a0b46:	bd08      	pop	{r3, pc}
 80a0b48:	080601b0 	.word	0x080601b0

080a0b4c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <HAL_SPI_Begin+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	681b      	ldr	r3, [r3, #0]
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601b4 	.word	0x080601b4

080a0b5c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b02      	ldr	r3, [pc, #8]	; (80a0b68 <HAL_SPI_Send_Receive_Data+0xc>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	695b      	ldr	r3, [r3, #20]
 80a0b64:	9301      	str	r3, [sp, #4]
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	080601b4 	.word	0x080601b4

080a0b6c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <HAL_SPI_Init+0xc>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	69db      	ldr	r3, [r3, #28]
 80a0b74:	9301      	str	r3, [sp, #4]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	080601b4 	.word	0x080601b4

080a0b7c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0b7c:	b508      	push	{r3, lr}
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <HAL_SPI_Is_Enabled+0xc>)
 80a0b80:	681b      	ldr	r3, [r3, #0]
 80a0b82:	6a1b      	ldr	r3, [r3, #32]
 80a0b84:	9301      	str	r3, [sp, #4]
 80a0b86:	bd08      	pop	{r3, pc}
 80a0b88:	080601b4 	.word	0x080601b4

080a0b8c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <HAL_SPI_Info+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	080601b4 	.word	0x080601b4

080a0b9c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <HAL_SPI_Set_Settings+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	080601b4 	.word	0x080601b4

080a0bac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <HAL_RNG_GetRandomNumber+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	685b      	ldr	r3, [r3, #4]
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	0806019c 	.word	0x0806019c

080a0bbc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	695b      	ldr	r3, [r3, #20]
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	0806019c 	.word	0x0806019c

080a0bcc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <os_mutex_create+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601d0 	.word	0x080601d0

080a0bdc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <os_mutex_lock+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601d0 	.word	0x080601d0

080a0bec <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <os_mutex_unlock+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601d0 	.word	0x080601d0

080a0bfc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <HAL_USART_Init+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	699b      	ldr	r3, [r3, #24]
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601c4 	.word	0x080601c4

080a0c0c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <HAL_USART_Write_Data+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601c4 	.word	0x080601c4

080a0c1c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <HAL_USART_Available_Data+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601c4 	.word	0x080601c4

080a0c2c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <HAL_USART_Read_Data+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601c4 	.word	0x080601c4

080a0c3c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <HAL_USART_Peek_Data+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601c4 	.word	0x080601c4

080a0c4c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <HAL_USART_Flush_Data+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601c4 	.word	0x080601c4

080a0c5c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <HAL_USART_Is_Enabled+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601c4 	.word	0x080601c4

080a0c6c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601c4 	.word	0x080601c4

080a0c7c <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <HAL_I2C_Set_Speed+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601ac 	.word	0x080601ac

080a0c8c <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <HAL_I2C_Begin+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601ac 	.word	0x080601ac

080a0c9c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ca8 <HAL_I2C_Request_Data+0xc>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ca4:	9301      	str	r3, [sp, #4]
 80a0ca6:	bd08      	pop	{r3, pc}
 80a0ca8:	080601ac 	.word	0x080601ac

080a0cac <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <HAL_I2C_Begin_Transmission+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	080601ac 	.word	0x080601ac

080a0cbc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <HAL_I2C_End_Transmission+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601ac 	.word	0x080601ac

080a0ccc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <HAL_I2C_Write_Data+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601ac 	.word	0x080601ac

080a0cdc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <HAL_I2C_Available_Data+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601ac 	.word	0x080601ac

080a0cec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <HAL_I2C_Read_Data+0xc>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0cf4:	9301      	str	r3, [sp, #4]
 80a0cf6:	bd08      	pop	{r3, pc}
 80a0cf8:	080601ac 	.word	0x080601ac

080a0cfc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0cfc:	b508      	push	{r3, lr}
 80a0cfe:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <HAL_I2C_Peek_Data+0xc>)
 80a0d00:	681b      	ldr	r3, [r3, #0]
 80a0d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0d04:	9301      	str	r3, [sp, #4]
 80a0d06:	bd08      	pop	{r3, pc}
 80a0d08:	080601ac 	.word	0x080601ac

080a0d0c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0d0c:	b508      	push	{r3, lr}
 80a0d0e:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <HAL_I2C_Flush_Data+0xc>)
 80a0d10:	681b      	ldr	r3, [r3, #0]
 80a0d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	bd08      	pop	{r3, pc}
 80a0d18:	080601ac 	.word	0x080601ac

080a0d1c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <HAL_I2C_Is_Enabled+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	080601ac 	.word	0x080601ac

080a0d2c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b03      	ldr	r3, [pc, #12]	; (80a0d3c <HAL_I2C_Init+0x10>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0d36:	9301      	str	r3, [sp, #4]
 80a0d38:	bd08      	pop	{r3, pc}
 80a0d3a:	0000      	.short	0x0000
 80a0d3c:	080601ac 	.word	0x080601ac

080a0d40 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0d40:	b508      	push	{r3, lr}
 80a0d42:	4b02      	ldr	r3, [pc, #8]	; (80a0d4c <socket_active_status+0xc>)
 80a0d44:	681b      	ldr	r3, [r3, #0]
 80a0d46:	681b      	ldr	r3, [r3, #0]
 80a0d48:	9301      	str	r3, [sp, #4]
 80a0d4a:	bd08      	pop	{r3, pc}
 80a0d4c:	080601bc 	.word	0x080601bc

080a0d50 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0d50:	b508      	push	{r3, lr}
 80a0d52:	4b02      	ldr	r3, [pc, #8]	; (80a0d5c <socket_handle_valid+0xc>)
 80a0d54:	681b      	ldr	r3, [r3, #0]
 80a0d56:	685b      	ldr	r3, [r3, #4]
 80a0d58:	9301      	str	r3, [sp, #4]
 80a0d5a:	bd08      	pop	{r3, pc}
 80a0d5c:	080601bc 	.word	0x080601bc

080a0d60 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0d60:	b508      	push	{r3, lr}
 80a0d62:	4b02      	ldr	r3, [pc, #8]	; (80a0d6c <socket_create+0xc>)
 80a0d64:	681b      	ldr	r3, [r3, #0]
 80a0d66:	689b      	ldr	r3, [r3, #8]
 80a0d68:	9301      	str	r3, [sp, #4]
 80a0d6a:	bd08      	pop	{r3, pc}
 80a0d6c:	080601bc 	.word	0x080601bc

080a0d70 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0d70:	b508      	push	{r3, lr}
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <socket_connect+0xc>)
 80a0d74:	681b      	ldr	r3, [r3, #0]
 80a0d76:	68db      	ldr	r3, [r3, #12]
 80a0d78:	9301      	str	r3, [sp, #4]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	080601bc 	.word	0x080601bc

080a0d80 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <socket_receive+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	691b      	ldr	r3, [r3, #16]
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601bc 	.word	0x080601bc

080a0d90 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <socket_close+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	6a1b      	ldr	r3, [r3, #32]
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601bc 	.word	0x080601bc

080a0da0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <socket_handle_invalid+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601bc 	.word	0x080601bc

080a0db0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <socket_send_ex+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601bc 	.word	0x080601bc

080a0dc0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <HAL_USB_USART_Init+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	681b      	ldr	r3, [r3, #0]
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	080601d8 	.word	0x080601d8

080a0dd0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <HAL_USB_USART_Begin+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	685b      	ldr	r3, [r3, #4]
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601d8 	.word	0x080601d8

080a0de0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <HAL_USB_USART_Available_Data+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	691b      	ldr	r3, [r3, #16]
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601d8 	.word	0x080601d8

080a0df0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	695b      	ldr	r3, [r3, #20]
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601d8 	.word	0x080601d8

080a0e00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <HAL_USB_USART_Receive_Data+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	699b      	ldr	r3, [r3, #24]
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601d8 	.word	0x080601d8

080a0e10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <HAL_USB_USART_Send_Data+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	69db      	ldr	r3, [r3, #28]
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601d8 	.word	0x080601d8

080a0e20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <HAL_USB_USART_Flush_Data+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	6a1b      	ldr	r3, [r3, #32]
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601d8 	.word	0x080601d8

080a0e30 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <HAL_NET_SetNetWatchDog+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601c0 	.word	0x080601c0

080a0e40 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <inet_gethostbyname+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601c0 	.word	0x080601c0

080a0e50 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <log_message+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080201a8 	.word	0x080201a8

080a0e60 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <set_system_mode+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	685b      	ldr	r3, [r3, #4]
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601a4 	.word	0x080601a4

080a0e70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <system_delay_ms+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	695b      	ldr	r3, [r3, #20]
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601a4 	.word	0x080601a4

080a0e80 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <system_thread_set_state+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080601a4 	.word	0x080601a4

080a0e90 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <application_thread_current+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601a4 	.word	0x080601a4

080a0ea0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <application_thread_invoke+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601a4 	.word	0x080601a4

080a0eb0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b03      	ldr	r3, [pc, #12]	; (80a0ec0 <system_ctrl_set_app_request_handler+0x10>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0eba:	9301      	str	r3, [sp, #4]
 80a0ebc:	bd08      	pop	{r3, pc}
 80a0ebe:	0000      	.short	0x0000
 80a0ec0:	080601a4 	.word	0x080601a4

080a0ec4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ec4:	b508      	push	{r3, lr}
 80a0ec6:	4b03      	ldr	r3, [pc, #12]	; (80a0ed4 <system_ctrl_set_result+0x10>)
 80a0ec8:	681b      	ldr	r3, [r3, #0]
 80a0eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0ece:	9301      	str	r3, [sp, #4]
 80a0ed0:	bd08      	pop	{r3, pc}
 80a0ed2:	0000      	.short	0x0000
 80a0ed4:	080601a4 	.word	0x080601a4

080a0ed8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ed8:	b508      	push	{r3, lr}
 80a0eda:	4b02      	ldr	r3, [pc, #8]	; (80a0ee4 <network_connect+0xc>)
 80a0edc:	681b      	ldr	r3, [r3, #0]
 80a0ede:	685b      	ldr	r3, [r3, #4]
 80a0ee0:	9301      	str	r3, [sp, #4]
 80a0ee2:	bd08      	pop	{r3, pc}
 80a0ee4:	080601c8 	.word	0x080601c8

080a0ee8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0ee8:	b508      	push	{r3, lr}
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <network_connecting+0xc>)
 80a0eec:	681b      	ldr	r3, [r3, #0]
 80a0eee:	689b      	ldr	r3, [r3, #8]
 80a0ef0:	9301      	str	r3, [sp, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	080601c8 	.word	0x080601c8

080a0ef8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0ef8:	b508      	push	{r3, lr}
 80a0efa:	4b02      	ldr	r3, [pc, #8]	; (80a0f04 <network_disconnect+0xc>)
 80a0efc:	681b      	ldr	r3, [r3, #0]
 80a0efe:	68db      	ldr	r3, [r3, #12]
 80a0f00:	9301      	str	r3, [sp, #4]
 80a0f02:	bd08      	pop	{r3, pc}
 80a0f04:	080601c8 	.word	0x080601c8

080a0f08 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0f08:	b508      	push	{r3, lr}
 80a0f0a:	4b02      	ldr	r3, [pc, #8]	; (80a0f14 <network_ready+0xc>)
 80a0f0c:	681b      	ldr	r3, [r3, #0]
 80a0f0e:	691b      	ldr	r3, [r3, #16]
 80a0f10:	9301      	str	r3, [sp, #4]
 80a0f12:	bd08      	pop	{r3, pc}
 80a0f14:	080601c8 	.word	0x080601c8

080a0f18 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f18:	b508      	push	{r3, lr}
 80a0f1a:	4b02      	ldr	r3, [pc, #8]	; (80a0f24 <network_on+0xc>)
 80a0f1c:	681b      	ldr	r3, [r3, #0]
 80a0f1e:	695b      	ldr	r3, [r3, #20]
 80a0f20:	9301      	str	r3, [sp, #4]
 80a0f22:	bd08      	pop	{r3, pc}
 80a0f24:	080601c8 	.word	0x080601c8

080a0f28 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f28:	b508      	push	{r3, lr}
 80a0f2a:	4b02      	ldr	r3, [pc, #8]	; (80a0f34 <network_off+0xc>)
 80a0f2c:	681b      	ldr	r3, [r3, #0]
 80a0f2e:	699b      	ldr	r3, [r3, #24]
 80a0f30:	9301      	str	r3, [sp, #4]
 80a0f32:	bd08      	pop	{r3, pc}
 80a0f34:	080601c8 	.word	0x080601c8

080a0f38 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0f38:	b508      	push	{r3, lr}
 80a0f3a:	4b02      	ldr	r3, [pc, #8]	; (80a0f44 <network_listen+0xc>)
 80a0f3c:	681b      	ldr	r3, [r3, #0]
 80a0f3e:	69db      	ldr	r3, [r3, #28]
 80a0f40:	9301      	str	r3, [sp, #4]
 80a0f42:	bd08      	pop	{r3, pc}
 80a0f44:	080601c8 	.word	0x080601c8

080a0f48 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0f48:	b508      	push	{r3, lr}
 80a0f4a:	4b02      	ldr	r3, [pc, #8]	; (80a0f54 <network_listening+0xc>)
 80a0f4c:	681b      	ldr	r3, [r3, #0]
 80a0f4e:	6a1b      	ldr	r3, [r3, #32]
 80a0f50:	9301      	str	r3, [sp, #4]
 80a0f52:	bd08      	pop	{r3, pc}
 80a0f54:	080601c8 	.word	0x080601c8

080a0f58 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0f58:	b508      	push	{r3, lr}
 80a0f5a:	4b02      	ldr	r3, [pc, #8]	; (80a0f64 <network_set_listen_timeout+0xc>)
 80a0f5c:	681b      	ldr	r3, [r3, #0]
 80a0f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f60:	9301      	str	r3, [sp, #4]
 80a0f62:	bd08      	pop	{r3, pc}
 80a0f64:	080601c8 	.word	0x080601c8

080a0f68 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0f68:	b508      	push	{r3, lr}
 80a0f6a:	4b02      	ldr	r3, [pc, #8]	; (80a0f74 <network_get_listen_timeout+0xc>)
 80a0f6c:	681b      	ldr	r3, [r3, #0]
 80a0f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0f70:	9301      	str	r3, [sp, #4]
 80a0f72:	bd08      	pop	{r3, pc}
 80a0f74:	080601c8 	.word	0x080601c8

080a0f78 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0f78:	b508      	push	{r3, lr}
 80a0f7a:	4b02      	ldr	r3, [pc, #8]	; (80a0f84 <spark_process+0xc>)
 80a0f7c:	681b      	ldr	r3, [r3, #0]
 80a0f7e:	689b      	ldr	r3, [r3, #8]
 80a0f80:	9301      	str	r3, [sp, #4]
 80a0f82:	bd08      	pop	{r3, pc}
 80a0f84:	080601cc 	.word	0x080601cc

080a0f88 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0f88:	b508      	push	{r3, lr}
 80a0f8a:	4b02      	ldr	r3, [pc, #8]	; (80a0f94 <spark_send_event+0xc>)
 80a0f8c:	681b      	ldr	r3, [r3, #0]
 80a0f8e:	6a1b      	ldr	r3, [r3, #32]
 80a0f90:	9301      	str	r3, [sp, #4]
 80a0f92:	bd08      	pop	{r3, pc}
 80a0f94:	080601cc 	.word	0x080601cc

080a0f98 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a0f98:	b508      	push	{r3, lr}
 80a0f9a:	4b02      	ldr	r3, [pc, #8]	; (80a0fa4 <spark_subscribe+0xc>)
 80a0f9c:	681b      	ldr	r3, [r3, #0]
 80a0f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0fa0:	9301      	str	r3, [sp, #4]
 80a0fa2:	bd08      	pop	{r3, pc}
 80a0fa4:	080601cc 	.word	0x080601cc

080a0fa8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0fa8:	b508      	push	{r3, lr}
 80a0faa:	4b02      	ldr	r3, [pc, #8]	; (80a0fb4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0fac:	681b      	ldr	r3, [r3, #0]
 80a0fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0fb0:	9301      	str	r3, [sp, #4]
 80a0fb2:	bd08      	pop	{r3, pc}
 80a0fb4:	080601cc 	.word	0x080601cc

080a0fb8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0fb8:	b508      	push	{r3, lr}
 80a0fba:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <malloc+0xc>)
 80a0fbc:	681b      	ldr	r3, [r3, #0]
 80a0fbe:	681b      	ldr	r3, [r3, #0]
 80a0fc0:	9301      	str	r3, [sp, #4]
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	080601a0 	.word	0x080601a0

080a0fc8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0fc8:	b508      	push	{r3, lr}
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <free+0xc>)
 80a0fcc:	681b      	ldr	r3, [r3, #0]
 80a0fce:	685b      	ldr	r3, [r3, #4]
 80a0fd0:	9301      	str	r3, [sp, #4]
 80a0fd2:	bd08      	pop	{r3, pc}
 80a0fd4:	080601a0 	.word	0x080601a0

080a0fd8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0fd8:	b508      	push	{r3, lr}
 80a0fda:	4b02      	ldr	r3, [pc, #8]	; (80a0fe4 <realloc+0xc>)
 80a0fdc:	681b      	ldr	r3, [r3, #0]
 80a0fde:	689b      	ldr	r3, [r3, #8]
 80a0fe0:	9301      	str	r3, [sp, #4]
 80a0fe2:	bd08      	pop	{r3, pc}
 80a0fe4:	080601a0 	.word	0x080601a0

080a0fe8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0fe8:	b508      	push	{r3, lr}
 80a0fea:	4b02      	ldr	r3, [pc, #8]	; (80a0ff4 <vsnprintf+0xc>)
 80a0fec:	681b      	ldr	r3, [r3, #0]
 80a0fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ff0:	9301      	str	r3, [sp, #4]
 80a0ff2:	bd08      	pop	{r3, pc}
 80a0ff4:	080601a0 	.word	0x080601a0

080a0ff8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0ff8:	b508      	push	{r3, lr}
 80a0ffa:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <abort+0xc>)
 80a0ffc:	681b      	ldr	r3, [r3, #0]
 80a0ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1000:	9301      	str	r3, [sp, #4]
 80a1002:	bd08      	pop	{r3, pc}
 80a1004:	080601a0 	.word	0x080601a0

080a1008 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1008:	b508      	push	{r3, lr}
 80a100a:	4b02      	ldr	r3, [pc, #8]	; (80a1014 <_malloc_r+0xc>)
 80a100c:	681b      	ldr	r3, [r3, #0]
 80a100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1010:	9301      	str	r3, [sp, #4]
 80a1012:	bd08      	pop	{r3, pc}
 80a1014:	080601a0 	.word	0x080601a0

080a1018 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1018:	4770      	bx	lr

080a101a <_ZN8SPIClassD0Ev>:
 80a101a:	b510      	push	{r4, lr}
 80a101c:	4604      	mov	r4, r0
 80a101e:	2110      	movs	r1, #16
 80a1020:	f001 fc25 	bl	80a286e <_ZdlPvj>
 80a1024:	4620      	mov	r0, r4
 80a1026:	bd10      	pop	{r4, pc}

080a1028 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1028:	b570      	push	{r4, r5, r6, lr}
 80a102a:	4604      	mov	r4, r0
 80a102c:	460e      	mov	r6, r1
 80a102e:	4b07      	ldr	r3, [pc, #28]	; (80a104c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1030:	2500      	movs	r5, #0
 80a1032:	6003      	str	r3, [r0, #0]
 80a1034:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1038:	f7ff fdc8 	bl	80a0bcc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a103c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a103e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1040:	f7ff fd94 	bl	80a0b6c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1044:	60a5      	str	r5, [r4, #8]
}
 80a1046:	4620      	mov	r0, r4
 80a1048:	bd70      	pop	{r4, r5, r6, pc}
 80a104a:	bf00      	nop
 80a104c:	080a3bf0 	.word	0x080a3bf0

080a1050 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1054:	7900      	ldrb	r0, [r0, #4]
 80a1056:	f7ff bd79 	b.w	80a0b4c <HAL_SPI_Begin>

080a105a <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80a105a:	68c0      	ldr	r0, [r0, #12]
 80a105c:	f7ff bdc6 	b.w	80a0bec <os_mutex_unlock>

080a1060 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1060:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a1062:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1064:	6018      	str	r0, [r3, #0]
 80a1066:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1068:	6818      	ldr	r0, [r3, #0]
 80a106a:	b2e5      	uxtb	r5, r4
 80a106c:	4288      	cmp	r0, r1
 80a106e:	d906      	bls.n	80a107e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1070:	3401      	adds	r4, #1
 80a1072:	2c08      	cmp	r4, #8
 80a1074:	d002      	beq.n	80a107c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a1076:	0840      	lsrs	r0, r0, #1
 80a1078:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a107a:	e7f5      	b.n	80a1068 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a107c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a107e:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1080:	5d5b      	ldrb	r3, [r3, r5]
 80a1082:	7013      	strb	r3, [r2, #0]
 80a1084:	bd30      	pop	{r4, r5, pc}
 80a1086:	bf00      	nop
 80a1088:	080a3bf8 	.word	0x080a3bf8

080a108c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a108c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1090:	4680      	mov	r8, r0
 80a1092:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 80a1094:	68c0      	ldr	r0, [r0, #12]
 80a1096:	460f      	mov	r7, r1
 80a1098:	f7ff fda0 	bl	80a0bdc <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 80a109c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a10a0:	2214      	movs	r2, #20
 80a10a2:	2100      	movs	r1, #0
 80a10a4:	a809      	add	r0, sp, #36	; 0x24
 80a10a6:	f001 fd48 	bl	80a2b3a <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a10aa:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	2200      	movs	r2, #0
 80a10b0:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a10b2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 80a10b6:	f7ff fd69 	bl	80a0b8c <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 80a10ba:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a10be:	b14c      	cbz	r4, 80a10d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a10c0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a10c4:	b92d      	cbnz	r5, 80a10d2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a10c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a10c8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a10cc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a10d0:	e003      	b.n	80a10da <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a10d2:	2400      	movs	r4, #0
 80a10d4:	46a1      	mov	r9, r4
 80a10d6:	4626      	mov	r6, r4
 80a10d8:	2501      	movs	r5, #1
 80a10da:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a10dc:	b10d      	cbz	r5, 80a10e2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a10de:	2b00      	cmp	r3, #0
 80a10e0:	d140      	bne.n	80a1164 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 80a10e2:	429d      	cmp	r5, r3
 80a10e4:	d10b      	bne.n	80a10fe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a10e6:	68ba      	ldr	r2, [r7, #8]
 80a10e8:	42b2      	cmp	r2, r6
 80a10ea:	d108      	bne.n	80a10fe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a10ec:	f88d 9020 	strb.w	r9, [sp, #32]
 80a10f0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a10f4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a10f8:	89ba      	ldrh	r2, [r7, #12]
 80a10fa:	4291      	cmp	r1, r2
 80a10fc:	d032      	beq.n	80a1164 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 80a10fe:	bb23      	cbnz	r3, 80a114a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 80a1100:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 80a1104:	f10d 020f 	add.w	r2, sp, #15
 80a1108:	ab04      	add	r3, sp, #16
 80a110a:	68b9      	ldr	r1, [r7, #8]
 80a110c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a110e:	f7ff ffa7 	bl	80a1060 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a1112:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1114:	b105      	cbz	r5, 80a1118 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 80a1116:	bb13      	cbnz	r3, 80a115e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 80a1118:	42ab      	cmp	r3, r5
 80a111a:	d009      	beq.n	80a1130 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 80a111c:	2100      	movs	r1, #0
 80a111e:	7b3b      	ldrb	r3, [r7, #12]
 80a1120:	9101      	str	r1, [sp, #4]
 80a1122:	7b7c      	ldrb	r4, [r7, #13]
 80a1124:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a1128:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a112c:	9400      	str	r4, [sp, #0]
 80a112e:	e013      	b.n	80a1158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 80a1130:	68bb      	ldr	r3, [r7, #8]
 80a1132:	42b3      	cmp	r3, r6
 80a1134:	d3f2      	bcc.n	80a111c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1136:	f88d 9020 	strb.w	r9, [sp, #32]
 80a113a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a113e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1142:	89bb      	ldrh	r3, [r7, #12]
 80a1144:	429a      	cmp	r2, r3
 80a1146:	d1e9      	bne.n	80a111c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 80a1148:	e009      	b.n	80a115e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 80a114a:	2300      	movs	r3, #0
 80a114c:	461a      	mov	r2, r3
 80a114e:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a1152:	9301      	str	r3, [sp, #4]
 80a1154:	9300      	str	r3, [sp, #0]
 80a1156:	2101      	movs	r1, #1
 80a1158:	f7ff fd20 	bl	80a0b9c <HAL_SPI_Set_Settings>
 80a115c:	e002      	b.n	80a1164 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 80a115e:	9b04      	ldr	r3, [sp, #16]
 80a1160:	42b3      	cmp	r3, r6
 80a1162:	d1db      	bne.n	80a111c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 80a1164:	2000      	movs	r0, #0
 80a1166:	b00f      	add	sp, #60	; 0x3c
 80a1168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a116c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a116c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a116e:	7900      	ldrb	r0, [r0, #4]
 80a1170:	f7ff fcf4 	bl	80a0b5c <HAL_SPI_Send_Receive_Data>
}
 80a1174:	b2c0      	uxtb	r0, r0
 80a1176:	bd08      	pop	{r3, pc}

080a1178 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1178:	7900      	ldrb	r0, [r0, #4]
 80a117a:	f7ff bcff 	b.w	80a0b7c <HAL_SPI_Is_Enabled>
	...

080a1180 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1184:	4b03      	ldr	r3, [pc, #12]	; (80a1194 <_GLOBAL__sub_I_System+0x14>)
 80a1186:	2000      	movs	r0, #0
 80a1188:	7018      	strb	r0, [r3, #0]
 80a118a:	8058      	strh	r0, [r3, #2]
 80a118c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a118e:	f7ff be67 	b.w	80a0e60 <set_system_mode>
 80a1192:	bf00      	nop
 80a1194:	200007a4 	.word	0x200007a4

080a1198 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1198:	b510      	push	{r4, lr}
 80a119a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a119c:	f001 fd21 	bl	80a2be2 <strlen>
 80a11a0:	3801      	subs	r0, #1
 80a11a2:	1823      	adds	r3, r4, r0
 80a11a4:	4620      	mov	r0, r4
	while(i<j){
 80a11a6:	4298      	cmp	r0, r3
 80a11a8:	d206      	bcs.n	80a11b8 <_Z11str_reversePc+0x20>
		c = *i;
 80a11aa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a11ac:	7819      	ldrb	r1, [r3, #0]
 80a11ae:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a11b2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a11b6:	e7f6      	b.n	80a11a6 <_Z11str_reversePc+0xe>
 80a11b8:	bd10      	pop	{r4, pc}

080a11ba <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a11ba:	b570      	push	{r4, r5, r6, lr}
 80a11bc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a11be:	1e91      	subs	r1, r2, #2
 80a11c0:	2922      	cmp	r1, #34	; 0x22
 80a11c2:	d820      	bhi.n	80a1206 <ultoa+0x4c>
 80a11c4:	4625      	mov	r5, r4
 80a11c6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a11c8:	b910      	cbnz	r0, 80a11d0 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a11ca:	4423      	add	r3, r4
            *ptr++ = '0';
 80a11cc:	2230      	movs	r2, #48	; 0x30
 80a11ce:	e00e      	b.n	80a11ee <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a11d0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a11d4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a11d8:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a11da:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a11dc:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a11e0:	bf94      	ite	ls
 80a11e2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a11e4:	3157      	addhi	r1, #87	; 0x57
 80a11e6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a11ea:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a11ec:	e7eb      	b.n	80a11c6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a11ee:	4299      	cmp	r1, r3
 80a11f0:	d202      	bcs.n	80a11f8 <ultoa+0x3e>
            *ptr++ = '0';
 80a11f2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a11f6:	e7fa      	b.n	80a11ee <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a11f8:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a11fa:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a11fc:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a11fe:	f7ff ffcb 	bl	80a1198 <_Z11str_reversePc>
	return buffer;
 80a1202:	4620      	mov	r0, r4
 80a1204:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a1206:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a1208:	bd70      	pop	{r4, r5, r6, pc}

080a120a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a120a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a120c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a120e:	460c      	mov	r4, r1
 80a1210:	4615      	mov	r5, r2
	if(a<0){
 80a1212:	da0b      	bge.n	80a122c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1218:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a121c:	bf14      	ite	ne
 80a121e:	4258      	negne	r0, r3
 80a1220:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a1222:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1224:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a1226:	462a      	mov	r2, r5
 80a1228:	4419      	add	r1, r3
 80a122a:	e000      	b.n	80a122e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a122c:	2301      	movs	r3, #1
 80a122e:	f7ff ffc4 	bl	80a11ba <ultoa>
	}
	return buffer;
}
 80a1232:	4620      	mov	r0, r4
 80a1234:	bd38      	pop	{r3, r4, r5, pc}

080a1236 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a1236:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a1238:	2301      	movs	r3, #1
 80a123a:	f7ff ffbe 	bl	80a11ba <ultoa>
}
 80a123e:	bd08      	pop	{r3, pc}

080a1240 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1242:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1244:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1246:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a124a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a124c:	2201      	movs	r2, #1
 80a124e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1252:	4621      	mov	r1, r4
 80a1254:	47a8      	blx	r5
}
 80a1256:	b003      	add	sp, #12
 80a1258:	bd30      	pop	{r4, r5, pc}

080a125a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a125a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a125c:	6803      	ldr	r3, [r0, #0]
 80a125e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1260:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1264:	46a4      	mov	ip, r4
}
 80a1266:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1268:	4760      	bx	ip

080a126a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a126a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a126c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a126e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1270:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1274:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1276:	4621      	mov	r1, r4
 80a1278:	4613      	mov	r3, r2
 80a127a:	2201      	movs	r2, #1
 80a127c:	47a8      	blx	r5
}
 80a127e:	b003      	add	sp, #12
 80a1280:	bd30      	pop	{r4, r5, pc}

080a1282 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1282:	4770      	bx	lr

080a1284 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1284:	4770      	bx	lr

080a1286 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1286:	2000      	movs	r0, #0
 80a1288:	4770      	bx	lr

080a128a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a128a:	b510      	push	{r4, lr}
 80a128c:	4604      	mov	r4, r0
 80a128e:	2114      	movs	r1, #20
 80a1290:	f001 faed 	bl	80a286e <_ZdlPvj>
 80a1294:	4620      	mov	r0, r4
 80a1296:	bd10      	pop	{r4, pc}

080a1298 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1298:	f7fe bf01 	b.w	80a009e <_ZdlPv>

080a129c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a129c:	b510      	push	{r4, lr}
 80a129e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a12a0:	6803      	ldr	r3, [r0, #0]
 80a12a2:	689b      	ldr	r3, [r3, #8]
 80a12a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a12a6:	68a3      	ldr	r3, [r4, #8]
 80a12a8:	3b01      	subs	r3, #1
 80a12aa:	60a3      	str	r3, [r4, #8]
 80a12ac:	b92b      	cbnz	r3, 80a12ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a12ae:	6823      	ldr	r3, [r4, #0]
 80a12b0:	4620      	mov	r0, r4
        }
    }
 80a12b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a12b6:	68db      	ldr	r3, [r3, #12]
 80a12b8:	4718      	bx	r3
 80a12ba:	bd10      	pop	{r4, pc}

080a12bc <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a12bc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a12be:	4604      	mov	r4, r0
 80a12c0:	4606      	mov	r6, r0
 80a12c2:	694d      	ldr	r5, [r1, #20]
 80a12c4:	4b04      	ldr	r3, [pc, #16]	; (80a12d8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a12c6:	358c      	adds	r5, #140	; 0x8c
 80a12c8:	f844 3b04 	str.w	r3, [r4], #4
 80a12cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a12ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a12d0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a12d2:	4630      	mov	r0, r6
 80a12d4:	7023      	strb	r3, [r4, #0]
 80a12d6:	bd70      	pop	{r4, r5, r6, pc}
 80a12d8:	080a3db4 	.word	0x080a3db4

080a12dc <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a12dc:	b510      	push	{r4, lr}
 80a12de:	6943      	ldr	r3, [r0, #20]
 80a12e0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a12e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a12e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a12ea:	429a      	cmp	r2, r3
 80a12ec:	d005      	beq.n	80a12fa <_ZN9TCPClient4peekEv+0x1e>
 80a12ee:	6962      	ldr	r2, [r4, #20]
 80a12f0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a12f4:	4413      	add	r3, r2
 80a12f6:	7918      	ldrb	r0, [r3, #4]
 80a12f8:	bd10      	pop	{r4, pc}
 80a12fa:	6803      	ldr	r3, [r0, #0]
 80a12fc:	691b      	ldr	r3, [r3, #16]
 80a12fe:	4798      	blx	r3
 80a1300:	2800      	cmp	r0, #0
 80a1302:	d1f4      	bne.n	80a12ee <_ZN9TCPClient4peekEv+0x12>
 80a1304:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1308:	bd10      	pop	{r4, pc}

080a130a <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a130a:	b510      	push	{r4, lr}
 80a130c:	6943      	ldr	r3, [r0, #20]
 80a130e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1310:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1314:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1318:	429a      	cmp	r2, r3
 80a131a:	d008      	beq.n	80a132e <_ZN9TCPClient4readEv+0x24>
 80a131c:	6962      	ldr	r2, [r4, #20]
 80a131e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1322:	1c59      	adds	r1, r3, #1
 80a1324:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1328:	4413      	add	r3, r2
 80a132a:	7918      	ldrb	r0, [r3, #4]
 80a132c:	bd10      	pop	{r4, pc}
 80a132e:	6803      	ldr	r3, [r0, #0]
 80a1330:	691b      	ldr	r3, [r3, #16]
 80a1332:	4798      	blx	r3
 80a1334:	2800      	cmp	r0, #0
 80a1336:	d1f1      	bne.n	80a131c <_ZN9TCPClient4readEv+0x12>
 80a1338:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a133c:	bd10      	pop	{r4, pc}

080a133e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a133e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1340:	6943      	ldr	r3, [r0, #20]
 80a1342:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1344:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1348:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a134c:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a134e:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1350:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1352:	d106      	bne.n	80a1362 <_ZN9TCPClient4readEPhj+0x24>
 80a1354:	6803      	ldr	r3, [r0, #0]
 80a1356:	691b      	ldr	r3, [r3, #16]
 80a1358:	4798      	blx	r3
 80a135a:	b910      	cbnz	r0, 80a1362 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a135c:	f04f 34ff 	mov.w	r4, #4294967295
 80a1360:	e014      	b.n	80a138c <_ZN9TCPClient4readEPhj+0x4e>
 80a1362:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1364:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1366:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a136a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a136e:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1370:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1372:	42bc      	cmp	r4, r7
 80a1374:	bf28      	it	cs
 80a1376:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1378:	3104      	adds	r1, #4
 80a137a:	4622      	mov	r2, r4
 80a137c:	f001 fbd2 	bl	80a2b24 <memcpy>
 80a1380:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1382:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1386:	4423      	add	r3, r4
 80a1388:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a138c:	4620      	mov	r0, r4
 80a138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1390 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1390:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1392:	2300      	movs	r3, #0
 80a1394:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1398:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a139a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a139e:	4770      	bx	lr

080a13a0 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a13a0:	b538      	push	{r3, r4, r5, lr}
 80a13a2:	6942      	ldr	r2, [r0, #20]
 80a13a4:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a13a6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a13aa:	b11b      	cbz	r3, 80a13b4 <_ZN9TCPClient9availableEv+0x14>
 80a13ac:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a13b0:	429a      	cmp	r2, r3
 80a13b2:	d00c      	beq.n	80a13ce <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a13b4:	6920      	ldr	r0, [r4, #16]
 80a13b6:	f001 f9af 	bl	80a2718 <_ZN5spark12NetworkClass4fromEm>
 80a13ba:	6803      	ldr	r3, [r0, #0]
 80a13bc:	68db      	ldr	r3, [r3, #12]
 80a13be:	4798      	blx	r3
 80a13c0:	b318      	cbz	r0, 80a140a <_ZN9TCPClient9availableEv+0x6a>
 80a13c2:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a13c4:	6818      	ldr	r0, [r3, #0]
 80a13c6:	f7ff fcc3 	bl	80a0d50 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a13ca:	b918      	cbnz	r0, 80a13d4 <_ZN9TCPClient9availableEv+0x34>
 80a13cc:	e01d      	b.n	80a140a <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a13ce:	f7ff ffdf 	bl	80a1390 <_ZN9TCPClient12flush_bufferEv>
 80a13d2:	e7ef      	b.n	80a13b4 <_ZN9TCPClient9availableEv+0x14>
 80a13d4:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a13d6:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a13da:	297f      	cmp	r1, #127	; 0x7f
 80a13dc:	d815      	bhi.n	80a140a <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a13de:	1d05      	adds	r5, r0, #4
 80a13e0:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a13e4:	2300      	movs	r3, #0
 80a13e6:	4429      	add	r1, r5
 80a13e8:	6800      	ldr	r0, [r0, #0]
 80a13ea:	f7ff fcc9 	bl	80a0d80 <socket_receive>
            if (ret > 0)
 80a13ee:	2800      	cmp	r0, #0
 80a13f0:	dd0b      	ble.n	80a140a <_ZN9TCPClient9availableEv+0x6a>
 80a13f2:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a13f4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a13f8:	b90a      	cbnz	r2, 80a13fe <_ZN9TCPClient9availableEv+0x5e>
 80a13fa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a13fe:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1400:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1404:	4418      	add	r0, r3
 80a1406:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a140a:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a140c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1410:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1414:	1a18      	subs	r0, r3, r0
}
 80a1416:	bd38      	pop	{r3, r4, r5, pc}

080a1418 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1418:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a141a:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a141c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a141e:	6818      	ldr	r0, [r3, #0]
 80a1420:	f7ff fc96 	bl	80a0d50 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1424:	b118      	cbz	r0, 80a142e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1426:	6963      	ldr	r3, [r4, #20]
 80a1428:	6818      	ldr	r0, [r3, #0]
 80a142a:	f7ff fcb1 	bl	80a0d90 <socket_close>
 80a142e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1430:	f7ff fcb6 	bl	80a0da0 <socket_handle_invalid>
 80a1434:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1436:	6960      	ldr	r0, [r4, #20]
 80a1438:	2211      	movs	r2, #17
 80a143a:	2100      	movs	r1, #0
 80a143c:	308c      	adds	r0, #140	; 0x8c
 80a143e:	f001 fb7c 	bl	80a2b3a <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1442:	4620      	mov	r0, r4
}
 80a1444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1448:	f7ff bfa2 	b.w	80a1390 <_ZN9TCPClient12flush_bufferEv>

080a144c <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1450:	461f      	mov	r7, r3
    stop();
 80a1452:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1454:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1458:	4606      	mov	r6, r0
 80a145a:	460c      	mov	r4, r1
 80a145c:	4615      	mov	r5, r2
    stop();
 80a145e:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1460:	4638      	mov	r0, r7
 80a1462:	f001 f959 	bl	80a2718 <_ZN5spark12NetworkClass4fromEm>
 80a1466:	6803      	ldr	r3, [r0, #0]
 80a1468:	68db      	ldr	r3, [r3, #12]
 80a146a:	4798      	blx	r3
 80a146c:	2800      	cmp	r0, #0
 80a146e:	d056      	beq.n	80a151e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1470:	9700      	str	r7, [sp, #0]
 80a1472:	462b      	mov	r3, r5
 80a1474:	2206      	movs	r2, #6
 80a1476:	2101      	movs	r1, #1
 80a1478:	2002      	movs	r0, #2
 80a147a:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a147e:	f7ff fc6f 	bl	80a0d60 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1482:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1484:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1488:	2700      	movs	r7, #0
 80a148a:	9302      	str	r3, [sp, #8]
 80a148c:	6973      	ldr	r3, [r6, #20]
 80a148e:	9703      	str	r7, [sp, #12]
 80a1490:	681b      	ldr	r3, [r3, #0]
 80a1492:	2001      	movs	r0, #1
 80a1494:	9301      	str	r3, [sp, #4]
 80a1496:	4b23      	ldr	r3, [pc, #140]	; (80a1524 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1498:	aa02      	add	r2, sp, #8
 80a149a:	9300      	str	r3, [sp, #0]
 80a149c:	4922      	ldr	r1, [pc, #136]	; (80a1528 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a149e:	463b      	mov	r3, r7
 80a14a0:	f7ff fcd6 	bl	80a0e50 <log_message>

          if (socket_handle_valid(d_->sock))
 80a14a4:	6973      	ldr	r3, [r6, #20]
 80a14a6:	6818      	ldr	r0, [r3, #0]
 80a14a8:	f7ff fc52 	bl	80a0d50 <socket_handle_valid>
 80a14ac:	2800      	cmp	r0, #0
 80a14ae:	d036      	beq.n	80a151e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a14b0:	4630      	mov	r0, r6
 80a14b2:	f7ff ff6d 	bl	80a1390 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a14b6:	2302      	movs	r3, #2
 80a14b8:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a14bc:	0a2b      	lsrs	r3, r5, #8
 80a14be:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a14c2:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a14c4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a14c8:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a14cc:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a14ce:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a14d2:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a14d6:	7963      	ldrb	r3, [r4, #5]
 80a14d8:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a14dc:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a14e0:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a14e4:	f7ff fca4 	bl	80a0e30 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a14e8:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a14ea:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a14ec:	2210      	movs	r2, #16
 80a14ee:	a902      	add	r1, sp, #8
 80a14f0:	6818      	ldr	r0, [r3, #0]
 80a14f2:	f7ff fc3d 	bl	80a0d70 <socket_connect>
 80a14f6:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a14f8:	4628      	mov	r0, r5
 80a14fa:	f7ff fc99 	bl	80a0e30 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a14fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1500:	6975      	ldr	r5, [r6, #20]
 80a1502:	358c      	adds	r5, #140	; 0x8c
 80a1504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1506:	6823      	ldr	r3, [r4, #0]
 80a1508:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a150a:	f1b8 0f00 	cmp.w	r8, #0
 80a150e:	d005      	beq.n	80a151c <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a1510:	6833      	ldr	r3, [r6, #0]
 80a1512:	4630      	mov	r0, r6
 80a1514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1516:	4798      	blx	r3
 80a1518:	4638      	mov	r0, r7
 80a151a:	e000      	b.n	80a151e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a151c:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a151e:	b00a      	add	sp, #40	; 0x28
 80a1520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1524:	080a3c6f 	.word	0x080a3c6f
 80a1528:	080a3c68 	.word	0x080a3c68

080a152c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a152c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a152e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1530:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1532:	6818      	ldr	r0, [r3, #0]
 80a1534:	f7ff fc0c 	bl	80a0d50 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1538:	b908      	cbnz	r0, 80a153e <_ZN9TCPClient6statusEv+0x12>
 80a153a:	2000      	movs	r0, #0
 80a153c:	bd10      	pop	{r4, pc}
 80a153e:	6920      	ldr	r0, [r4, #16]
 80a1540:	f001 f8ea 	bl	80a2718 <_ZN5spark12NetworkClass4fromEm>
 80a1544:	6803      	ldr	r3, [r0, #0]
 80a1546:	68db      	ldr	r3, [r3, #12]
 80a1548:	4798      	blx	r3
 80a154a:	2800      	cmp	r0, #0
 80a154c:	d0f5      	beq.n	80a153a <_ZN9TCPClient6statusEv+0xe>
 80a154e:	6963      	ldr	r3, [r4, #20]
 80a1550:	6818      	ldr	r0, [r3, #0]
 80a1552:	f7ff fbf5 	bl	80a0d40 <socket_active_status>
 80a1556:	fab0 f080 	clz	r0, r0
 80a155a:	0940      	lsrs	r0, r0, #5
}
 80a155c:	bd10      	pop	{r4, pc}

080a155e <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a155e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1562:	2500      	movs	r5, #0
 80a1564:	6045      	str	r5, [r0, #4]
 80a1566:	4604      	mov	r4, r0
 80a1568:	460e      	mov	r6, r1
 80a156a:	4617      	mov	r7, r2
 80a156c:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a156e:	f7ff ffdd 	bl	80a152c <_ZN9TCPClient6statusEv>
 80a1572:	b160      	cbz	r0, 80a158e <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1574:	6960      	ldr	r0, [r4, #20]
 80a1576:	9501      	str	r5, [sp, #4]
 80a1578:	f8cd 8000 	str.w	r8, [sp]
 80a157c:	462b      	mov	r3, r5
 80a157e:	463a      	mov	r2, r7
 80a1580:	4631      	mov	r1, r6
 80a1582:	6800      	ldr	r0, [r0, #0]
 80a1584:	f7ff fc14 	bl	80a0db0 <socket_send_ex>
    if (ret < 0) {
 80a1588:	2800      	cmp	r0, #0
 80a158a:	da03      	bge.n	80a1594 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a158c:	e001      	b.n	80a1592 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a158e:	f04f 30ff 	mov.w	r0, #4294967295
 80a1592:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1594:	b002      	add	sp, #8
 80a1596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a159a <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a159a:	b538      	push	{r3, r4, r5, lr}
 80a159c:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a159e:	f7ff ffc5 	bl	80a152c <_ZN9TCPClient6statusEv>
 80a15a2:	bb00      	cbnz	r0, 80a15e6 <_ZN9TCPClient9connectedEv+0x4c>
 80a15a4:	6963      	ldr	r3, [r4, #20]
 80a15a6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a15aa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a15ae:	4291      	cmp	r1, r2
 80a15b0:	d119      	bne.n	80a15e6 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a15b2:	6818      	ldr	r0, [r3, #0]
 80a15b4:	f7ff fbcc 	bl	80a0d50 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a15b8:	b128      	cbz	r0, 80a15c6 <_ZN9TCPClient9connectedEv+0x2c>
 80a15ba:	6963      	ldr	r3, [r4, #20]
 80a15bc:	6818      	ldr	r0, [r3, #0]
 80a15be:	f7ff fbbf 	bl	80a0d40 <socket_active_status>
 80a15c2:	2801      	cmp	r0, #1
 80a15c4:	d001      	beq.n	80a15ca <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a15c6:	2500      	movs	r5, #0
 80a15c8:	e00e      	b.n	80a15e8 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a15ca:	6823      	ldr	r3, [r4, #0]
 80a15cc:	4620      	mov	r0, r4
 80a15ce:	691b      	ldr	r3, [r3, #16]
 80a15d0:	4798      	blx	r3
 80a15d2:	2800      	cmp	r0, #0
 80a15d4:	bf14      	ite	ne
 80a15d6:	2501      	movne	r5, #1
 80a15d8:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a15da:	d105      	bne.n	80a15e8 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a15dc:	6823      	ldr	r3, [r4, #0]
 80a15de:	4620      	mov	r0, r4
 80a15e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a15e2:	4798      	blx	r3
 80a15e4:	e000      	b.n	80a15e8 <_ZN9TCPClient9connectedEv+0x4e>
 80a15e6:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a15e8:	4628      	mov	r0, r5
 80a15ea:	bd38      	pop	{r3, r4, r5, pc}

080a15ec <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a15ec:	b508      	push	{r3, lr}
   return (status()!=0);
 80a15ee:	f7ff ff9d 	bl	80a152c <_ZN9TCPClient6statusEv>
}
 80a15f2:	3000      	adds	r0, #0
 80a15f4:	bf18      	it	ne
 80a15f6:	2001      	movne	r0, #1
 80a15f8:	bd08      	pop	{r3, pc}

080a15fa <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a15fa:	b510      	push	{r4, lr}
 80a15fc:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a15fe:	2300      	movs	r3, #0
 80a1600:	6001      	str	r1, [r0, #0]
 80a1602:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a1606:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a160a:	3088      	adds	r0, #136	; 0x88
 80a160c:	f000 fdbe 	bl	80a218c <_ZN9IPAddressC1Ev>
}
 80a1610:	4620      	mov	r0, r4
 80a1612:	bd10      	pop	{r4, pc}

080a1614 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1618:	b570      	push	{r4, r5, r6, lr}
 80a161a:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a161c:	4a14      	ldr	r2, [pc, #80]	; (80a1670 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a161e:	2300      	movs	r3, #0
 80a1620:	6043      	str	r3, [r0, #4]
 80a1622:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1624:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1626:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1628:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a162a:	20a0      	movs	r0, #160	; 0xa0
 80a162c:	460e      	mov	r6, r1
 80a162e:	f7fe fd34 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1632:	4605      	mov	r5, r0
 80a1634:	b110      	cbz	r0, 80a163c <_ZN9TCPClientC1Em+0x28>
 80a1636:	4631      	mov	r1, r6
 80a1638:	f7ff ffdf 	bl	80a15fa <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a163c:	2014      	movs	r0, #20
 80a163e:	f7fe fd2c 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1642:	4603      	mov	r3, r0
 80a1644:	b128      	cbz	r0, 80a1652 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1646:	2201      	movs	r2, #1
 80a1648:	6042      	str	r2, [r0, #4]
 80a164a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a164c:	4a09      	ldr	r2, [pc, #36]	; (80a1674 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a164e:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1650:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1652:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1654:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1656:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1658:	b128      	cbz	r0, 80a1666 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a165a:	6843      	ldr	r3, [r0, #4]
 80a165c:	3b01      	subs	r3, #1
 80a165e:	6043      	str	r3, [r0, #4]
 80a1660:	b90b      	cbnz	r3, 80a1666 <_ZN9TCPClientC1Em+0x52>
 80a1662:	f7ff fe1b 	bl	80a129c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1666:	4620      	mov	r0, r4
 80a1668:	f7ff fe92 	bl	80a1390 <_ZN9TCPClient12flush_bufferEv>
}
 80a166c:	4620      	mov	r0, r4
 80a166e:	bd70      	pop	{r4, r5, r6, pc}
 80a1670:	080a3c24 	.word	0x080a3c24
 80a1674:	080a3c08 	.word	0x080a3c08

080a1678 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1678:	b510      	push	{r4, lr}
 80a167a:	4604      	mov	r4, r0
 80a167c:	f7ff fb90 	bl	80a0da0 <socket_handle_invalid>
 80a1680:	4601      	mov	r1, r0
 80a1682:	4620      	mov	r0, r4
 80a1684:	f7ff ffc6 	bl	80a1614 <_ZN9TCPClientC1Em>
{
}
 80a1688:	4620      	mov	r0, r4
 80a168a:	bd10      	pop	{r4, pc}

080a168c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a168c:	b510      	push	{r4, lr}
 80a168e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1690:	6800      	ldr	r0, [r0, #0]
 80a1692:	f7ff fb5d 	bl	80a0d50 <socket_handle_valid>
 80a1696:	b110      	cbz	r0, 80a169e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1698:	6820      	ldr	r0, [r4, #0]
 80a169a:	f7ff fb79 	bl	80a0d90 <socket_close>
    }
}
 80a169e:	4620      	mov	r0, r4
 80a16a0:	bd10      	pop	{r4, pc}

080a16a2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a16a2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a16a4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a16a6:	4620      	mov	r0, r4
 80a16a8:	f7ff fff0 	bl	80a168c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a16ac:	b124      	cbz	r4, 80a16b8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a16b4:	f7fe bcf3 	b.w	80a009e <_ZdlPv>
 80a16b8:	bd10      	pop	{r4, pc}
	...

080a16bc <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a16bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a16c0:	461f      	mov	r7, r3
    stop();
 80a16c2:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a16c4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a16c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a16c8:	4606      	mov	r6, r0
 80a16ca:	460c      	mov	r4, r1
 80a16cc:	4690      	mov	r8, r2
    stop();
 80a16ce:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a16d0:	4812      	ldr	r0, [pc, #72]	; (80a171c <_ZN9TCPClient7connectEPKctm+0x60>)
 80a16d2:	f000 ffd4 	bl	80a267e <_ZN5spark12NetworkClass5readyEv>
 80a16d6:	b1f0      	cbz	r0, 80a1716 <_ZN9TCPClient7connectEPKctm+0x5a>
      {
        IPAddress ip_addr;
 80a16d8:	a802      	add	r0, sp, #8
 80a16da:	f000 fd57 	bl	80a218c <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a16de:	4620      	mov	r0, r4
 80a16e0:	f001 fa7f 	bl	80a2be2 <strlen>
 80a16e4:	2300      	movs	r3, #0
 80a16e6:	9300      	str	r3, [sp, #0]
 80a16e8:	b281      	uxth	r1, r0
 80a16ea:	463b      	mov	r3, r7
 80a16ec:	aa03      	add	r2, sp, #12
 80a16ee:	4620      	mov	r0, r4
 80a16f0:	f7ff fba6 	bl	80a0e40 <inet_gethostbyname>
 80a16f4:	b978      	cbnz	r0, 80a1716 <_ZN9TCPClient7connectEPKctm+0x5a>
        {
                return connect(ip_addr, port, nif);
 80a16f6:	6833      	ldr	r3, [r6, #0]
 80a16f8:	ad09      	add	r5, sp, #36	; 0x24
 80a16fa:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a16fe:	4b08      	ldr	r3, [pc, #32]	; (80a1720 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1700:	ac03      	add	r4, sp, #12
 80a1702:	9308      	str	r3, [sp, #32]
 80a1704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1708:	6823      	ldr	r3, [r4, #0]
 80a170a:	4642      	mov	r2, r8
 80a170c:	702b      	strb	r3, [r5, #0]
 80a170e:	a908      	add	r1, sp, #32
 80a1710:	463b      	mov	r3, r7
 80a1712:	4630      	mov	r0, r6
 80a1714:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a1716:	b00f      	add	sp, #60	; 0x3c
 80a1718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a171c:	20000824 	.word	0x20000824
 80a1720:	080a3db4 	.word	0x080a3db4

080a1724 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1724:	b510      	push	{r4, lr}
 80a1726:	4604      	mov	r4, r0
{
	free(buffer);
 80a1728:	6800      	ldr	r0, [r0, #0]
 80a172a:	f7ff fc4d 	bl	80a0fc8 <free>
}
 80a172e:	4620      	mov	r0, r4
 80a1730:	bd10      	pop	{r4, pc}

080a1732 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1732:	b510      	push	{r4, lr}
 80a1734:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1736:	6800      	ldr	r0, [r0, #0]
 80a1738:	b108      	cbz	r0, 80a173e <_ZN6String10invalidateEv+0xc>
 80a173a:	f7ff fc45 	bl	80a0fc8 <free>
	buffer = NULL;
 80a173e:	2300      	movs	r3, #0
 80a1740:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1742:	60a3      	str	r3, [r4, #8]
 80a1744:	6063      	str	r3, [r4, #4]
 80a1746:	bd10      	pop	{r4, pc}

080a1748 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1748:	b538      	push	{r3, r4, r5, lr}
 80a174a:	4604      	mov	r4, r0
 80a174c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a174e:	6800      	ldr	r0, [r0, #0]
 80a1750:	3101      	adds	r1, #1
 80a1752:	f7ff fc41 	bl	80a0fd8 <realloc>
	if (newbuffer) {
 80a1756:	b110      	cbz	r0, 80a175e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1758:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a175c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a175e:	bd38      	pop	{r3, r4, r5, pc}

080a1760 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1760:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1762:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1764:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1766:	b113      	cbz	r3, 80a176e <_ZN6String7reserveEj+0xe>
 80a1768:	6843      	ldr	r3, [r0, #4]
 80a176a:	428b      	cmp	r3, r1
 80a176c:	d207      	bcs.n	80a177e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a176e:	4620      	mov	r0, r4
 80a1770:	f7ff ffea 	bl	80a1748 <_ZN6String12changeBufferEj>
 80a1774:	b120      	cbz	r0, 80a1780 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1776:	68a3      	ldr	r3, [r4, #8]
 80a1778:	b90b      	cbnz	r3, 80a177e <_ZN6String7reserveEj+0x1e>
 80a177a:	6822      	ldr	r2, [r4, #0]
 80a177c:	7013      	strb	r3, [r2, #0]
 80a177e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1780:	bd10      	pop	{r4, pc}

080a1782 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1782:	b570      	push	{r4, r5, r6, lr}
 80a1784:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1786:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1788:	4604      	mov	r4, r0
 80a178a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a178c:	f7ff ffe8 	bl	80a1760 <_ZN6String7reserveEj>
 80a1790:	b918      	cbnz	r0, 80a179a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1792:	4620      	mov	r0, r4
 80a1794:	f7ff ffcd 	bl	80a1732 <_ZN6String10invalidateEv>
		return *this;
 80a1798:	e009      	b.n	80a17ae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a179a:	462a      	mov	r2, r5
 80a179c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a179e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a17a0:	6820      	ldr	r0, [r4, #0]
 80a17a2:	f001 f9bf 	bl	80a2b24 <memcpy>
	buffer[len] = 0;
 80a17a6:	6822      	ldr	r2, [r4, #0]
 80a17a8:	68a3      	ldr	r3, [r4, #8]
 80a17aa:	2100      	movs	r1, #0
 80a17ac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a17ae:	4620      	mov	r0, r4
 80a17b0:	bd70      	pop	{r4, r5, r6, pc}

080a17b2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a17b2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a17b4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a17b6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a17b8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a17ba:	6043      	str	r3, [r0, #4]
	len = 0;
 80a17bc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a17be:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a17c0:	460d      	mov	r5, r1
 80a17c2:	b139      	cbz	r1, 80a17d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a17c4:	4608      	mov	r0, r1
 80a17c6:	f001 fa0c 	bl	80a2be2 <strlen>
 80a17ca:	4629      	mov	r1, r5
 80a17cc:	4602      	mov	r2, r0
 80a17ce:	4620      	mov	r0, r4
 80a17d0:	f7ff ffd7 	bl	80a1782 <_ZN6String4copyEPKcj>
}
 80a17d4:	4620      	mov	r0, r4
 80a17d6:	bd38      	pop	{r3, r4, r5, pc}

080a17d8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a17d8:	b538      	push	{r3, r4, r5, lr}
 80a17da:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a17dc:	460c      	mov	r4, r1
 80a17de:	b141      	cbz	r1, 80a17f2 <_ZN6StringaSEPKc+0x1a>
 80a17e0:	4608      	mov	r0, r1
 80a17e2:	f001 f9fe 	bl	80a2be2 <strlen>
 80a17e6:	4621      	mov	r1, r4
 80a17e8:	4602      	mov	r2, r0
 80a17ea:	4628      	mov	r0, r5
 80a17ec:	f7ff ffc9 	bl	80a1782 <_ZN6String4copyEPKcj>
 80a17f0:	e001      	b.n	80a17f6 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a17f2:	f7ff ff9e 	bl	80a1732 <_ZN6String10invalidateEv>

	return *this;
}
 80a17f6:	4628      	mov	r0, r5
 80a17f8:	bd38      	pop	{r3, r4, r5, pc}

080a17fa <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a17fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a17fc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a17fe:	2300      	movs	r3, #0
 80a1800:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1802:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1804:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1806:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a1808:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
 80a180a:	a901      	add	r1, sp, #4
 80a180c:	f7ff fd13 	bl	80a1236 <utoa>
	*this = buf;
 80a1810:	a901      	add	r1, sp, #4
 80a1812:	4620      	mov	r0, r4
 80a1814:	f7ff ffe0 	bl	80a17d8 <_ZN6StringaSEPKc>
}
 80a1818:	4620      	mov	r0, r4
 80a181a:	b004      	add	sp, #16
 80a181c:	bd10      	pop	{r4, pc}

080a181e <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
 80a181e:	b510      	push	{r4, lr}
 80a1820:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1822:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1824:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1826:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1828:	6063      	str	r3, [r4, #4]
	len = 0;
 80a182a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a182c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a182e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a1830:	a901      	add	r1, sp, #4
 80a1832:	f7ff fcea 	bl	80a120a <itoa>
	*this = buf;
 80a1836:	a901      	add	r1, sp, #4
 80a1838:	4620      	mov	r0, r4
 80a183a:	f7ff ffcd 	bl	80a17d8 <_ZN6StringaSEPKc>
}
 80a183e:	4620      	mov	r0, r4
 80a1840:	b00a      	add	sp, #40	; 0x28
 80a1842:	bd10      	pop	{r4, pc}

080a1844 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a1844:	b510      	push	{r4, lr}
 80a1846:	4604      	mov	r4, r0
 80a1848:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a184a:	2300      	movs	r3, #0
 80a184c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a184e:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1850:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1852:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a1854:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
 80a1856:	2301      	movs	r3, #1
 80a1858:	a901      	add	r1, sp, #4
 80a185a:	f7ff fcae 	bl	80a11ba <ultoa>
	*this = buf;
 80a185e:	a901      	add	r1, sp, #4
 80a1860:	4620      	mov	r0, r4
 80a1862:	f7ff ffb9 	bl	80a17d8 <_ZN6StringaSEPKc>
}
 80a1866:	4620      	mov	r0, r4
 80a1868:	b00a      	add	sp, #40	; 0x28
 80a186a:	bd10      	pop	{r4, pc}

080a186c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a186c:	b570      	push	{r4, r5, r6, lr}
 80a186e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1870:	460e      	mov	r6, r1
 80a1872:	b909      	cbnz	r1, 80a1878 <_ZN6String6concatEPKcj+0xc>
 80a1874:	2000      	movs	r0, #0
 80a1876:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1878:	b16a      	cbz	r2, 80a1896 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a187a:	6883      	ldr	r3, [r0, #8]
 80a187c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a187e:	4629      	mov	r1, r5
 80a1880:	f7ff ff6e 	bl	80a1760 <_ZN6String7reserveEj>
 80a1884:	2800      	cmp	r0, #0
 80a1886:	d0f5      	beq.n	80a1874 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1888:	6820      	ldr	r0, [r4, #0]
 80a188a:	68a3      	ldr	r3, [r4, #8]
 80a188c:	4631      	mov	r1, r6
 80a188e:	4418      	add	r0, r3
 80a1890:	f001 f984 	bl	80a2b9c <strcpy>
	len = newlen;
 80a1894:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1896:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1898:	bd70      	pop	{r4, r5, r6, pc}

080a189a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a189a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a189c:	688a      	ldr	r2, [r1, #8]
 80a189e:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a18a0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a18a2:	f7ff ffe3 	bl	80a186c <_ZN6String6concatEPKcj>
 80a18a6:	b910      	cbnz	r0, 80a18ae <_ZplRK15StringSumHelperRK6String+0x14>
 80a18a8:	4620      	mov	r0, r4
 80a18aa:	f7ff ff42 	bl	80a1732 <_ZN6String10invalidateEv>
	return a;
}
 80a18ae:	4620      	mov	r0, r4
 80a18b0:	bd10      	pop	{r4, pc}
	...

080a18b4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a18b4:	b40e      	push	{r1, r2, r3}
 80a18b6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a18b8:	ac09      	add	r4, sp, #36	; 0x24
 80a18ba:	f854 7b04 	ldr.w	r7, [r4], #4
 80a18be:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a18c0:	4623      	mov	r3, r4
 80a18c2:	463a      	mov	r2, r7
 80a18c4:	2105      	movs	r1, #5
 80a18c6:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a18c8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a18ca:	f7ff fb8d 	bl	80a0fe8 <vsnprintf>
 80a18ce:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a18d0:	490b      	ldr	r1, [pc, #44]	; (80a1900 <_ZN6String6formatEPKcz+0x4c>)
 80a18d2:	4628      	mov	r0, r5
 80a18d4:	f7ff ff6d 	bl	80a17b2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a18d8:	4631      	mov	r1, r6
 80a18da:	4628      	mov	r0, r5
 80a18dc:	f7ff ff40 	bl	80a1760 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a18e0:	6828      	ldr	r0, [r5, #0]
 80a18e2:	b130      	cbz	r0, 80a18f2 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a18e4:	4623      	mov	r3, r4
 80a18e6:	463a      	mov	r2, r7
 80a18e8:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a18ea:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a18ec:	f7ff fb7c 	bl	80a0fe8 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a18f0:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a18f2:	4628      	mov	r0, r5
 80a18f4:	b004      	add	sp, #16
 80a18f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a18fa:	b003      	add	sp, #12
 80a18fc:	4770      	bx	lr
 80a18fe:	bf00      	nop
 80a1900:	080a3c99 	.word	0x080a3c99

080a1904 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1906:	4606      	mov	r6, r0
 80a1908:	460d      	mov	r5, r1
 80a190a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a190c:	2400      	movs	r4, #0
  while (size--) {
 80a190e:	42bd      	cmp	r5, r7
 80a1910:	d00c      	beq.n	80a192c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1912:	6833      	ldr	r3, [r6, #0]
 80a1914:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1918:	689b      	ldr	r3, [r3, #8]
 80a191a:	4630      	mov	r0, r6
 80a191c:	4798      	blx	r3
     if (chunk>=0)
 80a191e:	2800      	cmp	r0, #0
 80a1920:	db01      	blt.n	80a1926 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1922:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1924:	e7f3      	b.n	80a190e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1926:	2c00      	cmp	r4, #0
 80a1928:	bf08      	it	eq
 80a192a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a192c:	4620      	mov	r0, r4
 80a192e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1930 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1930:	b570      	push	{r4, r5, r6, lr}
 80a1932:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1934:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1936:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1938:	b149      	cbz	r1, 80a194e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a193a:	f001 f952 	bl	80a2be2 <strlen>
 80a193e:	682b      	ldr	r3, [r5, #0]
 80a1940:	4602      	mov	r2, r0
 80a1942:	4621      	mov	r1, r4
 80a1944:	4628      	mov	r0, r5
    }
 80a1946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a194a:	68db      	ldr	r3, [r3, #12]
 80a194c:	4718      	bx	r3
    }
 80a194e:	bd70      	pop	{r4, r5, r6, pc}

080a1950 <_ZN5Print5printEPKc>:
 80a1950:	b508      	push	{r3, lr}
 80a1952:	f7ff ffed 	bl	80a1930 <_ZN5Print5writeEPKc>
 80a1956:	bd08      	pop	{r3, pc}

080a1958 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1958:	6803      	ldr	r3, [r0, #0]
 80a195a:	689b      	ldr	r3, [r3, #8]
 80a195c:	4718      	bx	r3

080a195e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a195e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1960:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1962:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1964:	f7ff fff8 	bl	80a1958 <_ZN5Print5printEc>
  n += print('\n');
 80a1968:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a196a:	4604      	mov	r4, r0
  n += print('\n');
 80a196c:	4628      	mov	r0, r5
 80a196e:	f7ff fff3 	bl	80a1958 <_ZN5Print5printEc>
  return n;
}
 80a1972:	4420      	add	r0, r4
 80a1974:	bd38      	pop	{r3, r4, r5, pc}

080a1976 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1976:	b538      	push	{r3, r4, r5, lr}
 80a1978:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a197a:	f7ff ffd9 	bl	80a1930 <_ZN5Print5writeEPKc>
 80a197e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1980:	4628      	mov	r0, r5
 80a1982:	f7ff ffec 	bl	80a195e <_ZN5Print7printlnEv>
  return n;
}
 80a1986:	4420      	add	r0, r4
 80a1988:	bd38      	pop	{r3, r4, r5, pc}

080a198a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a198a:	f7ff bff4 	b.w	80a1976 <_ZN5Print7printlnEPKc>

080a198e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a198e:	2a01      	cmp	r2, #1
 80a1990:	bf98      	it	ls
 80a1992:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1994:	b530      	push	{r4, r5, lr}
 80a1996:	460b      	mov	r3, r1
 80a1998:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a199a:	2100      	movs	r1, #0
 80a199c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a19a0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a19a4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a19a8:	fb05 3312 	mls	r3, r5, r2, r3
 80a19ac:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a19ae:	2b09      	cmp	r3, #9
 80a19b0:	bf94      	ite	ls
 80a19b2:	3330      	addls	r3, #48	; 0x30
 80a19b4:	3337      	addhi	r3, #55	; 0x37
 80a19b6:	b2db      	uxtb	r3, r3
 80a19b8:	4621      	mov	r1, r4
 80a19ba:	f804 3901 	strb.w	r3, [r4], #-1
 80a19be:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a19c0:	2d00      	cmp	r5, #0
 80a19c2:	d1ef      	bne.n	80a19a4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a19c4:	f7ff ffb4 	bl	80a1930 <_ZN5Print5writeEPKc>
}
 80a19c8:	b00b      	add	sp, #44	; 0x2c
 80a19ca:	bd30      	pop	{r4, r5, pc}

080a19cc <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a19cc:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a19ce:	b922      	cbnz	r2, 80a19da <_ZN5Print5printEmi+0xe>
 80a19d0:	6803      	ldr	r3, [r0, #0]
 80a19d2:	b2c9      	uxtb	r1, r1
 80a19d4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a19d6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a19d8:	4718      	bx	r3
  else return printNumber(n, base);
 80a19da:	b2d2      	uxtb	r2, r2
}
 80a19dc:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a19de:	f7ff bfd6 	b.w	80a198e <_ZN5Print11printNumberEmh>

080a19e2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a19e2:	f7ff bff3 	b.w	80a19cc <_ZN5Print5printEmi>

080a19e6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a19e6:	b40c      	push	{r2, r3}
 80a19e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a19ec:	b087      	sub	sp, #28
 80a19ee:	af00      	add	r7, sp, #0
 80a19f0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a19f4:	f854 9b04 	ldr.w	r9, [r4], #4
 80a19f8:	4605      	mov	r5, r0
 80a19fa:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a19fc:	4623      	mov	r3, r4
 80a19fe:	464a      	mov	r2, r9
 80a1a00:	2114      	movs	r1, #20
 80a1a02:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1a04:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1a06:	f7ff faef 	bl	80a0fe8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1a0a:	2813      	cmp	r0, #19
 80a1a0c:	d805      	bhi.n	80a1a1a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1a0e:	1d39      	adds	r1, r7, #4
 80a1a10:	4628      	mov	r0, r5
 80a1a12:	f7ff ff8d 	bl	80a1930 <_ZN5Print5writeEPKc>
 80a1a16:	4604      	mov	r4, r0
 80a1a18:	e013      	b.n	80a1a42 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1a1a:	f100 0308 	add.w	r3, r0, #8
 80a1a1e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1a22:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1a24:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1a28:	1c41      	adds	r1, r0, #1
 80a1a2a:	4623      	mov	r3, r4
 80a1a2c:	464a      	mov	r2, r9
 80a1a2e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1a30:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1a32:	f7ff fad9 	bl	80a0fe8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1a36:	4669      	mov	r1, sp
 80a1a38:	4628      	mov	r0, r5
 80a1a3a:	f7ff ff79 	bl	80a1930 <_ZN5Print5writeEPKc>
 80a1a3e:	4604      	mov	r4, r0
 80a1a40:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1a42:	b11e      	cbz	r6, 80a1a4c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1a44:	4628      	mov	r0, r5
 80a1a46:	f7ff ff8a 	bl	80a195e <_ZN5Print7printlnEv>
 80a1a4a:	4404      	add	r4, r0
    return n;
}
 80a1a4c:	4620      	mov	r0, r4
 80a1a4e:	371c      	adds	r7, #28
 80a1a50:	46bd      	mov	sp, r7
 80a1a52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1a56:	b002      	add	sp, #8
 80a1a58:	4770      	bx	lr

080a1a5a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1a5a:	2300      	movs	r3, #0
 80a1a5c:	461a      	mov	r2, r3
 80a1a5e:	4619      	mov	r1, r3
 80a1a60:	6840      	ldr	r0, [r0, #4]
 80a1a62:	f7ff ba59 	b.w	80a0f18 <network_on>

080a1a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1a66:	680b      	ldr	r3, [r1, #0]
 80a1a68:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1a6a:	b113      	cbz	r3, 80a1a72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1a6c:	685a      	ldr	r2, [r3, #4]
 80a1a6e:	3201      	adds	r2, #1
 80a1a70:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1a72:	4770      	bx	lr

080a1a74 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1a74:	4a01      	ldr	r2, [pc, #4]	; (80a1a7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1a76:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1a78:	601a      	str	r2, [r3, #0]
 80a1a7a:	4770      	bx	lr
 80a1a7c:	080a3d3b 	.word	0x080a3d3b
 80a1a80:	200007ac 	.word	0x200007ac

080a1a84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1a84:	4b02      	ldr	r3, [pc, #8]	; (80a1a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1a86:	681a      	ldr	r2, [r3, #0]
 80a1a88:	4b02      	ldr	r3, [pc, #8]	; (80a1a94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1a8a:	601a      	str	r2, [r3, #0]
 80a1a8c:	4770      	bx	lr
 80a1a8e:	bf00      	nop
 80a1a90:	20000300 	.word	0x20000300
 80a1a94:	200007b0 	.word	0x200007b0

080a1a98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1a98:	2100      	movs	r1, #0
 80a1a9a:	f7ff b9e9 	b.w	80a0e70 <system_delay_ms>

080a1a9e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1a9e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1aa0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1aa2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1aa4:	b113      	cbz	r3, 80a1aac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1aa6:	2203      	movs	r2, #3
 80a1aa8:	4601      	mov	r1, r0
 80a1aaa:	4798      	blx	r3
    }
 80a1aac:	4620      	mov	r0, r4
 80a1aae:	bd10      	pop	{r4, pc}

080a1ab0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1ab0:	b510      	push	{r4, lr}
 80a1ab2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ab4:	f7ff fff3 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>
 80a1ab8:	4620      	mov	r0, r4
 80a1aba:	bd10      	pop	{r4, pc}

080a1abc <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1abc:	b513      	push	{r0, r1, r4, lr}
 80a1abe:	460b      	mov	r3, r1
 80a1ac0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ac2:	c803      	ldmia	r0, {r0, r1}
 80a1ac4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1ac8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1acc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ad0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1ad4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1ad8:	b002      	add	sp, #8
 80a1ada:	bd10      	pop	{r4, pc}

080a1adc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1adc:	4803      	ldr	r0, [pc, #12]	; (80a1aec <_GLOBAL__sub_I_RGB+0x10>)
 80a1ade:	2300      	movs	r3, #0
 80a1ae0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1ae2:	4a03      	ldr	r2, [pc, #12]	; (80a1af0 <_GLOBAL__sub_I_RGB+0x14>)
 80a1ae4:	4903      	ldr	r1, [pc, #12]	; (80a1af4 <_GLOBAL__sub_I_RGB+0x18>)
 80a1ae6:	f000 bebd 	b.w	80a2864 <__aeabi_atexit>
 80a1aea:	bf00      	nop
 80a1aec:	200007b4 	.word	0x200007b4
 80a1af0:	20000368 	.word	0x20000368
 80a1af4:	080a1ab1 	.word	0x080a1ab1

080a1af8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1af8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1afa:	4b14      	ldr	r3, [pc, #80]	; (80a1b4c <serialEventRun+0x54>)
 80a1afc:	b133      	cbz	r3, 80a1b0c <serialEventRun+0x14>
 80a1afe:	f000 fbe9 	bl	80a22d4 <_Z16_fetch_usbserialv>
 80a1b02:	6803      	ldr	r3, [r0, #0]
 80a1b04:	691b      	ldr	r3, [r3, #16]
 80a1b06:	4798      	blx	r3
 80a1b08:	2800      	cmp	r0, #0
 80a1b0a:	dc16      	bgt.n	80a1b3a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1b0c:	4b10      	ldr	r3, [pc, #64]	; (80a1b50 <serialEventRun+0x58>)
 80a1b0e:	b133      	cbz	r3, 80a1b1e <serialEventRun+0x26>
 80a1b10:	f000 fc90 	bl	80a2434 <_Z22__fetch_global_Serial1v>
 80a1b14:	6803      	ldr	r3, [r0, #0]
 80a1b16:	691b      	ldr	r3, [r3, #16]
 80a1b18:	4798      	blx	r3
 80a1b1a:	2800      	cmp	r0, #0
 80a1b1c:	dc10      	bgt.n	80a1b40 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1b1e:	4b0d      	ldr	r3, [pc, #52]	; (80a1b54 <serialEventRun+0x5c>)
 80a1b20:	b10b      	cbz	r3, 80a1b26 <serialEventRun+0x2e>
 80a1b22:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1b26:	4b0c      	ldr	r3, [pc, #48]	; (80a1b58 <serialEventRun+0x60>)
 80a1b28:	b17b      	cbz	r3, 80a1b4a <serialEventRun+0x52>
 80a1b2a:	f000 fc01 	bl	80a2330 <_Z17_fetch_usbserial1v>
 80a1b2e:	6803      	ldr	r3, [r0, #0]
 80a1b30:	691b      	ldr	r3, [r3, #16]
 80a1b32:	4798      	blx	r3
 80a1b34:	2800      	cmp	r0, #0
 80a1b36:	dc06      	bgt.n	80a1b46 <serialEventRun+0x4e>
 80a1b38:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1b3a:	f3af 8000 	nop.w
 80a1b3e:	e7e5      	b.n	80a1b0c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1b40:	f3af 8000 	nop.w
 80a1b44:	e7eb      	b.n	80a1b1e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1b46:	f3af 8000 	nop.w
 80a1b4a:	bd08      	pop	{r3, pc}
	...

080a1b5c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1b5c:	b508      	push	{r3, lr}
	serialEventRun();
 80a1b5e:	f7ff ffcb 	bl	80a1af8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1b62:	f7ff f82b 	bl	80a0bbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1b66:	4b01      	ldr	r3, [pc, #4]	; (80a1b6c <_post_loop+0x10>)
 80a1b68:	6018      	str	r0, [r3, #0]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	2000084c 	.word	0x2000084c

080a1b70 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1b70:	4802      	ldr	r0, [pc, #8]	; (80a1b7c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1b72:	4a03      	ldr	r2, [pc, #12]	; (80a1b80 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1b74:	4903      	ldr	r1, [pc, #12]	; (80a1b84 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1b76:	1a12      	subs	r2, r2, r0
 80a1b78:	f000 bfd4 	b.w	80a2b24 <memcpy>
 80a1b7c:	40024000 	.word	0x40024000
 80a1b80:	40024004 	.word	0x40024004
 80a1b84:	080a3f60 	.word	0x080a3f60

080a1b88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1b88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b8a:	2300      	movs	r3, #0
 80a1b8c:	9300      	str	r3, [sp, #0]
 80a1b8e:	461a      	mov	r2, r3
 80a1b90:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1b94:	f7ff f996 	bl	80a0ec4 <system_ctrl_set_result>
}
 80a1b98:	b003      	add	sp, #12
 80a1b9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1ba0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1ba0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1ba2:	8843      	ldrh	r3, [r0, #2]
 80a1ba4:	2b0a      	cmp	r3, #10
 80a1ba6:	d008      	beq.n	80a1bba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1ba8:	2b50      	cmp	r3, #80	; 0x50
 80a1baa:	d109      	bne.n	80a1bc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1bac:	4b09      	ldr	r3, [pc, #36]	; (80a1bd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1bae:	681b      	ldr	r3, [r3, #0]
 80a1bb0:	b13b      	cbz	r3, 80a1bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1bb2:	b003      	add	sp, #12
 80a1bb4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1bb8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1bba:	f7ff ffe5 	bl	80a1b88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1bbe:	e006      	b.n	80a1bce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1bc0:	2300      	movs	r3, #0
 80a1bc2:	9300      	str	r3, [sp, #0]
 80a1bc4:	461a      	mov	r2, r3
 80a1bc6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1bca:	f7ff f97b 	bl	80a0ec4 <system_ctrl_set_result>
        break;
    }
}
 80a1bce:	b003      	add	sp, #12
 80a1bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1bd4:	200007c4 	.word	0x200007c4

080a1bd8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1bd8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1bda:	4c10      	ldr	r4, [pc, #64]	; (80a1c1c <module_user_init_hook+0x44>)
 80a1bdc:	4d10      	ldr	r5, [pc, #64]	; (80a1c20 <module_user_init_hook+0x48>)
 80a1bde:	6823      	ldr	r3, [r4, #0]
 80a1be0:	42ab      	cmp	r3, r5
 80a1be2:	4b10      	ldr	r3, [pc, #64]	; (80a1c24 <module_user_init_hook+0x4c>)
 80a1be4:	bf0c      	ite	eq
 80a1be6:	2201      	moveq	r2, #1
 80a1be8:	2200      	movne	r2, #0
 80a1bea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1bec:	d002      	beq.n	80a1bf4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1bee:	f7ff ffbf 	bl	80a1b70 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1bf2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1bf4:	f7fe ffda 	bl	80a0bac <HAL_RNG_GetRandomNumber>
 80a1bf8:	4604      	mov	r4, r0
    srand(seed);
 80a1bfa:	f000 ffa7 	bl	80a2b4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1bfe:	4b0a      	ldr	r3, [pc, #40]	; (80a1c28 <module_user_init_hook+0x50>)
 80a1c00:	b113      	cbz	r3, 80a1c08 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1c02:	4620      	mov	r0, r4
 80a1c04:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1c08:	2100      	movs	r1, #0
 80a1c0a:	4807      	ldr	r0, [pc, #28]	; (80a1c28 <module_user_init_hook+0x50>)
 80a1c0c:	f7ff f9cc 	bl	80a0fa8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1c14:	2100      	movs	r1, #0
 80a1c16:	4805      	ldr	r0, [pc, #20]	; (80a1c2c <module_user_init_hook+0x54>)
 80a1c18:	f7ff b94a 	b.w	80a0eb0 <system_ctrl_set_app_request_handler>
 80a1c1c:	40024000 	.word	0x40024000
 80a1c20:	9a271c1e 	.word	0x9a271c1e
 80a1c24:	200007c8 	.word	0x200007c8
 80a1c28:	00000000 	.word	0x00000000
 80a1c2c:	080a1ba1 	.word	0x080a1ba1

080a1c30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1c30:	4770      	bx	lr

080a1c32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1c32:	2000      	movs	r0, #0
 80a1c34:	4770      	bx	lr

080a1c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1c36:	b510      	push	{r4, lr}
 80a1c38:	4604      	mov	r4, r0
 80a1c3a:	2110      	movs	r1, #16
 80a1c3c:	f000 fe17 	bl	80a286e <_ZdlPvj>
 80a1c40:	4620      	mov	r0, r4
 80a1c42:	bd10      	pop	{r4, pc}

080a1c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1c44:	b508      	push	{r3, lr}
      { delete this; }
 80a1c46:	b108      	cbz	r0, 80a1c4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1c48:	f7ff fff5 	bl	80a1c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1c4c:	bd08      	pop	{r3, pc}

080a1c4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1c4e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1c50:	68c4      	ldr	r4, [r0, #12]
 80a1c52:	b1ec      	cbz	r4, 80a1c90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1c54:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1c56:	2b02      	cmp	r3, #2
 80a1c58:	d102      	bne.n	80a1c60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1c5a:	68e0      	ldr	r0, [r4, #12]
 80a1c5c:	f7ff f9b4 	bl	80a0fc8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1c60:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1c62:	b135      	cbz	r5, 80a1c72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1c64:	4628      	mov	r0, r5
 80a1c66:	f7ff ff1a 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>
 80a1c6a:	2110      	movs	r1, #16
 80a1c6c:	4628      	mov	r0, r5
 80a1c6e:	f000 fdfe 	bl	80a286e <_ZdlPvj>
 80a1c72:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1c74:	b135      	cbz	r5, 80a1c84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 80a1c76:	4628      	mov	r0, r5
 80a1c78:	f7ff ff11 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>
 80a1c7c:	2110      	movs	r1, #16
 80a1c7e:	4628      	mov	r0, r5
 80a1c80:	f000 fdf5 	bl	80a286e <_ZdlPvj>
 80a1c84:	4620      	mov	r0, r4
 80a1c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1c8a:	2114      	movs	r1, #20
 80a1c8c:	f000 bdef 	b.w	80a286e <_ZdlPvj>
 80a1c90:	bd38      	pop	{r3, r4, r5, pc}

080a1c92 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1c92:	b513      	push	{r0, r1, r4, lr}
 80a1c94:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1c96:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1c9a:	2300      	movs	r3, #0
 80a1c9c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1c9e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1ca0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1ca2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1ca4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1ca6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1ca8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1caa:	f7fe fa22 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1cae:	4620      	mov	r0, r4
 80a1cb0:	b002      	add	sp, #8
 80a1cb2:	bd10      	pop	{r4, pc}

080a1cb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1cb6:	460c      	mov	r4, r1
 80a1cb8:	4606      	mov	r6, r0
 80a1cba:	460f      	mov	r7, r1
 80a1cbc:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1cc0:	ad02      	add	r5, sp, #8
 80a1cc2:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1cc6:	4621      	mov	r1, r4
 80a1cc8:	a801      	add	r0, sp, #4
 80a1cca:	f7ff fecc 	bl	80a1a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1cce:	4629      	mov	r1, r5
 80a1cd0:	4630      	mov	r0, r6
 80a1cd2:	f7ff ffde 	bl	80a1c92 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1cd6:	a801      	add	r0, sp, #4
 80a1cd8:	f7fe fa0b 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1cdc:	4620      	mov	r0, r4
 80a1cde:	f7fe fa08 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1ce2:	4638      	mov	r0, r7
 80a1ce4:	2108      	movs	r1, #8
 80a1ce6:	f000 fdc2 	bl	80a286e <_ZdlPvj>
        return p;
    }
 80a1cea:	4630      	mov	r0, r6
 80a1cec:	b003      	add	sp, #12
 80a1cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1cf0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1cf0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1cf2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1cf4:	b90a      	cbnz	r2, 80a1cfa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1cf6:	f000 fdbc 	bl	80a2872 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1cfa:	68c3      	ldr	r3, [r0, #12]
    }
 80a1cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1d00:	4718      	bx	r3

080a1d02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1d02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1d04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1d06:	f100 0110 	add.w	r1, r0, #16
 80a1d0a:	f7ff fff1 	bl	80a1cf0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1d0e:	bd08      	pop	{r3, pc}

080a1d10 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1d10:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1d12:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1d14:	b90a      	cbnz	r2, 80a1d1a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1d16:	f000 fdac 	bl	80a2872 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1d1a:	68c3      	ldr	r3, [r0, #12]
    }
 80a1d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1d20:	4718      	bx	r3

080a1d22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1d22:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1d24:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1d26:	f100 0110 	add.w	r1, r0, #16
 80a1d2a:	f7ff fff1 	bl	80a1d10 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1d2e:	bd08      	pop	{r3, pc}

080a1d30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1d30:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d32:	2300      	movs	r3, #0
 80a1d34:	6083      	str	r3, [r0, #8]
 80a1d36:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1d38:	4604      	mov	r4, r0
 80a1d3a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1d3c:	b12b      	cbz	r3, 80a1d4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1d3e:	2202      	movs	r2, #2
 80a1d40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1d42:	68eb      	ldr	r3, [r5, #12]
 80a1d44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1d46:	68ab      	ldr	r3, [r5, #8]
 80a1d48:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1d4a:	4620      	mov	r0, r4
 80a1d4c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d54:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1d58:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1d5a:	f04f 0002 	mov.w	r0, #2
 80a1d5e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1d60:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d64:	808b      	strh	r3, [r1, #4]
 80a1d66:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1d68:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1d6a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d6e:	600b      	str	r3, [r1, #0]
 80a1d70:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a1d74:	4299      	cmp	r1, r3
 80a1d76:	d103      	bne.n	80a1d80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a1d78:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a1d7c:	2d00      	cmp	r5, #0
 80a1d7e:	d1f7      	bne.n	80a1d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1d80:	d002      	beq.n	80a1d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a1d82:	f88d 1000 	strb.w	r1, [sp]
 80a1d86:	e06c      	b.n	80a1e62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1d88:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1d8c:	bf1c      	itt	ne
 80a1d8e:	60e7      	strne	r7, [r4, #12]
 80a1d90:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1d92:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d96:	bf18      	it	ne
 80a1d98:	461f      	movne	r7, r3
 80a1d9a:	2301      	movs	r3, #1
 80a1d9c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1d9e:	f3bf 8f5f 	dmb	sy
 80a1da2:	f104 0308 	add.w	r3, r4, #8
 80a1da6:	2000      	movs	r0, #0
 80a1da8:	e853 6f00 	ldrex	r6, [r3]
 80a1dac:	e843 0200 	strex	r2, r0, [r3]
 80a1db0:	2a00      	cmp	r2, #0
 80a1db2:	d1f9      	bne.n	80a1da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a1db4:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1db8:	2e00      	cmp	r6, #0
 80a1dba:	d052      	beq.n	80a1e62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1dbc:	f7ff f868 	bl	80a0e90 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1dc0:	b120      	cbz	r0, 80a1dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1dc2:	4629      	mov	r1, r5
 80a1dc4:	4630      	mov	r0, r6
 80a1dc6:	f7ff ff93 	bl	80a1cf0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1dca:	e043      	b.n	80a1e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1dcc:	4631      	mov	r1, r6
 80a1dce:	4668      	mov	r0, sp
 80a1dd0:	f7ff ffae 	bl	80a1d30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1dd4:	68e0      	ldr	r0, [r4, #12]
 80a1dd6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1dda:	b108      	cbz	r0, 80a1de0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a1ddc:	f000 fee6 	bl	80a2bac <strdup>
 80a1de0:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1de2:	2010      	movs	r0, #16
 80a1de4:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1de8:	f7fe f957 	bl	80a009a <_Znwj>
 80a1dec:	4605      	mov	r5, r0
 80a1dee:	b330      	cbz	r0, 80a1e3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1df0:	f04f 0800 	mov.w	r8, #0
 80a1df4:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1df8:	2018      	movs	r0, #24
 80a1dfa:	f7fe f94e 	bl	80a009a <_Znwj>
 80a1dfe:	4604      	mov	r4, r0
 80a1e00:	b1c0      	cbz	r0, 80a1e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e02:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1e06:	4601      	mov	r1, r0
 80a1e08:	4668      	mov	r0, sp
 80a1e0a:	f7ff fe57 	bl	80a1abc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e0e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1e10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e12:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e14:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1e16:	9202      	str	r2, [sp, #8]
 80a1e18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e1a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1e1c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1e20:	9203      	str	r2, [sp, #12]
 80a1e22:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e24:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1e28:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1e2c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e2e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1e32:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1e34:	4b0e      	ldr	r3, [pc, #56]	; (80a1e70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1e36:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1e38:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1e3a:	4b0e      	ldr	r3, [pc, #56]	; (80a1e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a1e3c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1e3e:	9804      	ldr	r0, [sp, #16]
 80a1e40:	f7ff f8c2 	bl	80a0fc8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e44:	4668      	mov	r0, sp
 80a1e46:	f7ff fe2a 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1e4a:	2200      	movs	r2, #0
 80a1e4c:	4629      	mov	r1, r5
 80a1e4e:	480a      	ldr	r0, [pc, #40]	; (80a1e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 80a1e50:	f7ff f826 	bl	80a0ea0 <application_thread_invoke>
 80a1e54:	4630      	mov	r0, r6
 80a1e56:	f7ff fe22 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1e5a:	2110      	movs	r1, #16
 80a1e5c:	4630      	mov	r0, r6
 80a1e5e:	f000 fd06 	bl	80a286e <_ZdlPvj>
 80a1e62:	4638      	mov	r0, r7
 80a1e64:	f7ff f8b0 	bl	80a0fc8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a1e68:	b006      	add	sp, #24
 80a1e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1e6e:	bf00      	nop
 80a1e70:	080a1d03 	.word	0x080a1d03
 80a1e74:	080a1f65 	.word	0x080a1f65
 80a1e78:	080a24b5 	.word	0x080a24b5

080a1e7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1e80:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1e82:	ad07      	add	r5, sp, #28
 80a1e84:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1e88:	4606      	mov	r6, r0
 80a1e8a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1e8c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1e8e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1e90:	460f      	mov	r7, r1
 80a1e92:	4690      	mov	r8, r2
 80a1e94:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1e98:	f8c5 b004 	str.w	fp, [r5, #4]
 80a1e9c:	f8c5 b008 	str.w	fp, [r5, #8]
 80a1ea0:	9307      	str	r3, [sp, #28]
 80a1ea2:	f7fe f8fa 	bl	80a009a <_Znwj>
 80a1ea6:	4604      	mov	r4, r0
 80a1ea8:	b138      	cbz	r0, 80a1eba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1eaa:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1eae:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1eb2:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1eb6:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1eba:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ebc:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1ebe:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1ec0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ec2:	f7fe f8ea 	bl	80a009a <_Znwj>
 80a1ec6:	b128      	cbz	r0, 80a1ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1ec8:	2301      	movs	r3, #1
 80a1eca:	6043      	str	r3, [r0, #4]
 80a1ecc:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1ece:	4b23      	ldr	r3, [pc, #140]	; (80a1f5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a1ed0:	60c4      	str	r4, [r0, #12]
 80a1ed2:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1ed4:	4b22      	ldr	r3, [pc, #136]	; (80a1f60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ed6:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1ed8:	2008      	movs	r0, #8
 80a1eda:	9308      	str	r3, [sp, #32]
 80a1edc:	f7fe f8dd 	bl	80a009a <_Znwj>
 80a1ee0:	4604      	mov	r4, r0
 80a1ee2:	b128      	cbz	r0, 80a1ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1ee4:	9b03      	ldr	r3, [sp, #12]
 80a1ee6:	a904      	add	r1, sp, #16
 80a1ee8:	f840 3b04 	str.w	r3, [r0], #4
 80a1eec:	f7ff fdbb 	bl	80a1a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1ef0:	9500      	str	r5, [sp, #0]
 80a1ef2:	fa5f f38a 	uxtb.w	r3, sl
 80a1ef6:	464a      	mov	r2, r9
 80a1ef8:	4641      	mov	r1, r8
 80a1efa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1efc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1efe:	f7ff f843 	bl	80a0f88 <spark_send_event>
 80a1f02:	b9b8      	cbnz	r0, 80a1f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1f04:	9b03      	ldr	r3, [sp, #12]
 80a1f06:	785b      	ldrb	r3, [r3, #1]
 80a1f08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1f0c:	b993      	cbnz	r3, 80a1f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1f0e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1f12:	a905      	add	r1, sp, #20
 80a1f14:	a803      	add	r0, sp, #12
 80a1f16:	9205      	str	r2, [sp, #20]
 80a1f18:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1f1c:	f7ff ff18 	bl	80a1d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1f20:	9805      	ldr	r0, [sp, #20]
 80a1f22:	f7ff f851 	bl	80a0fc8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1f26:	a805      	add	r0, sp, #20
 80a1f28:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1f2a:	f7ff fec3 	bl	80a1cb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1f2e:	a806      	add	r0, sp, #24
 80a1f30:	f7fe f8df 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1f34:	9b03      	ldr	r3, [sp, #12]
 80a1f36:	a904      	add	r1, sp, #16
 80a1f38:	a806      	add	r0, sp, #24
 80a1f3a:	9305      	str	r3, [sp, #20]
 80a1f3c:	f7ff fd93 	bl	80a1a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1f40:	a905      	add	r1, sp, #20
 80a1f42:	4630      	mov	r0, r6
 80a1f44:	f7ff fea5 	bl	80a1c92 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1f48:	a806      	add	r0, sp, #24
 80a1f4a:	f7fe f8d2 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1f4e:	a804      	add	r0, sp, #16
 80a1f50:	f7fe f8cf 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1f54:	4630      	mov	r0, r6
 80a1f56:	b00b      	add	sp, #44	; 0x2c
 80a1f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1f5c:	080a3d98 	.word	0x080a3d98
 80a1f60:	080a20d1 	.word	0x080a20d1

080a1f64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1f64:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f68:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1f6a:	d006      	beq.n	80a1f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1f6c:	2a03      	cmp	r2, #3
 80a1f6e:	d017      	beq.n	80a1fa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1f70:	2a01      	cmp	r2, #1
 80a1f72:	d121      	bne.n	80a1fb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1f74:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1f76:	6003      	str	r3, [r0, #0]
	      break;
 80a1f78:	e01e      	b.n	80a1fb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1f7a:	2018      	movs	r0, #24
 80a1f7c:	680e      	ldr	r6, [r1, #0]
 80a1f7e:	f7fe f88c 	bl	80a009a <_Znwj>
 80a1f82:	4605      	mov	r5, r0
 80a1f84:	b150      	cbz	r0, 80a1f9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1f86:	4631      	mov	r1, r6
 80a1f88:	f7ff fed2 	bl	80a1d30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1f8c:	6930      	ldr	r0, [r6, #16]
 80a1f8e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1f92:	b108      	cbz	r0, 80a1f98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1f94:	f000 fe0a 	bl	80a2bac <strdup>
 80a1f98:	6128      	str	r0, [r5, #16]
 80a1f9a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1f9c:	6025      	str	r5, [r4, #0]
 80a1f9e:	e00b      	b.n	80a1fb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1fa0:	6804      	ldr	r4, [r0, #0]
 80a1fa2:	b14c      	cbz	r4, 80a1fb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1fa4:	6920      	ldr	r0, [r4, #16]
 80a1fa6:	f7ff f80f 	bl	80a0fc8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1faa:	4620      	mov	r0, r4
 80a1fac:	f7ff fd77 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1fb0:	2118      	movs	r1, #24
 80a1fb2:	4620      	mov	r0, r4
 80a1fb4:	f000 fc5b 	bl	80a286e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1fb8:	2000      	movs	r0, #0
 80a1fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1fbc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1fbc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1fbe:	2300      	movs	r3, #0
 80a1fc0:	6083      	str	r3, [r0, #8]
 80a1fc2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1fc4:	4604      	mov	r4, r0
 80a1fc6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1fc8:	b12b      	cbz	r3, 80a1fd6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1fca:	2202      	movs	r2, #2
 80a1fcc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1fce:	68eb      	ldr	r3, [r5, #12]
 80a1fd0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1fd2:	68ab      	ldr	r3, [r5, #8]
 80a1fd4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1fd6:	4620      	mov	r0, r4
 80a1fd8:	bd38      	pop	{r3, r4, r5, pc}

080a1fda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1fda:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1fdc:	b570      	push	{r4, r5, r6, lr}
 80a1fde:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1fe0:	d006      	beq.n	80a1ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1fe2:	2a03      	cmp	r2, #3
 80a1fe4:	d011      	beq.n	80a200a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1fe6:	2a01      	cmp	r2, #1
 80a1fe8:	d118      	bne.n	80a201c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1fea:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1fec:	6003      	str	r3, [r0, #0]
	      break;
 80a1fee:	e015      	b.n	80a201c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ff0:	2014      	movs	r0, #20
 80a1ff2:	680e      	ldr	r6, [r1, #0]
 80a1ff4:	f7fe f851 	bl	80a009a <_Znwj>
 80a1ff8:	4605      	mov	r5, r0
 80a1ffa:	b120      	cbz	r0, 80a2006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1ffc:	4631      	mov	r1, r6
 80a1ffe:	f7ff ffdd 	bl	80a1fbc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2002:	7c33      	ldrb	r3, [r6, #16]
 80a2004:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2006:	6025      	str	r5, [r4, #0]
 80a2008:	e008      	b.n	80a201c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a200a:	6804      	ldr	r4, [r0, #0]
 80a200c:	b134      	cbz	r4, 80a201c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a200e:	4620      	mov	r0, r4
 80a2010:	f7ff fd45 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2014:	2114      	movs	r1, #20
 80a2016:	4620      	mov	r0, r4
 80a2018:	f000 fc29 	bl	80a286e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a201c:	2000      	movs	r0, #0
 80a201e:	bd70      	pop	{r4, r5, r6, pc}

080a2020 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2020:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2022:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2024:	f3bf 8f5f 	dmb	sy
 80a2028:	b087      	sub	sp, #28
 80a202a:	2300      	movs	r3, #0
 80a202c:	e850 6f00 	ldrex	r6, [r0]
 80a2030:	e840 3200 	strex	r2, r3, [r0]
 80a2034:	2a00      	cmp	r2, #0
 80a2036:	d1f9      	bne.n	80a202c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2038:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a203c:	2e00      	cmp	r6, #0
 80a203e:	d03f      	beq.n	80a20c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2040:	4618      	mov	r0, r3
 80a2042:	f7fe ff25 	bl	80a0e90 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2046:	4607      	mov	r7, r0
 80a2048:	b120      	cbz	r0, 80a2054 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a204a:	4621      	mov	r1, r4
 80a204c:	4630      	mov	r0, r6
 80a204e:	f7ff fe5f 	bl	80a1d10 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2052:	e02e      	b.n	80a20b2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2054:	4631      	mov	r1, r6
 80a2056:	a801      	add	r0, sp, #4
 80a2058:	f7ff ffb0 	bl	80a1fbc <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a205c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a205e:	2010      	movs	r0, #16
 80a2060:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2064:	f7fe f819 	bl	80a009a <_Znwj>
 80a2068:	4605      	mov	r5, r0
 80a206a:	b1d0      	cbz	r0, 80a20a2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a206c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a206e:	2014      	movs	r0, #20
 80a2070:	f7fe f813 	bl	80a009a <_Znwj>
 80a2074:	4604      	mov	r4, r0
 80a2076:	b178      	cbz	r0, 80a2098 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2078:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a207a:	4601      	mov	r1, r0
 80a207c:	a801      	add	r0, sp, #4
 80a207e:	f7ff fd1d 	bl	80a1abc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2082:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2084:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2086:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2088:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a208a:	9203      	str	r2, [sp, #12]
 80a208c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a208e:	60e3      	str	r3, [r4, #12]
 80a2090:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2094:	9204      	str	r2, [sp, #16]
 80a2096:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2098:	4b0a      	ldr	r3, [pc, #40]	; (80a20c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a209a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a209c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a209e:	4b0a      	ldr	r3, [pc, #40]	; (80a20c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a20a0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a20a2:	a801      	add	r0, sp, #4
 80a20a4:	f7ff fcfb 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a20a8:	2200      	movs	r2, #0
 80a20aa:	4629      	mov	r1, r5
 80a20ac:	4807      	ldr	r0, [pc, #28]	; (80a20cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a20ae:	f7fe fef7 	bl	80a0ea0 <application_thread_invoke>
 80a20b2:	4630      	mov	r0, r6
 80a20b4:	f7ff fcf3 	bl	80a1a9e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a20b8:	2110      	movs	r1, #16
 80a20ba:	4630      	mov	r0, r6
 80a20bc:	f000 fbd7 	bl	80a286e <_ZdlPvj>
        }
    }
 80a20c0:	b007      	add	sp, #28
 80a20c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a20c4:	080a1d23 	.word	0x080a1d23
 80a20c8:	080a1fdb 	.word	0x080a1fdb
 80a20cc:	080a24b5 	.word	0x080a24b5

080a20d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a20d0:	b530      	push	{r4, r5, lr}
 80a20d2:	4604      	mov	r4, r0
 80a20d4:	b085      	sub	sp, #20
 80a20d6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a20d8:	4668      	mov	r0, sp
 80a20da:	4611      	mov	r1, r2
 80a20dc:	f7ff fdea 	bl	80a1cb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a20e0:	b17c      	cbz	r4, 80a2102 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a20e2:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a20e4:	4628      	mov	r0, r5
 80a20e6:	b10d      	cbz	r5, 80a20ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a20e8:	f000 fd60 	bl	80a2bac <strdup>
 80a20ec:	9002      	str	r0, [sp, #8]
 80a20ee:	a902      	add	r1, sp, #8
 80a20f0:	4668      	mov	r0, sp
 80a20f2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a20f6:	f7ff fe2b 	bl	80a1d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a20fa:	9802      	ldr	r0, [sp, #8]
 80a20fc:	f7fe ff64 	bl	80a0fc8 <free>
 80a2100:	e01d      	b.n	80a213e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2102:	f04f 0201 	mov.w	r2, #1
 80a2106:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2108:	f88d 4008 	strb.w	r4, [sp, #8]
 80a210c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2110:	42a3      	cmp	r3, r4
 80a2112:	d103      	bne.n	80a211c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2114:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2118:	2900      	cmp	r1, #0
 80a211a:	d1f7      	bne.n	80a210c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a211c:	d002      	beq.n	80a2124 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a211e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2122:	e00c      	b.n	80a213e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2124:	f110 010c 	adds.w	r1, r0, #12
 80a2128:	f04f 0301 	mov.w	r3, #1
 80a212c:	bf18      	it	ne
 80a212e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2130:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2134:	3004      	adds	r0, #4
 80a2136:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a213a:	f7ff ff71 	bl	80a2020 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a213e:	a801      	add	r0, sp, #4
 80a2140:	f7fd ffd7 	bl	80a00f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2144:	b005      	add	sp, #20
 80a2146:	bd30      	pop	{r4, r5, pc}

080a2148 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2148:	4770      	bx	lr

080a214a <_ZN9IPAddressD0Ev>:
 80a214a:	b510      	push	{r4, lr}
 80a214c:	4604      	mov	r4, r0
 80a214e:	2118      	movs	r1, #24
 80a2150:	f000 fb8d 	bl	80a286e <_ZdlPvj>
 80a2154:	4620      	mov	r0, r4
 80a2156:	bd10      	pop	{r4, pc}

080a2158 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a215a:	460f      	mov	r7, r1
 80a215c:	f100 0608 	add.w	r6, r0, #8
 80a2160:	1d05      	adds	r5, r0, #4
 80a2162:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2164:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2168:	220a      	movs	r2, #10
 80a216a:	4638      	mov	r0, r7
 80a216c:	f7ff fc39 	bl	80a19e2 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2170:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2172:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2174:	d007      	beq.n	80a2186 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2176:	2c00      	cmp	r4, #0
 80a2178:	d0f4      	beq.n	80a2164 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a217a:	212e      	movs	r1, #46	; 0x2e
 80a217c:	4638      	mov	r0, r7
 80a217e:	f7ff fbeb 	bl	80a1958 <_ZN5Print5printEc>
 80a2182:	4404      	add	r4, r0
 80a2184:	e7ee      	b.n	80a2164 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2186:	4620      	mov	r0, r4
 80a2188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a218c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a218c:	b510      	push	{r4, lr}
 80a218e:	4604      	mov	r4, r0
 80a2190:	4b04      	ldr	r3, [pc, #16]	; (80a21a4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2192:	2211      	movs	r2, #17
 80a2194:	f840 3b04 	str.w	r3, [r0], #4
 80a2198:	2100      	movs	r1, #0
 80a219a:	f000 fcce 	bl	80a2b3a <memset>
{
    clear();
}
 80a219e:	4620      	mov	r0, r4
 80a21a0:	bd10      	pop	{r4, pc}
 80a21a2:	bf00      	nop
 80a21a4:	080a3db4 	.word	0x080a3db4

080a21a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a21a8:	4603      	mov	r3, r0
 80a21aa:	4a07      	ldr	r2, [pc, #28]	; (80a21c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a21ac:	b510      	push	{r4, lr}
 80a21ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a21b2:	f101 0210 	add.w	r2, r1, #16
 80a21b6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a21ba:	4291      	cmp	r1, r2
 80a21bc:	f843 4b04 	str.w	r4, [r3], #4
 80a21c0:	d1f9      	bne.n	80a21b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a21c2:	780a      	ldrb	r2, [r1, #0]
 80a21c4:	701a      	strb	r2, [r3, #0]
}
 80a21c6:	bd10      	pop	{r4, pc}
 80a21c8:	080a3db4 	.word	0x080a3db4

080a21cc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a21cc:	4a02      	ldr	r2, [pc, #8]	; (80a21d8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a21ce:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a21d0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a21d2:	2204      	movs	r2, #4
 80a21d4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a21d6:	4770      	bx	lr
 80a21d8:	080a3db4 	.word	0x080a3db4

080a21dc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a21dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a21de:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a21e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a21e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a21ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a21ee:	2304      	movs	r3, #4
 80a21f0:	6041      	str	r1, [r0, #4]
 80a21f2:	7503      	strb	r3, [r0, #20]
 80a21f4:	bd10      	pop	{r4, pc}
	...

080a21f8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a21f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a21fa:	4d04      	ldr	r5, [pc, #16]	; (80a220c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a21fc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a21fe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2202:	9500      	str	r5, [sp, #0]
 80a2204:	f7ff ffea 	bl	80a21dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2208:	b003      	add	sp, #12
 80a220a:	bd30      	pop	{r4, r5, pc}
 80a220c:	080a3db4 	.word	0x080a3db4

080a2210 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2210:	7441      	strb	r1, [r0, #17]
 80a2212:	4770      	bx	lr

080a2214 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2214:	4770      	bx	lr

080a2216 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2216:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2218:	2100      	movs	r1, #0
 80a221a:	7c00      	ldrb	r0, [r0, #16]
 80a221c:	f7fe fdf0 	bl	80a0e00 <HAL_USB_USART_Receive_Data>
}
 80a2220:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2224:	bf28      	it	cs
 80a2226:	f04f 30ff 	movcs.w	r0, #4294967295
 80a222a:	bd08      	pop	{r3, pc}

080a222c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a222c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a222e:	2101      	movs	r1, #1
 80a2230:	7c00      	ldrb	r0, [r0, #16]
 80a2232:	f7fe fde5 	bl	80a0e00 <HAL_USB_USART_Receive_Data>
}
 80a2236:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a223a:	bf28      	it	cs
 80a223c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2240:	bd08      	pop	{r3, pc}

080a2242 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2242:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2244:	7c00      	ldrb	r0, [r0, #16]
 80a2246:	f7fe fdd3 	bl	80a0df0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a224a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a224e:	bd08      	pop	{r3, pc}

080a2250 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2250:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2252:	7c00      	ldrb	r0, [r0, #16]
 80a2254:	f7fe fdc4 	bl	80a0de0 <HAL_USB_USART_Available_Data>
}
 80a2258:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a225c:	bd08      	pop	{r3, pc}

080a225e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a225e:	7c00      	ldrb	r0, [r0, #16]
 80a2260:	f7fe bdde 	b.w	80a0e20 <HAL_USB_USART_Flush_Data>

080a2264 <_ZN9USBSerialD0Ev>:
 80a2264:	b510      	push	{r4, lr}
 80a2266:	4604      	mov	r4, r0
 80a2268:	2114      	movs	r1, #20
 80a226a:	f000 fb00 	bl	80a286e <_ZdlPvj>
 80a226e:	4620      	mov	r0, r4
 80a2270:	bd10      	pop	{r4, pc}

080a2272 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2272:	b538      	push	{r3, r4, r5, lr}
 80a2274:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2276:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2278:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a227a:	f7fe fdb9 	bl	80a0df0 <HAL_USB_USART_Available_Data_For_Write>
 80a227e:	2800      	cmp	r0, #0
 80a2280:	dc01      	bgt.n	80a2286 <_ZN9USBSerial5writeEh+0x14>
 80a2282:	7c60      	ldrb	r0, [r4, #17]
 80a2284:	b128      	cbz	r0, 80a2292 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2286:	4629      	mov	r1, r5
 80a2288:	7c20      	ldrb	r0, [r4, #16]
 80a228a:	f7fe fdc1 	bl	80a0e10 <HAL_USB_USART_Send_Data>
 80a228e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2292:	bd38      	pop	{r3, r4, r5, pc}

080a2294 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2294:	b510      	push	{r4, lr}
 80a2296:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2298:	2300      	movs	r3, #0
 80a229a:	6063      	str	r3, [r4, #4]
 80a229c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a22a0:	60a3      	str	r3, [r4, #8]
 80a22a2:	4b05      	ldr	r3, [pc, #20]	; (80a22b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a22a4:	4608      	mov	r0, r1
 80a22a6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a22a8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a22aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a22ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a22ae:	4611      	mov	r1, r2
 80a22b0:	f7fe fd86 	bl	80a0dc0 <HAL_USB_USART_Init>
}
 80a22b4:	4620      	mov	r0, r4
 80a22b6:	bd10      	pop	{r4, pc}
 80a22b8:	080a3dc8 	.word	0x080a3dc8

080a22bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a22bc:	2200      	movs	r2, #0
 80a22be:	7c00      	ldrb	r0, [r0, #16]
 80a22c0:	f7fe bd86 	b.w	80a0dd0 <HAL_USB_USART_Begin>

080a22c4 <_Z19acquireSerialBufferv>:
 80a22c4:	b510      	push	{r4, lr}
 80a22c6:	4604      	mov	r4, r0
 80a22c8:	2214      	movs	r2, #20
 80a22ca:	2100      	movs	r1, #0
 80a22cc:	f000 fc35 	bl	80a2b3a <memset>
 80a22d0:	4620      	mov	r0, r4
 80a22d2:	bd10      	pop	{r4, pc}

080a22d4 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a22d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a22d6:	4d0e      	ldr	r5, [pc, #56]	; (80a2310 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a22d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a22da:	a801      	add	r0, sp, #4
 80a22dc:	f7ff fff2 	bl	80a22c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a22e0:	6829      	ldr	r1, [r5, #0]
 80a22e2:	f011 0401 	ands.w	r4, r1, #1
 80a22e6:	d110      	bne.n	80a230a <_Z16_fetch_usbserialv+0x36>
 80a22e8:	4628      	mov	r0, r5
 80a22ea:	f7fd feda 	bl	80a00a2 <__cxa_guard_acquire>
 80a22ee:	b160      	cbz	r0, 80a230a <_Z16_fetch_usbserialv+0x36>
 80a22f0:	aa01      	add	r2, sp, #4
 80a22f2:	4621      	mov	r1, r4
 80a22f4:	4807      	ldr	r0, [pc, #28]	; (80a2314 <_Z16_fetch_usbserialv+0x40>)
 80a22f6:	f7ff ffcd 	bl	80a2294 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22fa:	4628      	mov	r0, r5
 80a22fc:	f7fd fed6 	bl	80a00ac <__cxa_guard_release>
 80a2300:	4a05      	ldr	r2, [pc, #20]	; (80a2318 <_Z16_fetch_usbserialv+0x44>)
 80a2302:	4906      	ldr	r1, [pc, #24]	; (80a231c <_Z16_fetch_usbserialv+0x48>)
 80a2304:	4803      	ldr	r0, [pc, #12]	; (80a2314 <_Z16_fetch_usbserialv+0x40>)
 80a2306:	f000 faad 	bl	80a2864 <__aeabi_atexit>
	return _usbserial;
}
 80a230a:	4802      	ldr	r0, [pc, #8]	; (80a2314 <_Z16_fetch_usbserialv+0x40>)
 80a230c:	b007      	add	sp, #28
 80a230e:	bd30      	pop	{r4, r5, pc}
 80a2310:	200007cc 	.word	0x200007cc
 80a2314:	200007d4 	.word	0x200007d4
 80a2318:	20000368 	.word	0x20000368
 80a231c:	080a2215 	.word	0x080a2215

080a2320 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2320:	b510      	push	{r4, lr}
 80a2322:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2324:	2214      	movs	r2, #20
 80a2326:	2100      	movs	r1, #0
 80a2328:	f000 fc07 	bl	80a2b3a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a232c:	4620      	mov	r0, r4
 80a232e:	bd10      	pop	{r4, pc}

080a2330 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2330:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2332:	4c0e      	ldr	r4, [pc, #56]	; (80a236c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2334:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2336:	a801      	add	r0, sp, #4
 80a2338:	f7ff fff2 	bl	80a2320 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a233c:	6823      	ldr	r3, [r4, #0]
 80a233e:	07db      	lsls	r3, r3, #31
 80a2340:	d410      	bmi.n	80a2364 <_Z17_fetch_usbserial1v+0x34>
 80a2342:	4620      	mov	r0, r4
 80a2344:	f7fd fead 	bl	80a00a2 <__cxa_guard_acquire>
 80a2348:	b160      	cbz	r0, 80a2364 <_Z17_fetch_usbserial1v+0x34>
 80a234a:	aa01      	add	r2, sp, #4
 80a234c:	2101      	movs	r1, #1
 80a234e:	4808      	ldr	r0, [pc, #32]	; (80a2370 <_Z17_fetch_usbserial1v+0x40>)
 80a2350:	f7ff ffa0 	bl	80a2294 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2354:	4620      	mov	r0, r4
 80a2356:	f7fd fea9 	bl	80a00ac <__cxa_guard_release>
 80a235a:	4a06      	ldr	r2, [pc, #24]	; (80a2374 <_Z17_fetch_usbserial1v+0x44>)
 80a235c:	4906      	ldr	r1, [pc, #24]	; (80a2378 <_Z17_fetch_usbserial1v+0x48>)
 80a235e:	4804      	ldr	r0, [pc, #16]	; (80a2370 <_Z17_fetch_usbserial1v+0x40>)
 80a2360:	f000 fa80 	bl	80a2864 <__aeabi_atexit>
  return _usbserial1;
}
 80a2364:	4802      	ldr	r0, [pc, #8]	; (80a2370 <_Z17_fetch_usbserial1v+0x40>)
 80a2366:	b006      	add	sp, #24
 80a2368:	bd10      	pop	{r4, pc}
 80a236a:	bf00      	nop
 80a236c:	200007d0 	.word	0x200007d0
 80a2370:	200007e8 	.word	0x200007e8
 80a2374:	20000368 	.word	0x20000368
 80a2378:	080a2215 	.word	0x080a2215

080a237c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a237c:	4770      	bx	lr

080a237e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a237e:	7441      	strb	r1, [r0, #17]
 80a2380:	4770      	bx	lr

080a2382 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2382:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2384:	7c00      	ldrb	r0, [r0, #16]
 80a2386:	f7fe fc71 	bl	80a0c6c <HAL_USART_Available_Data_For_Write>
}
 80a238a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a238e:	bd08      	pop	{r3, pc}

080a2390 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2390:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2392:	7c00      	ldrb	r0, [r0, #16]
 80a2394:	f7fe fc42 	bl	80a0c1c <HAL_USART_Available_Data>
}
 80a2398:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a239c:	bd08      	pop	{r3, pc}

080a239e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a239e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a23a0:	7c00      	ldrb	r0, [r0, #16]
 80a23a2:	f7fe fc4b 	bl	80a0c3c <HAL_USART_Peek_Data>
}
 80a23a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a23aa:	bf28      	it	cs
 80a23ac:	f04f 30ff 	movcs.w	r0, #4294967295
 80a23b0:	bd08      	pop	{r3, pc}

080a23b2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a23b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a23b4:	7c00      	ldrb	r0, [r0, #16]
 80a23b6:	f7fe fc39 	bl	80a0c2c <HAL_USART_Read_Data>
}
 80a23ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a23be:	bf28      	it	cs
 80a23c0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a23c4:	bd08      	pop	{r3, pc}

080a23c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a23c6:	7c00      	ldrb	r0, [r0, #16]
 80a23c8:	f7fe bc40 	b.w	80a0c4c <HAL_USART_Flush_Data>

080a23cc <_ZN11USARTSerialD0Ev>:
 80a23cc:	b510      	push	{r4, lr}
 80a23ce:	4604      	mov	r4, r0
 80a23d0:	2114      	movs	r1, #20
 80a23d2:	f000 fa4c 	bl	80a286e <_ZdlPvj>
 80a23d6:	4620      	mov	r0, r4
 80a23d8:	bd10      	pop	{r4, pc}

080a23da <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a23da:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23dc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a23de:	4604      	mov	r4, r0
 80a23e0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23e2:	b925      	cbnz	r5, 80a23ee <_ZN11USARTSerial5writeEh+0x14>
 80a23e4:	7c00      	ldrb	r0, [r0, #16]
 80a23e6:	f7fe fc41 	bl	80a0c6c <HAL_USART_Available_Data_For_Write>
 80a23ea:	2800      	cmp	r0, #0
 80a23ec:	dd05      	ble.n	80a23fa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23ee:	4631      	mov	r1, r6
 80a23f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a23f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23f6:	f7fe bc09 	b.w	80a0c0c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a23fa:	4628      	mov	r0, r5
 80a23fc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2400 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2400:	b510      	push	{r4, lr}
 80a2402:	4604      	mov	r4, r0
 80a2404:	4608      	mov	r0, r1
 80a2406:	4611      	mov	r1, r2
 80a2408:	2200      	movs	r2, #0
 80a240a:	6062      	str	r2, [r4, #4]
 80a240c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2410:	60a2      	str	r2, [r4, #8]
 80a2412:	4a05      	ldr	r2, [pc, #20]	; (80a2428 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2414:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2416:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2418:	2201      	movs	r2, #1
 80a241a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a241c:	461a      	mov	r2, r3
 80a241e:	f7fe fbed 	bl	80a0bfc <HAL_USART_Init>
}
 80a2422:	4620      	mov	r0, r4
 80a2424:	bd10      	pop	{r4, pc}
 80a2426:	bf00      	nop
 80a2428:	080a3df8 	.word	0x080a3df8

080a242c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a242c:	7c00      	ldrb	r0, [r0, #16]
 80a242e:	f7fe bc15 	b.w	80a0c5c <HAL_USART_Is_Enabled>
	...

080a2434 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2436:	4c19      	ldr	r4, [pc, #100]	; (80a249c <_Z22__fetch_global_Serial1v+0x68>)
 80a2438:	6825      	ldr	r5, [r4, #0]
 80a243a:	b94d      	cbnz	r5, 80a2450 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a243c:	2084      	movs	r0, #132	; 0x84
 80a243e:	f7fd fe2c 	bl	80a009a <_Znwj>
 80a2442:	4606      	mov	r6, r0
 80a2444:	b118      	cbz	r0, 80a244e <_Z22__fetch_global_Serial1v+0x1a>
 80a2446:	2284      	movs	r2, #132	; 0x84
 80a2448:	4629      	mov	r1, r5
 80a244a:	f000 fb76 	bl	80a2b3a <memset>
 80a244e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2450:	4d13      	ldr	r5, [pc, #76]	; (80a24a0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2452:	682e      	ldr	r6, [r5, #0]
 80a2454:	b94e      	cbnz	r6, 80a246a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a2456:	2084      	movs	r0, #132	; 0x84
 80a2458:	f7fd fe1f 	bl	80a009a <_Znwj>
 80a245c:	4607      	mov	r7, r0
 80a245e:	b118      	cbz	r0, 80a2468 <_Z22__fetch_global_Serial1v+0x34>
 80a2460:	2284      	movs	r2, #132	; 0x84
 80a2462:	4631      	mov	r1, r6
 80a2464:	f000 fb69 	bl	80a2b3a <memset>
 80a2468:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a246a:	4f0e      	ldr	r7, [pc, #56]	; (80a24a4 <_Z22__fetch_global_Serial1v+0x70>)
 80a246c:	6839      	ldr	r1, [r7, #0]
 80a246e:	f011 0601 	ands.w	r6, r1, #1
 80a2472:	d111      	bne.n	80a2498 <_Z22__fetch_global_Serial1v+0x64>
 80a2474:	4638      	mov	r0, r7
 80a2476:	f7fd fe14 	bl	80a00a2 <__cxa_guard_acquire>
 80a247a:	b168      	cbz	r0, 80a2498 <_Z22__fetch_global_Serial1v+0x64>
 80a247c:	6822      	ldr	r2, [r4, #0]
 80a247e:	4631      	mov	r1, r6
 80a2480:	682b      	ldr	r3, [r5, #0]
 80a2482:	4809      	ldr	r0, [pc, #36]	; (80a24a8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2484:	f7ff ffbc 	bl	80a2400 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2488:	4638      	mov	r0, r7
 80a248a:	f7fd fe0f 	bl	80a00ac <__cxa_guard_release>
 80a248e:	4a07      	ldr	r2, [pc, #28]	; (80a24ac <_Z22__fetch_global_Serial1v+0x78>)
 80a2490:	4907      	ldr	r1, [pc, #28]	; (80a24b0 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2492:	4805      	ldr	r0, [pc, #20]	; (80a24a8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2494:	f000 f9e6 	bl	80a2864 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2498:	4803      	ldr	r0, [pc, #12]	; (80a24a8 <_Z22__fetch_global_Serial1v+0x74>)
 80a249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a249c:	20000818 	.word	0x20000818
 80a24a0:	20000810 	.word	0x20000810
 80a24a4:	20000814 	.word	0x20000814
 80a24a8:	200007fc 	.word	0x200007fc
 80a24ac:	20000368 	.word	0x20000368
 80a24b0:	080a237d 	.word	0x080a237d

080a24b4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a24b4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a24b6:	6883      	ldr	r3, [r0, #8]
 80a24b8:	4604      	mov	r4, r0
 80a24ba:	b90b      	cbnz	r3, 80a24c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a24bc:	f000 f9d9 	bl	80a2872 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a24c0:	68c3      	ldr	r3, [r0, #12]
 80a24c2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a24c4:	68a3      	ldr	r3, [r4, #8]
 80a24c6:	b11b      	cbz	r3, 80a24d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a24c8:	2203      	movs	r2, #3
 80a24ca:	4621      	mov	r1, r4
 80a24cc:	4620      	mov	r0, r4
 80a24ce:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a24d0:	4620      	mov	r0, r4
}
 80a24d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a24d6:	2110      	movs	r1, #16
 80a24d8:	f000 b9c9 	b.w	80a286e <_ZdlPvj>

080a24dc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a24dc:	4770      	bx	lr

080a24de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a24de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24e0:	4606      	mov	r6, r0
 80a24e2:	4615      	mov	r5, r2
 80a24e4:	460c      	mov	r4, r1
 80a24e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a24e8:	42bc      	cmp	r4, r7
 80a24ea:	d006      	beq.n	80a24fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a24ec:	6833      	ldr	r3, [r6, #0]
 80a24ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a24f2:	689b      	ldr	r3, [r3, #8]
 80a24f4:	4630      	mov	r0, r6
 80a24f6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a24f8:	e7f6      	b.n	80a24e8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a24fa:	4628      	mov	r0, r5
 80a24fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a24fe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a24fe:	2200      	movs	r2, #0
 80a2500:	7c00      	ldrb	r0, [r0, #16]
 80a2502:	f7fe bbe3 	b.w	80a0ccc <HAL_I2C_Write_Data>

080a2506 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2506:	2100      	movs	r1, #0
 80a2508:	7c00      	ldrb	r0, [r0, #16]
 80a250a:	f7fe bbe7 	b.w	80a0cdc <HAL_I2C_Available_Data>

080a250e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a250e:	2100      	movs	r1, #0
 80a2510:	7c00      	ldrb	r0, [r0, #16]
 80a2512:	f7fe bbeb 	b.w	80a0cec <HAL_I2C_Read_Data>

080a2516 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2516:	2100      	movs	r1, #0
 80a2518:	7c00      	ldrb	r0, [r0, #16]
 80a251a:	f7fe bbef 	b.w	80a0cfc <HAL_I2C_Peek_Data>

080a251e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a251e:	2100      	movs	r1, #0
 80a2520:	7c00      	ldrb	r0, [r0, #16]
 80a2522:	f7fe bbf3 	b.w	80a0d0c <HAL_I2C_Flush_Data>

080a2526 <_ZN7TwoWireD0Ev>:
 80a2526:	b510      	push	{r4, lr}
 80a2528:	4604      	mov	r4, r0
 80a252a:	2114      	movs	r1, #20
 80a252c:	f000 f99f 	bl	80a286e <_ZdlPvj>
 80a2530:	4620      	mov	r0, r4
 80a2532:	bd10      	pop	{r4, pc}

080a2534 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2534:	b510      	push	{r4, lr}
 80a2536:	4604      	mov	r4, r0
 80a2538:	4608      	mov	r0, r1
 80a253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a253e:	60a3      	str	r3, [r4, #8]
 80a2540:	4b04      	ldr	r3, [pc, #16]	; (80a2554 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2542:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2544:	7420      	strb	r0, [r4, #16]
 80a2546:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2548:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a254a:	f7fe fbef 	bl	80a0d2c <HAL_I2C_Init>

}
 80a254e:	4620      	mov	r0, r4
 80a2550:	bd10      	pop	{r4, pc}
 80a2552:	bf00      	nop
 80a2554:	080a3e28 	.word	0x080a3e28

080a2558 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a2558:	2200      	movs	r2, #0
 80a255a:	7c00      	ldrb	r0, [r0, #16]
 80a255c:	f7fe bb8e 	b.w	80a0c7c <HAL_I2C_Set_Speed>

080a2560 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2560:	2300      	movs	r3, #0
 80a2562:	461a      	mov	r2, r3
 80a2564:	4619      	mov	r1, r3
 80a2566:	7c00      	ldrb	r0, [r0, #16]
 80a2568:	f7fe bb90 	b.w	80a0c8c <HAL_I2C_Begin>

080a256c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a256c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a256e:	2400      	movs	r4, #0
 80a2570:	7c00      	ldrb	r0, [r0, #16]
 80a2572:	9400      	str	r4, [sp, #0]
 80a2574:	f7fe fb92 	bl	80a0c9c <HAL_I2C_Request_Data>
  return result;
}
 80a2578:	b2c0      	uxtb	r0, r0
 80a257a:	b002      	add	sp, #8
 80a257c:	bd10      	pop	{r4, pc}

080a257e <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a257e:	2301      	movs	r3, #1
 80a2580:	b2d2      	uxtb	r2, r2
 80a2582:	b2c9      	uxtb	r1, r1
 80a2584:	f7ff bff2 	b.w	80a256c <_ZN7TwoWire11requestFromEhhh>

080a2588 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2588:	2200      	movs	r2, #0
 80a258a:	7c00      	ldrb	r0, [r0, #16]
 80a258c:	f7fe bb8e 	b.w	80a0cac <HAL_I2C_Begin_Transmission>

080a2590 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a2590:	b2c9      	uxtb	r1, r1
 80a2592:	f7ff bff9 	b.w	80a2588 <_ZN7TwoWire17beginTransmissionEh>

080a2596 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2596:	2200      	movs	r2, #0
 80a2598:	7c00      	ldrb	r0, [r0, #16]
 80a259a:	f7fe bb8f 	b.w	80a0cbc <HAL_I2C_End_Transmission>

080a259e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a259e:	2101      	movs	r1, #1
 80a25a0:	f7ff bff9 	b.w	80a2596 <_ZN7TwoWire15endTransmissionEh>

080a25a4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a25a4:	2100      	movs	r1, #0
 80a25a6:	7c00      	ldrb	r0, [r0, #16]
 80a25a8:	f7fe bbb8 	b.w	80a0d1c <HAL_I2C_Is_Enabled>

080a25ac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a25ac:	2200      	movs	r2, #0
 80a25ae:	4611      	mov	r1, r2
 80a25b0:	6840      	ldr	r0, [r0, #4]
 80a25b2:	f7fe bca9 	b.w	80a0f08 <network_ready>

080a25b6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a25b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25b8:	4616      	mov	r6, r2
 80a25ba:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a25bc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a25be:	460f      	mov	r7, r1
 80a25c0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a25c2:	2100      	movs	r1, #0
 80a25c4:	a803      	add	r0, sp, #12
 80a25c6:	f000 fab8 	bl	80a2b3a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a25ca:	4630      	mov	r0, r6
 80a25cc:	f000 fb09 	bl	80a2be2 <strlen>
 80a25d0:	2500      	movs	r5, #0
 80a25d2:	9500      	str	r5, [sp, #0]
 80a25d4:	b281      	uxth	r1, r0
 80a25d6:	687b      	ldr	r3, [r7, #4]
 80a25d8:	aa03      	add	r2, sp, #12
 80a25da:	4630      	mov	r0, r6
 80a25dc:	f7fe fc30 	bl	80a0e40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a25e0:	b120      	cbz	r0, 80a25ec <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a25e2:	4629      	mov	r1, r5
 80a25e4:	4620      	mov	r0, r4
 80a25e6:	f7ff fdf1 	bl	80a21cc <_ZN9IPAddressC1Em>
 80a25ea:	e003      	b.n	80a25f4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a25ec:	a903      	add	r1, sp, #12
 80a25ee:	4620      	mov	r0, r4
 80a25f0:	f7ff fdda 	bl	80a21a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a25f4:	4620      	mov	r0, r4
 80a25f6:	b009      	add	sp, #36	; 0x24
 80a25f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a25fa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a25fa:	2200      	movs	r2, #0
 80a25fc:	4611      	mov	r1, r2
 80a25fe:	6840      	ldr	r0, [r0, #4]
 80a2600:	f7fe bca2 	b.w	80a0f48 <network_listening>

080a2604 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2604:	2200      	movs	r2, #0
 80a2606:	4611      	mov	r1, r2
 80a2608:	6840      	ldr	r0, [r0, #4]
 80a260a:	f7fe bcad 	b.w	80a0f68 <network_get_listen_timeout>

080a260e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a260e:	2200      	movs	r2, #0
 80a2610:	6840      	ldr	r0, [r0, #4]
 80a2612:	f7fe bca1 	b.w	80a0f58 <network_set_listen_timeout>

080a2616 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2616:	2200      	movs	r2, #0
 80a2618:	f081 0101 	eor.w	r1, r1, #1
 80a261c:	6840      	ldr	r0, [r0, #4]
 80a261e:	f7fe bc8b 	b.w	80a0f38 <network_listen>

080a2622 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2622:	2300      	movs	r3, #0
 80a2624:	461a      	mov	r2, r3
 80a2626:	4619      	mov	r1, r3
 80a2628:	6840      	ldr	r0, [r0, #4]
 80a262a:	f7fe bc7d 	b.w	80a0f28 <network_off>

080a262e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a262e:	2200      	movs	r2, #0
 80a2630:	4611      	mov	r1, r2
 80a2632:	6840      	ldr	r0, [r0, #4]
 80a2634:	f7fe bc58 	b.w	80a0ee8 <network_connecting>

080a2638 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2638:	2200      	movs	r2, #0
 80a263a:	2102      	movs	r1, #2
 80a263c:	6840      	ldr	r0, [r0, #4]
 80a263e:	f7fe bc5b 	b.w	80a0ef8 <network_disconnect>

080a2642 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2642:	2300      	movs	r3, #0
 80a2644:	461a      	mov	r2, r3
 80a2646:	6840      	ldr	r0, [r0, #4]
 80a2648:	f7fe bc46 	b.w	80a0ed8 <network_connect>

080a264c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a264c:	4b02      	ldr	r3, [pc, #8]	; (80a2658 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a264e:	2204      	movs	r2, #4
 80a2650:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2652:	4a02      	ldr	r2, [pc, #8]	; (80a265c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2654:	601a      	str	r2, [r3, #0]
 80a2656:	4770      	bx	lr
 80a2658:	2000081c 	.word	0x2000081c
 80a265c:	080a3e50 	.word	0x080a3e50

080a2660 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2660:	2300      	movs	r3, #0
 80a2662:	461a      	mov	r2, r3
 80a2664:	6840      	ldr	r0, [r0, #4]
 80a2666:	f7fe bc37 	b.w	80a0ed8 <network_connect>

080a266a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a266a:	2200      	movs	r2, #0
 80a266c:	2102      	movs	r1, #2
 80a266e:	6840      	ldr	r0, [r0, #4]
 80a2670:	f7fe bc42 	b.w	80a0ef8 <network_disconnect>

080a2674 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2674:	2200      	movs	r2, #0
 80a2676:	4611      	mov	r1, r2
 80a2678:	6840      	ldr	r0, [r0, #4]
 80a267a:	f7fe bc35 	b.w	80a0ee8 <network_connecting>

080a267e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a267e:	2200      	movs	r2, #0
 80a2680:	4611      	mov	r1, r2
 80a2682:	6840      	ldr	r0, [r0, #4]
 80a2684:	f7fe bc40 	b.w	80a0f08 <network_ready>

080a2688 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2688:	2300      	movs	r3, #0
 80a268a:	461a      	mov	r2, r3
 80a268c:	4619      	mov	r1, r3
 80a268e:	6840      	ldr	r0, [r0, #4]
 80a2690:	f7fe bc42 	b.w	80a0f18 <network_on>

080a2694 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2694:	2300      	movs	r3, #0
 80a2696:	461a      	mov	r2, r3
 80a2698:	4619      	mov	r1, r3
 80a269a:	6840      	ldr	r0, [r0, #4]
 80a269c:	f7fe bc44 	b.w	80a0f28 <network_off>

080a26a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a26a0:	2200      	movs	r2, #0
 80a26a2:	f081 0101 	eor.w	r1, r1, #1
 80a26a6:	6840      	ldr	r0, [r0, #4]
 80a26a8:	f7fe bc46 	b.w	80a0f38 <network_listen>

080a26ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a26ac:	2200      	movs	r2, #0
 80a26ae:	6840      	ldr	r0, [r0, #4]
 80a26b0:	f7fe bc52 	b.w	80a0f58 <network_set_listen_timeout>

080a26b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a26b4:	2200      	movs	r2, #0
 80a26b6:	4611      	mov	r1, r2
 80a26b8:	6840      	ldr	r0, [r0, #4]
 80a26ba:	f7fe bc55 	b.w	80a0f68 <network_get_listen_timeout>

080a26be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a26be:	2200      	movs	r2, #0
 80a26c0:	4611      	mov	r1, r2
 80a26c2:	6840      	ldr	r0, [r0, #4]
 80a26c4:	f7fe bc40 	b.w	80a0f48 <network_listening>

080a26c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a26c8:	b570      	push	{r4, r5, r6, lr}
 80a26ca:	4616      	mov	r6, r2
 80a26cc:	b08e      	sub	sp, #56	; 0x38
 80a26ce:	4604      	mov	r4, r0
    IPAddress addr;
 80a26d0:	a808      	add	r0, sp, #32
 80a26d2:	f7ff fd5b 	bl	80a218c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a26d6:	2211      	movs	r2, #17
 80a26d8:	2100      	movs	r1, #0
 80a26da:	a803      	add	r0, sp, #12
 80a26dc:	f000 fa2d 	bl	80a2b3a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a26e0:	4630      	mov	r0, r6
 80a26e2:	f000 fa7e 	bl	80a2be2 <strlen>
 80a26e6:	2500      	movs	r5, #0
 80a26e8:	4b0a      	ldr	r3, [pc, #40]	; (80a2714 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a26ea:	9500      	str	r5, [sp, #0]
 80a26ec:	b281      	uxth	r1, r0
 80a26ee:	685b      	ldr	r3, [r3, #4]
 80a26f0:	aa03      	add	r2, sp, #12
 80a26f2:	4630      	mov	r0, r6
 80a26f4:	f7fe fba4 	bl	80a0e40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a26f8:	b120      	cbz	r0, 80a2704 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a26fa:	4629      	mov	r1, r5
 80a26fc:	4620      	mov	r0, r4
 80a26fe:	f7ff fd65 	bl	80a21cc <_ZN9IPAddressC1Em>
 80a2702:	e003      	b.n	80a270c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2704:	a903      	add	r1, sp, #12
 80a2706:	4620      	mov	r0, r4
 80a2708:	f7ff fd4e 	bl	80a21a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a270c:	4620      	mov	r0, r4
 80a270e:	b00e      	add	sp, #56	; 0x38
 80a2710:	bd70      	pop	{r4, r5, r6, pc}
 80a2712:	bf00      	nop
 80a2714:	2000081c 	.word	0x2000081c

080a2718 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2718:	4b03      	ldr	r3, [pc, #12]	; (80a2728 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a271a:	4a04      	ldr	r2, [pc, #16]	; (80a272c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a271c:	2804      	cmp	r0, #4
 80a271e:	bf0c      	ite	eq
 80a2720:	4610      	moveq	r0, r2
 80a2722:	4618      	movne	r0, r3
 80a2724:	4770      	bx	lr
 80a2726:	bf00      	nop
 80a2728:	20000824 	.word	0x20000824
 80a272c:	2000081c 	.word	0x2000081c

080a2730 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2730:	4b02      	ldr	r3, [pc, #8]	; (80a273c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2732:	4a03      	ldr	r2, [pc, #12]	; (80a2740 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2734:	601a      	str	r2, [r3, #0]
 80a2736:	2200      	movs	r2, #0
 80a2738:	605a      	str	r2, [r3, #4]
 80a273a:	4770      	bx	lr
 80a273c:	20000824 	.word	0x20000824
 80a2740:	080a3e84 	.word	0x080a3e84

080a2744 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2744:	b510      	push	{r4, lr}
 80a2746:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2748:	480f      	ldr	r0, [pc, #60]	; (80a2788 <pinAvailable+0x44>)
 80a274a:	f7fe fd15 	bl	80a1178 <_ZN8SPIClass9isEnabledEv>
 80a274e:	b128      	cbz	r0, 80a275c <pinAvailable+0x18>
 80a2750:	f1a4 030d 	sub.w	r3, r4, #13
 80a2754:	2b02      	cmp	r3, #2
 80a2756:	d801      	bhi.n	80a275c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2758:	2000      	movs	r0, #0
 80a275a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a275c:	f000 f862 	bl	80a2824 <_Z19__fetch_global_Wirev>
 80a2760:	f7ff ff20 	bl	80a25a4 <_ZN7TwoWire9isEnabledEv>
 80a2764:	b108      	cbz	r0, 80a276a <pinAvailable+0x26>
 80a2766:	2c01      	cmp	r4, #1
 80a2768:	d9f6      	bls.n	80a2758 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a276a:	f7ff fe63 	bl	80a2434 <_Z22__fetch_global_Serial1v>
 80a276e:	f7ff fe5d 	bl	80a242c <_ZN11USARTSerial9isEnabledEv>
 80a2772:	b118      	cbz	r0, 80a277c <pinAvailable+0x38>
 80a2774:	f1a4 0312 	sub.w	r3, r4, #18
 80a2778:	2b01      	cmp	r3, #1
 80a277a:	d9ed      	bls.n	80a2758 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a277c:	2c17      	cmp	r4, #23
 80a277e:	bf8c      	ite	hi
 80a2780:	2000      	movhi	r0, #0
 80a2782:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2784:	bd10      	pop	{r4, pc}
 80a2786:	bf00      	nop
 80a2788:	2000082c 	.word	0x2000082c

080a278c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a278c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a278e:	b538      	push	{r3, r4, r5, lr}
 80a2790:	4604      	mov	r4, r0
 80a2792:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2794:	d80a      	bhi.n	80a27ac <pinMode+0x20>
 80a2796:	29ff      	cmp	r1, #255	; 0xff
 80a2798:	d008      	beq.n	80a27ac <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a279a:	f7ff ffd3 	bl	80a2744 <pinAvailable>
 80a279e:	b128      	cbz	r0, 80a27ac <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a27a0:	4629      	mov	r1, r5
 80a27a2:	4620      	mov	r0, r4
}
 80a27a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a27a8:	f7fe b9c8 	b.w	80a0b3c <HAL_Pin_Mode>
 80a27ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080a27b0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27b0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a27b2:	4c0c      	ldr	r4, [pc, #48]	; (80a27e4 <_GLOBAL__sub_I_SPI+0x34>)
 80a27b4:	4e0c      	ldr	r6, [pc, #48]	; (80a27e8 <_GLOBAL__sub_I_SPI+0x38>)
 80a27b6:	4d0d      	ldr	r5, [pc, #52]	; (80a27ec <_GLOBAL__sub_I_SPI+0x3c>)
 80a27b8:	2100      	movs	r1, #0
 80a27ba:	4620      	mov	r0, r4
 80a27bc:	f7fe fc34 	bl	80a1028 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27c0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27c2:	4c0b      	ldr	r4, [pc, #44]	; (80a27f0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a27c4:	4632      	mov	r2, r6
 80a27c6:	4629      	mov	r1, r5
 80a27c8:	f000 f84c 	bl	80a2864 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27cc:	2101      	movs	r1, #1
 80a27ce:	4620      	mov	r0, r4
 80a27d0:	f7fe fc2a 	bl	80a1028 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27d4:	4632      	mov	r2, r6
 80a27d6:	4629      	mov	r1, r5
 80a27d8:	4620      	mov	r0, r4
 80a27da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a27de:	f000 b841 	b.w	80a2864 <__aeabi_atexit>
 80a27e2:	bf00      	nop
 80a27e4:	2000082c 	.word	0x2000082c
 80a27e8:	20000368 	.word	0x20000368
 80a27ec:	080a1019 	.word	0x080a1019
 80a27f0:	2000083c 	.word	0x2000083c

080a27f4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a27f4:	b513      	push	{r0, r1, r4, lr}
 80a27f6:	4c08      	ldr	r4, [pc, #32]	; (80a2818 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a27f8:	2300      	movs	r3, #0
 80a27fa:	461a      	mov	r2, r3
 80a27fc:	4619      	mov	r1, r3
 80a27fe:	9300      	str	r3, [sp, #0]
 80a2800:	4620      	mov	r0, r4
 80a2802:	f7ff fcf9 	bl	80a21f8 <_ZN9IPAddressC1Ehhhh>
 80a2806:	4620      	mov	r0, r4
 80a2808:	4a04      	ldr	r2, [pc, #16]	; (80a281c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a280a:	4905      	ldr	r1, [pc, #20]	; (80a2820 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a280c:	b002      	add	sp, #8
 80a280e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2812:	f000 b827 	b.w	80a2864 <__aeabi_atexit>
 80a2816:	bf00      	nop
 80a2818:	20000850 	.word	0x20000850
 80a281c:	20000368 	.word	0x20000368
 80a2820:	080a2149 	.word	0x080a2149

080a2824 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2824:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2826:	4d0b      	ldr	r5, [pc, #44]	; (80a2854 <_Z19__fetch_global_Wirev+0x30>)
 80a2828:	6829      	ldr	r1, [r5, #0]
 80a282a:	f011 0401 	ands.w	r4, r1, #1
 80a282e:	d10f      	bne.n	80a2850 <_Z19__fetch_global_Wirev+0x2c>
 80a2830:	4628      	mov	r0, r5
 80a2832:	f7fd fc36 	bl	80a00a2 <__cxa_guard_acquire>
 80a2836:	b158      	cbz	r0, 80a2850 <_Z19__fetch_global_Wirev+0x2c>
 80a2838:	4621      	mov	r1, r4
 80a283a:	4807      	ldr	r0, [pc, #28]	; (80a2858 <_Z19__fetch_global_Wirev+0x34>)
 80a283c:	f7ff fe7a 	bl	80a2534 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2840:	4628      	mov	r0, r5
 80a2842:	f7fd fc33 	bl	80a00ac <__cxa_guard_release>
 80a2846:	4a05      	ldr	r2, [pc, #20]	; (80a285c <_Z19__fetch_global_Wirev+0x38>)
 80a2848:	4905      	ldr	r1, [pc, #20]	; (80a2860 <_Z19__fetch_global_Wirev+0x3c>)
 80a284a:	4803      	ldr	r0, [pc, #12]	; (80a2858 <_Z19__fetch_global_Wirev+0x34>)
 80a284c:	f000 f80a 	bl	80a2864 <__aeabi_atexit>
	return wire;
}
 80a2850:	4801      	ldr	r0, [pc, #4]	; (80a2858 <_Z19__fetch_global_Wirev+0x34>)
 80a2852:	bd38      	pop	{r3, r4, r5, pc}
 80a2854:	20000868 	.word	0x20000868
 80a2858:	2000086c 	.word	0x2000086c
 80a285c:	20000368 	.word	0x20000368
 80a2860:	080a24dd 	.word	0x080a24dd

080a2864 <__aeabi_atexit>:
 80a2864:	460b      	mov	r3, r1
 80a2866:	4601      	mov	r1, r0
 80a2868:	4618      	mov	r0, r3
 80a286a:	f000 b94d 	b.w	80a2b08 <__cxa_atexit>

080a286e <_ZdlPvj>:
 80a286e:	f7fd bc16 	b.w	80a009e <_ZdlPv>

080a2872 <_ZSt25__throw_bad_function_callv>:
 80a2872:	b508      	push	{r3, lr}
 80a2874:	f7fe fbc0 	bl	80a0ff8 <abort>

080a2878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2878:	4b18      	ldr	r3, [pc, #96]	; (80a28dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a287a:	681a      	ldr	r2, [r3, #0]
 80a287c:	07d1      	lsls	r1, r2, #31
 80a287e:	bf5c      	itt	pl
 80a2880:	2201      	movpl	r2, #1
 80a2882:	601a      	strpl	r2, [r3, #0]
 80a2884:	4b16      	ldr	r3, [pc, #88]	; (80a28e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2886:	681a      	ldr	r2, [r3, #0]
 80a2888:	07d2      	lsls	r2, r2, #31
 80a288a:	bf5c      	itt	pl
 80a288c:	2201      	movpl	r2, #1
 80a288e:	601a      	strpl	r2, [r3, #0]
 80a2890:	4b14      	ldr	r3, [pc, #80]	; (80a28e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2892:	681a      	ldr	r2, [r3, #0]
 80a2894:	07d0      	lsls	r0, r2, #31
 80a2896:	bf5c      	itt	pl
 80a2898:	2201      	movpl	r2, #1
 80a289a:	601a      	strpl	r2, [r3, #0]
 80a289c:	4b12      	ldr	r3, [pc, #72]	; (80a28e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a289e:	681a      	ldr	r2, [r3, #0]
 80a28a0:	07d1      	lsls	r1, r2, #31
 80a28a2:	bf5c      	itt	pl
 80a28a4:	2201      	movpl	r2, #1
 80a28a6:	601a      	strpl	r2, [r3, #0]
 80a28a8:	4b10      	ldr	r3, [pc, #64]	; (80a28ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a28aa:	681a      	ldr	r2, [r3, #0]
 80a28ac:	07d2      	lsls	r2, r2, #31
 80a28ae:	bf5c      	itt	pl
 80a28b0:	2201      	movpl	r2, #1
 80a28b2:	601a      	strpl	r2, [r3, #0]
 80a28b4:	4b0e      	ldr	r3, [pc, #56]	; (80a28f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a28b6:	681a      	ldr	r2, [r3, #0]
 80a28b8:	07d0      	lsls	r0, r2, #31
 80a28ba:	bf5c      	itt	pl
 80a28bc:	2201      	movpl	r2, #1
 80a28be:	601a      	strpl	r2, [r3, #0]
 80a28c0:	4b0c      	ldr	r3, [pc, #48]	; (80a28f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a28c2:	681a      	ldr	r2, [r3, #0]
 80a28c4:	07d1      	lsls	r1, r2, #31
 80a28c6:	bf5c      	itt	pl
 80a28c8:	2201      	movpl	r2, #1
 80a28ca:	601a      	strpl	r2, [r3, #0]
 80a28cc:	4b0a      	ldr	r3, [pc, #40]	; (80a28f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a28ce:	681a      	ldr	r2, [r3, #0]
 80a28d0:	07d2      	lsls	r2, r2, #31
 80a28d2:	bf5c      	itt	pl
 80a28d4:	2201      	movpl	r2, #1
 80a28d6:	601a      	strpl	r2, [r3, #0]
 80a28d8:	4770      	bx	lr
 80a28da:	bf00      	nop
 80a28dc:	2000089c 	.word	0x2000089c
 80a28e0:	20000898 	.word	0x20000898
 80a28e4:	20000894 	.word	0x20000894
 80a28e8:	20000890 	.word	0x20000890
 80a28ec:	2000088c 	.word	0x2000088c
 80a28f0:	20000888 	.word	0x20000888
 80a28f4:	20000884 	.word	0x20000884
 80a28f8:	20000880 	.word	0x20000880

080a28fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a28fc:	4b24      	ldr	r3, [pc, #144]	; (80a2990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a28fe:	681a      	ldr	r2, [r3, #0]
 80a2900:	07d0      	lsls	r0, r2, #31
 80a2902:	bf5c      	itt	pl
 80a2904:	2201      	movpl	r2, #1
 80a2906:	601a      	strpl	r2, [r3, #0]
 80a2908:	4b22      	ldr	r3, [pc, #136]	; (80a2994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a290a:	681a      	ldr	r2, [r3, #0]
 80a290c:	07d1      	lsls	r1, r2, #31
 80a290e:	bf5c      	itt	pl
 80a2910:	2201      	movpl	r2, #1
 80a2912:	601a      	strpl	r2, [r3, #0]
 80a2914:	4b20      	ldr	r3, [pc, #128]	; (80a2998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2916:	681a      	ldr	r2, [r3, #0]
 80a2918:	07d2      	lsls	r2, r2, #31
 80a291a:	bf5c      	itt	pl
 80a291c:	2201      	movpl	r2, #1
 80a291e:	601a      	strpl	r2, [r3, #0]
 80a2920:	4b1e      	ldr	r3, [pc, #120]	; (80a299c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2922:	681a      	ldr	r2, [r3, #0]
 80a2924:	07d0      	lsls	r0, r2, #31
 80a2926:	bf5c      	itt	pl
 80a2928:	2201      	movpl	r2, #1
 80a292a:	601a      	strpl	r2, [r3, #0]
 80a292c:	4b1c      	ldr	r3, [pc, #112]	; (80a29a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a292e:	681a      	ldr	r2, [r3, #0]
 80a2930:	07d1      	lsls	r1, r2, #31
 80a2932:	bf5c      	itt	pl
 80a2934:	2201      	movpl	r2, #1
 80a2936:	601a      	strpl	r2, [r3, #0]
 80a2938:	4b1a      	ldr	r3, [pc, #104]	; (80a29a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a293a:	681a      	ldr	r2, [r3, #0]
 80a293c:	07d2      	lsls	r2, r2, #31
 80a293e:	bf5c      	itt	pl
 80a2940:	2201      	movpl	r2, #1
 80a2942:	601a      	strpl	r2, [r3, #0]
 80a2944:	4b18      	ldr	r3, [pc, #96]	; (80a29a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2946:	681a      	ldr	r2, [r3, #0]
 80a2948:	07d0      	lsls	r0, r2, #31
 80a294a:	bf5c      	itt	pl
 80a294c:	2201      	movpl	r2, #1
 80a294e:	601a      	strpl	r2, [r3, #0]
 80a2950:	4b16      	ldr	r3, [pc, #88]	; (80a29ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2952:	681a      	ldr	r2, [r3, #0]
 80a2954:	07d1      	lsls	r1, r2, #31
 80a2956:	bf5c      	itt	pl
 80a2958:	2201      	movpl	r2, #1
 80a295a:	601a      	strpl	r2, [r3, #0]
 80a295c:	4b14      	ldr	r3, [pc, #80]	; (80a29b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a295e:	681a      	ldr	r2, [r3, #0]
 80a2960:	07d2      	lsls	r2, r2, #31
 80a2962:	bf5c      	itt	pl
 80a2964:	2201      	movpl	r2, #1
 80a2966:	601a      	strpl	r2, [r3, #0]
 80a2968:	4b12      	ldr	r3, [pc, #72]	; (80a29b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a296a:	681a      	ldr	r2, [r3, #0]
 80a296c:	07d0      	lsls	r0, r2, #31
 80a296e:	bf5c      	itt	pl
 80a2970:	2201      	movpl	r2, #1
 80a2972:	601a      	strpl	r2, [r3, #0]
 80a2974:	4b10      	ldr	r3, [pc, #64]	; (80a29b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2976:	681a      	ldr	r2, [r3, #0]
 80a2978:	07d1      	lsls	r1, r2, #31
 80a297a:	bf5c      	itt	pl
 80a297c:	2201      	movpl	r2, #1
 80a297e:	601a      	strpl	r2, [r3, #0]
 80a2980:	4b0e      	ldr	r3, [pc, #56]	; (80a29bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2982:	681a      	ldr	r2, [r3, #0]
 80a2984:	07d2      	lsls	r2, r2, #31
 80a2986:	bf5c      	itt	pl
 80a2988:	2201      	movpl	r2, #1
 80a298a:	601a      	strpl	r2, [r3, #0]
 80a298c:	4770      	bx	lr
 80a298e:	bf00      	nop
 80a2990:	200008cc 	.word	0x200008cc
 80a2994:	200008c8 	.word	0x200008c8
 80a2998:	200008c4 	.word	0x200008c4
 80a299c:	200008c0 	.word	0x200008c0
 80a29a0:	200008bc 	.word	0x200008bc
 80a29a4:	200008b8 	.word	0x200008b8
 80a29a8:	200008b4 	.word	0x200008b4
 80a29ac:	200008b0 	.word	0x200008b0
 80a29b0:	200008ac 	.word	0x200008ac
 80a29b4:	200008a8 	.word	0x200008a8
 80a29b8:	200008a4 	.word	0x200008a4
 80a29bc:	200008a0 	.word	0x200008a0

080a29c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a29c0:	4b24      	ldr	r3, [pc, #144]	; (80a2a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a29c2:	681a      	ldr	r2, [r3, #0]
 80a29c4:	07d0      	lsls	r0, r2, #31
 80a29c6:	bf5c      	itt	pl
 80a29c8:	2201      	movpl	r2, #1
 80a29ca:	601a      	strpl	r2, [r3, #0]
 80a29cc:	4b22      	ldr	r3, [pc, #136]	; (80a2a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a29ce:	681a      	ldr	r2, [r3, #0]
 80a29d0:	07d1      	lsls	r1, r2, #31
 80a29d2:	bf5c      	itt	pl
 80a29d4:	2201      	movpl	r2, #1
 80a29d6:	601a      	strpl	r2, [r3, #0]
 80a29d8:	4b20      	ldr	r3, [pc, #128]	; (80a2a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a29da:	681a      	ldr	r2, [r3, #0]
 80a29dc:	07d2      	lsls	r2, r2, #31
 80a29de:	bf5c      	itt	pl
 80a29e0:	2201      	movpl	r2, #1
 80a29e2:	601a      	strpl	r2, [r3, #0]
 80a29e4:	4b1e      	ldr	r3, [pc, #120]	; (80a2a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a29e6:	681a      	ldr	r2, [r3, #0]
 80a29e8:	07d0      	lsls	r0, r2, #31
 80a29ea:	bf5c      	itt	pl
 80a29ec:	2201      	movpl	r2, #1
 80a29ee:	601a      	strpl	r2, [r3, #0]
 80a29f0:	4b1c      	ldr	r3, [pc, #112]	; (80a2a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a29f2:	681a      	ldr	r2, [r3, #0]
 80a29f4:	07d1      	lsls	r1, r2, #31
 80a29f6:	bf5c      	itt	pl
 80a29f8:	2201      	movpl	r2, #1
 80a29fa:	601a      	strpl	r2, [r3, #0]
 80a29fc:	4b1a      	ldr	r3, [pc, #104]	; (80a2a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a29fe:	681a      	ldr	r2, [r3, #0]
 80a2a00:	07d2      	lsls	r2, r2, #31
 80a2a02:	bf5c      	itt	pl
 80a2a04:	2201      	movpl	r2, #1
 80a2a06:	601a      	strpl	r2, [r3, #0]
 80a2a08:	4b18      	ldr	r3, [pc, #96]	; (80a2a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2a0a:	681a      	ldr	r2, [r3, #0]
 80a2a0c:	07d0      	lsls	r0, r2, #31
 80a2a0e:	bf5c      	itt	pl
 80a2a10:	2201      	movpl	r2, #1
 80a2a12:	601a      	strpl	r2, [r3, #0]
 80a2a14:	4b16      	ldr	r3, [pc, #88]	; (80a2a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2a16:	681a      	ldr	r2, [r3, #0]
 80a2a18:	07d1      	lsls	r1, r2, #31
 80a2a1a:	bf5c      	itt	pl
 80a2a1c:	2201      	movpl	r2, #1
 80a2a1e:	601a      	strpl	r2, [r3, #0]
 80a2a20:	4b14      	ldr	r3, [pc, #80]	; (80a2a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2a22:	681a      	ldr	r2, [r3, #0]
 80a2a24:	07d2      	lsls	r2, r2, #31
 80a2a26:	bf5c      	itt	pl
 80a2a28:	2201      	movpl	r2, #1
 80a2a2a:	601a      	strpl	r2, [r3, #0]
 80a2a2c:	4b12      	ldr	r3, [pc, #72]	; (80a2a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2a2e:	681a      	ldr	r2, [r3, #0]
 80a2a30:	07d0      	lsls	r0, r2, #31
 80a2a32:	bf5c      	itt	pl
 80a2a34:	2201      	movpl	r2, #1
 80a2a36:	601a      	strpl	r2, [r3, #0]
 80a2a38:	4b10      	ldr	r3, [pc, #64]	; (80a2a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2a3a:	681a      	ldr	r2, [r3, #0]
 80a2a3c:	07d1      	lsls	r1, r2, #31
 80a2a3e:	bf5c      	itt	pl
 80a2a40:	2201      	movpl	r2, #1
 80a2a42:	601a      	strpl	r2, [r3, #0]
 80a2a44:	4b0e      	ldr	r3, [pc, #56]	; (80a2a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2a46:	681a      	ldr	r2, [r3, #0]
 80a2a48:	07d2      	lsls	r2, r2, #31
 80a2a4a:	bf5c      	itt	pl
 80a2a4c:	2201      	movpl	r2, #1
 80a2a4e:	601a      	strpl	r2, [r3, #0]
 80a2a50:	4770      	bx	lr
 80a2a52:	bf00      	nop
 80a2a54:	200008fc 	.word	0x200008fc
 80a2a58:	200008f8 	.word	0x200008f8
 80a2a5c:	200008f4 	.word	0x200008f4
 80a2a60:	200008f0 	.word	0x200008f0
 80a2a64:	200008ec 	.word	0x200008ec
 80a2a68:	200008e8 	.word	0x200008e8
 80a2a6c:	200008e4 	.word	0x200008e4
 80a2a70:	200008e0 	.word	0x200008e0
 80a2a74:	200008dc 	.word	0x200008dc
 80a2a78:	200008d8 	.word	0x200008d8
 80a2a7c:	200008d4 	.word	0x200008d4
 80a2a80:	200008d0 	.word	0x200008d0

080a2a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2a84:	4b18      	ldr	r3, [pc, #96]	; (80a2ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2a86:	681a      	ldr	r2, [r3, #0]
 80a2a88:	07d1      	lsls	r1, r2, #31
 80a2a8a:	bf5c      	itt	pl
 80a2a8c:	2201      	movpl	r2, #1
 80a2a8e:	601a      	strpl	r2, [r3, #0]
 80a2a90:	4b16      	ldr	r3, [pc, #88]	; (80a2aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2a92:	681a      	ldr	r2, [r3, #0]
 80a2a94:	07d2      	lsls	r2, r2, #31
 80a2a96:	bf5c      	itt	pl
 80a2a98:	2201      	movpl	r2, #1
 80a2a9a:	601a      	strpl	r2, [r3, #0]
 80a2a9c:	4b14      	ldr	r3, [pc, #80]	; (80a2af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2a9e:	681a      	ldr	r2, [r3, #0]
 80a2aa0:	07d0      	lsls	r0, r2, #31
 80a2aa2:	bf5c      	itt	pl
 80a2aa4:	2201      	movpl	r2, #1
 80a2aa6:	601a      	strpl	r2, [r3, #0]
 80a2aa8:	4b12      	ldr	r3, [pc, #72]	; (80a2af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2aaa:	681a      	ldr	r2, [r3, #0]
 80a2aac:	07d1      	lsls	r1, r2, #31
 80a2aae:	bf5c      	itt	pl
 80a2ab0:	2201      	movpl	r2, #1
 80a2ab2:	601a      	strpl	r2, [r3, #0]
 80a2ab4:	4b10      	ldr	r3, [pc, #64]	; (80a2af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ab6:	681a      	ldr	r2, [r3, #0]
 80a2ab8:	07d2      	lsls	r2, r2, #31
 80a2aba:	bf5c      	itt	pl
 80a2abc:	2201      	movpl	r2, #1
 80a2abe:	601a      	strpl	r2, [r3, #0]
 80a2ac0:	4b0e      	ldr	r3, [pc, #56]	; (80a2afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2ac2:	681a      	ldr	r2, [r3, #0]
 80a2ac4:	07d0      	lsls	r0, r2, #31
 80a2ac6:	bf5c      	itt	pl
 80a2ac8:	2201      	movpl	r2, #1
 80a2aca:	601a      	strpl	r2, [r3, #0]
 80a2acc:	4b0c      	ldr	r3, [pc, #48]	; (80a2b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2ace:	681a      	ldr	r2, [r3, #0]
 80a2ad0:	07d1      	lsls	r1, r2, #31
 80a2ad2:	bf5c      	itt	pl
 80a2ad4:	2201      	movpl	r2, #1
 80a2ad6:	601a      	strpl	r2, [r3, #0]
 80a2ad8:	4b0a      	ldr	r3, [pc, #40]	; (80a2b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ada:	681a      	ldr	r2, [r3, #0]
 80a2adc:	07d2      	lsls	r2, r2, #31
 80a2ade:	bf5c      	itt	pl
 80a2ae0:	2201      	movpl	r2, #1
 80a2ae2:	601a      	strpl	r2, [r3, #0]
 80a2ae4:	4770      	bx	lr
 80a2ae6:	bf00      	nop
 80a2ae8:	2000091c 	.word	0x2000091c
 80a2aec:	20000918 	.word	0x20000918
 80a2af0:	20000914 	.word	0x20000914
 80a2af4:	20000910 	.word	0x20000910
 80a2af8:	2000090c 	.word	0x2000090c
 80a2afc:	20000908 	.word	0x20000908
 80a2b00:	20000904 	.word	0x20000904
 80a2b04:	20000900 	.word	0x20000900

080a2b08 <__cxa_atexit>:
 80a2b08:	b510      	push	{r4, lr}
 80a2b0a:	4c05      	ldr	r4, [pc, #20]	; (80a2b20 <__cxa_atexit+0x18>)
 80a2b0c:	4613      	mov	r3, r2
 80a2b0e:	b12c      	cbz	r4, 80a2b1c <__cxa_atexit+0x14>
 80a2b10:	460a      	mov	r2, r1
 80a2b12:	4601      	mov	r1, r0
 80a2b14:	2002      	movs	r0, #2
 80a2b16:	f3af 8000 	nop.w
 80a2b1a:	bd10      	pop	{r4, pc}
 80a2b1c:	4620      	mov	r0, r4
 80a2b1e:	bd10      	pop	{r4, pc}
 80a2b20:	00000000 	.word	0x00000000

080a2b24 <memcpy>:
 80a2b24:	b510      	push	{r4, lr}
 80a2b26:	1e43      	subs	r3, r0, #1
 80a2b28:	440a      	add	r2, r1
 80a2b2a:	4291      	cmp	r1, r2
 80a2b2c:	d004      	beq.n	80a2b38 <memcpy+0x14>
 80a2b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2b36:	e7f8      	b.n	80a2b2a <memcpy+0x6>
 80a2b38:	bd10      	pop	{r4, pc}

080a2b3a <memset>:
 80a2b3a:	4603      	mov	r3, r0
 80a2b3c:	4402      	add	r2, r0
 80a2b3e:	4293      	cmp	r3, r2
 80a2b40:	d002      	beq.n	80a2b48 <memset+0xe>
 80a2b42:	f803 1b01 	strb.w	r1, [r3], #1
 80a2b46:	e7fa      	b.n	80a2b3e <memset+0x4>
 80a2b48:	4770      	bx	lr
	...

080a2b4c <srand>:
 80a2b4c:	b538      	push	{r3, r4, r5, lr}
 80a2b4e:	4b12      	ldr	r3, [pc, #72]	; (80a2b98 <srand+0x4c>)
 80a2b50:	4605      	mov	r5, r0
 80a2b52:	681c      	ldr	r4, [r3, #0]
 80a2b54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b56:	b9d3      	cbnz	r3, 80a2b8e <srand+0x42>
 80a2b58:	2018      	movs	r0, #24
 80a2b5a:	f7fe fa2d 	bl	80a0fb8 <malloc>
 80a2b5e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2b62:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2b64:	8003      	strh	r3, [r0, #0]
 80a2b66:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2b6a:	8043      	strh	r3, [r0, #2]
 80a2b6c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2b70:	8083      	strh	r3, [r0, #4]
 80a2b72:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2b76:	80c3      	strh	r3, [r0, #6]
 80a2b78:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2b7c:	8103      	strh	r3, [r0, #8]
 80a2b7e:	2305      	movs	r3, #5
 80a2b80:	8143      	strh	r3, [r0, #10]
 80a2b82:	230b      	movs	r3, #11
 80a2b84:	8183      	strh	r3, [r0, #12]
 80a2b86:	2201      	movs	r2, #1
 80a2b88:	2300      	movs	r3, #0
 80a2b8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b90:	2200      	movs	r2, #0
 80a2b92:	611d      	str	r5, [r3, #16]
 80a2b94:	615a      	str	r2, [r3, #20]
 80a2b96:	bd38      	pop	{r3, r4, r5, pc}
 80a2b98:	20000364 	.word	0x20000364

080a2b9c <strcpy>:
 80a2b9c:	4603      	mov	r3, r0
 80a2b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2ba2:	f803 2b01 	strb.w	r2, [r3], #1
 80a2ba6:	2a00      	cmp	r2, #0
 80a2ba8:	d1f9      	bne.n	80a2b9e <strcpy+0x2>
 80a2baa:	4770      	bx	lr

080a2bac <strdup>:
 80a2bac:	4b02      	ldr	r3, [pc, #8]	; (80a2bb8 <strdup+0xc>)
 80a2bae:	4601      	mov	r1, r0
 80a2bb0:	6818      	ldr	r0, [r3, #0]
 80a2bb2:	f000 b803 	b.w	80a2bbc <_strdup_r>
 80a2bb6:	bf00      	nop
 80a2bb8:	20000364 	.word	0x20000364

080a2bbc <_strdup_r>:
 80a2bbc:	b570      	push	{r4, r5, r6, lr}
 80a2bbe:	4606      	mov	r6, r0
 80a2bc0:	4608      	mov	r0, r1
 80a2bc2:	460c      	mov	r4, r1
 80a2bc4:	f000 f80d 	bl	80a2be2 <strlen>
 80a2bc8:	1c45      	adds	r5, r0, #1
 80a2bca:	4629      	mov	r1, r5
 80a2bcc:	4630      	mov	r0, r6
 80a2bce:	f7fe fa1b 	bl	80a1008 <_malloc_r>
 80a2bd2:	4606      	mov	r6, r0
 80a2bd4:	b118      	cbz	r0, 80a2bde <_strdup_r+0x22>
 80a2bd6:	462a      	mov	r2, r5
 80a2bd8:	4621      	mov	r1, r4
 80a2bda:	f7ff ffa3 	bl	80a2b24 <memcpy>
 80a2bde:	4630      	mov	r0, r6
 80a2be0:	bd70      	pop	{r4, r5, r6, pc}

080a2be2 <strlen>:
 80a2be2:	4603      	mov	r3, r0
 80a2be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2be8:	2a00      	cmp	r2, #0
 80a2bea:	d1fb      	bne.n	80a2be4 <strlen+0x2>
 80a2bec:	1a18      	subs	r0, r3, r0
 80a2bee:	3801      	subs	r0, #1
 80a2bf0:	4770      	bx	lr

080a2bf2 <link_code_end>:
	...

080a2bf4 <dynalib_user>:
 80a2bf4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2c04:	0000 0000 7473 7461 7375 4300 7061 7574     ....status.Captu
 80a2c14:	6572 4700 6f6f 2064 6f6d 6e72 6e69 2c67     re.Good morning,
 80a2c24:	5620 7265 6973 6e6f 203a 3700 006e 7241      Version: .7n.Ar
 80a2c34:	7564 4143 204d 7453 7261 2174 6300 6568     duCAM Start!.che
 80a2c44:	6b63 6e69 2067 6f66 2072 6163 656d 6172     cking for camera
 80a2c54:	4300 6568 6b63 6e69 2067 6f66 2072 6163     .Checking for ca
 80a2c64:	656d 6172 2e2e 002e 5053 2049 6e69 6574     mera....SPI inte
 80a2c74:	6672 6361 2065 7245 6f72 2172 6d00 4379     rface Error!.myC
 80a2c84:	6d61 722e 6165 5f64 6572 2067 6173 6469     am.read_reg said
 80a2c94:	0020 6143 656d 6172 6620 756f 646e 002e      .Camera found..
 80a2ca4:	6143 276e 2074 6966 646e 4f20 3556 3436     Can't find OV564
 80a2cb4:	2032 6f6d 7564 656c 0021 6f4e 2074 6f66     2 module!.Not fo
 80a2cc4:	6e75 2c64 6320 6d61 7265 2061 6173 7379     und, camera says
 80a2cd4:	0020 6425 253a 0064 564f 3635 3234 6420      .%d:%d.OV5642 d
 80a2ce4:	7465 6365 6574 2e64 4f00 3556 3436 2032     etected..OV5642 
 80a2cf4:	6564 6574 7463 6465 203a 4300 6d61 7265     detected: .Camer
 80a2d04:	2061 6f66 6e75 2c64 6920 696e 6974 6c61     a found, initial
 80a2d14:	7a69 6e69 2e67 2e2e 3100 3239 312e 3836     izing....192.168
 80a2d24:	302e 312e 3530 4100 7474 6d65 7470 6e69     .0.105.Attemptin
 80a2d34:	2067 6f74 7220 6365 6e6f 656e 7463 7420     g to reconnect t
 80a2d44:	206f 4354 2050 6553 7672 7265 2e2e 002e     o TCP Server....
 80a2d54:	6154 696b 676e 6120 7020 6369 7574 6572     Taking a picture
 80a2d64:	2e2e 002e 6177 7469 6e69 2067 6f66 2072     ....waiting for 
 80a2d74:	6870 746f 206f 6200 6961 696c 676e 2e2e     photo .bailing..
 80a2d84:	002e 6d49 6761 2065 6973 657a 6920 2073     ..Image size is 
 80a2d94:	4100 4b43 4320 444d 4320 4d41 4320 7061     .ACK CMD CAM Cap
 80a2da4:	7574 6572 4420 6e6f 2e65 4300 7061 7574     ture Done..Captu
 80a2db4:	6572 6420 6e6f 0065 6e45 2064 666f 5020     re done.End of P
 80a2dc4:	6f68 6f74 7300 656c 7065 6e69 2067 3031     hoto.sleeping 10
 80a2dd4:	7320 6365 6e6f 7364 5300 656c 7065 6e69      seconds.Sleepin
 80a2de4:	2067 3031 7320 6365 6e6f 7364 0000 0000     g 10 seconds....

080a2df4 <_ZTVN8particle13__SPISettingsE>:
	...
 80a2dfc:	06ad 080a                                   ....

080a2e00 <_ZL16ov5642_1600x1200>:
 80a2e00:	3800 0001 3801 00b0 3802 0000 3803 000a     .8...8...8...8..
 80a2e10:	3804 000a 3805 0020 3806 0007 3807 0098     .8...8 ..8...8..
 80a2e20:	3808 0006 3809 0040 380a 0004 380b 00b0     .8...8@..8...8..
 80a2e30:	380c 000c 380d 0080 380e 0007 380f 00d0     .8...8...8...8..
 80a2e40:	5001 007f 5680 0000 5681 0000 5682 000a     .P...V...V...V..
 80a2e50:	5683 0020 5684 0000 5685 0000 5686 0007     .V ..V...V...V..
 80a2e60:	5687 0098 ffff 00ff                         .V......

080a2e68 <_ZL25OV5642_JPEG_Capture_QSXGA>:
 80a2e68:	3503 0007 3000 0000 3001 0000 3002 0000     .5...0...0...0..
 80a2e78:	3003 0000 3005 00ff 3006 00ff 3007 003f     .0...0...0...0?.
 80a2e88:	350c 0007 350d 00d0 3602 00e4 3612 00ac     .5...5...6...6..
 80a2e98:	3613 0044 3621 0027 3622 0008 3623 0022     .6D.!6'."6..#6".
 80a2ea8:	3604 0060 3705 00da 370a 0080 3801 008a     .6`..7...7...8..
 80a2eb8:	3803 000a 3804 000a 3805 0020 3806 0007     .8...8...8 ..8..
 80a2ec8:	3807 0098 3808 000a 3809 0020 380a 0007     .8...8...8 ..8..
 80a2ed8:	380b 0098 380c 000c 380d 0080 380e 0007     .8...8...8...8..
 80a2ee8:	380f 00d0 3810 00c2 3815 0044 3818 00c8     .8...8...8D..8..
 80a2ef8:	3824 0001 3827 000a 3a00 0078 3a0d 0010     $8..'8...:x..:..
 80a2f08:	3a0e 000d 3a10 0032 3a1b 003c 3a1e 0032     .:...:2..:<..:2.
 80a2f18:	3a11 0080 3a1f 0020 3a00 0078 460b 0035     .:...: ..:x..F5.
 80a2f28:	471d 0000 4713 0003 471c 0050 5682 000a     .G...G...GP..V..
 80a2f38:	5683 0020 5686 0007 5687 0098 5001 004f     .V ..V...V...PO.
 80a2f48:	589b 0000 589a 00c0 4407 0008 589b 0000     .X...X...D...X..
 80a2f58:	589a 00c0 3002 000c 3002 0000 3503 0000     .X...0...0...5..
 80a2f68:	5025 0080 3a0f 0048 3a10 0040 3a1b 004a     %P...:H..:@..:J.
 80a2f78:	3a1e 003e 3a11 0070 3a1f 0020 ffff 00ff     .:>..:p..: .....

080a2f88 <_ZL16ov5642_2592x1944>:
 80a2f88:	3800 0001 3801 00b0 3802 0000 3803 000a     .8...8...8...8..
 80a2f98:	3804 000a 3805 0020 3806 0007 3807 0098     .8...8 ..8...8..
 80a2fa8:	3808 000a 3809 0020 380a 0007 380b 0098     .8...8 ..8...8..
 80a2fb8:	380c 000c 380d 0080 380e 0007 380f 00d0     .8...8...8...8..
 80a2fc8:	5001 007f 5680 0000 5681 0000 5682 000a     .P...V...V...V..
 80a2fd8:	5683 0020 5684 0000 5685 0000 5686 0007     .V ..V...V...V..
 80a2fe8:	5687 0098 ffff 00ff                         .V......

080a2ff0 <_ZL19OV5642_QVGA_Preview>:
 80a2ff0:	3103 0093 3008 0082 3017 007f 3018 00fc     .1...0...0...0..
 80a3000:	3810 00c2 3615 00f0 3000 0000 3001 0000     .8...6...0...0..
 80a3010:	3002 005c 3003 0000 3004 00ff 3005 00ff     .0\..0...0...0..
 80a3020:	3006 0043 3007 0037 3011 0008 3010 0010     .0C..07..0...0..
 80a3030:	460c 0022 3815 0004 370c 00a0 3602 00fc     .F"..8...7...6..
 80a3040:	3612 00ff 3634 00c0 3613 0000 3605 007c     .6..46...6...6|.
 80a3050:	3621 0009 3622 0060 3604 0040 3603 00a7     !6.."6`..6@..6..
 80a3060:	3603 0027 4000 0021 401d 0022 3600 0054     .6'..@!..@"..6T.
 80a3070:	3605 0004 3606 003f 3c01 0080 5000 004f     .6...6?..<...PO.
 80a3080:	5020 0004 5181 0079 5182 0000 5185 0022      P...Qy..Q...Q".
 80a3090:	5197 0001 5001 00ff 5500 000a 5504 0000     .Q...P...U...U..
 80a30a0:	5505 007f 5080 0008 300e 0018 4610 0000     .U...P...0...F..
 80a30b0:	471d 0005 4708 0006 3808 0002 3809 0080     .G...G...8...8..
 80a30c0:	380a 0001 380b 00e0 380e 0007 380f 00d0     .8...8...8...8..
 80a30d0:	501f 0000 5000 004f 4300 0030 3503 0007     .P...PO..C0..5..
 80a30e0:	3501 0073 3502 0080 350b 0000 3503 0007     .5s..5...5...5..
 80a30f0:	3824 0011 3501 001e 3502 0080 350b 007f     $8...5...5...5..
 80a3100:	380c 000c 380d 0080 380e 0003 380f 00e8     .8...8...8...8..
 80a3110:	3a0d 0004 3a0e 0003 3818 00c1 3705 00db     .:...:...8...7..
 80a3120:	370a 0081 3801 0080 3621 0087 3801 0050     .7...8..!6...8P.
 80a3130:	3803 0008 3827 0008 3810 0040 3804 0005     .8..'8...8@..8..
 80a3140:	3805 0000 5682 0005 5683 0000 3806 0003     .8...V...V...8..
 80a3150:	3807 00c0 5686 0003 5687 00bc 3a00 0078     .8...V...V...:x.
 80a3160:	3a1a 0005 3a13 0030 3a18 0000 3a19 007c     .:...:0..:...:|.
 80a3170:	3a08 0012 3a09 00c0 3a0a 000f 3a0b 00a0     .:...:...:...:..
 80a3180:	350c 0007 350d 00d0 3500 0000 3501 0000     .5...5...5...5..
 80a3190:	3502 0000 350a 0000 350b 0000 3503 0000     .5...5...5...5..
 80a31a0:	528a 0002 528b 0004 528c 0008 528d 0008     .R...R...R...R..
 80a31b0:	528e 0008 528f 0010 5290 0010 5292 0000     .R...R...R...R..
 80a31c0:	5293 0002 5294 0000 5295 0002 5296 0000     .R...R...R...R..
 80a31d0:	5297 0002 5298 0000 5299 0002 529a 0000     .R...R...R...R..
 80a31e0:	529b 0002 529c 0000 529d 0002 529e 0000     .R...R...R...R..
 80a31f0:	529f 0002 3030 000b 3a02 0000 3a03 007d     .R..00...:...:}.
 80a3200:	3a04 0000 3a14 0000 3a15 007d 3a16 0000     .:...:...:}..:..
 80a3210:	3a00 0078 3a08 0009 3a09 0060 3a0a 0007     .:x..:...:`..:..
 80a3220:	3a0b 00d0 3a0d 0008 3a0e 0006 5193 0070     .:...:...:...Qp.
 80a3230:	589b 0004 589a 00c5 401e 0020 4001 0042     .X...X...@ ..@B.
 80a3240:	401c 0004 528a 0001 528b 0004 528c 0008     .@...R...R...R..
 80a3250:	528d 0010 528e 0020 528f 0028 5290 0030     .R...R ..R(..R0.
 80a3260:	5292 0000 5293 0001 5294 0000 5295 0004     .R...R...R...R..
 80a3270:	5296 0000 5297 0008 5298 0000 5299 0010     .R...R...R...R..
 80a3280:	529a 0000 529b 0020 529c 0000 529d 0028     .R...R ..R...R(.
 80a3290:	529e 0000 529f 0030 5282 0000 5300 0000     .R...R0..R...S..
 80a32a0:	5301 0020 5302 0000 5303 007c 530c 0000     .S ..S...S|..S..
 80a32b0:	530d 000c 530e 0020 530f 0080 5310 0020     .S...S ..S...S .
 80a32c0:	5311 0080 5308 0020 5309 0040 5304 0000     .S...S ..S@..S..
 80a32d0:	5305 0030 5306 0000 5307 0080 5314 0008     .S0..S...S...S..
 80a32e0:	5315 0020 5319 0030 5316 0010 5317 0000     .S ..S0..S...S..
 80a32f0:	5318 0002 5402 003f 5403 0000 3406 0000     .S...T?..T...4..
 80a3300:	5180 00ff 5181 0052 5182 0011 5183 0014     .Q...QR..Q...Q..
 80a3310:	5184 0025 5185 0024 5186 0006 5187 0008     .Q%..Q$..Q...Q..
 80a3320:	5188 0008 5189 007c 518a 0060 518b 00b2     .Q...Q|..Q`..Q..
 80a3330:	518c 00b2 518d 0044 518e 003d 518f 0058     .Q...QD..Q=..QX.
 80a3340:	5190 0046 5191 00f8 5192 0004 5193 0070     .QF..Q...Q...Qp.
 80a3350:	5194 00f0 5195 00f0 5196 0003 5197 0001     .Q...Q...Q...Q..
 80a3360:	5198 0004 5199 0012 519a 0004 519b 0000     .Q...Q...Q...Q..
 80a3370:	519c 0006 519d 0082 519e 0000 5025 0080     .Q...Q...Q..%P..
 80a3380:	5583 0040 5584 0040 5580 0002 5000 00cf     .U@..U@..U...P..
 80a3390:	3710 0010 3632 0051 3702 0010 3703 00b2     .7..26Q..7...7..
 80a33a0:	3704 0018 370b 0040 370d 0003 3631 0001     .7...7@..7..16..
 80a33b0:	3632 0052 3606 0024 3620 0096 5785 0007     26R..6$. 6...W..
 80a33c0:	3a13 0030 3600 0052 3604 0048 3606 001b     .:0..6R..6H..6..
 80a33d0:	370d 000b 370f 00c0 3709 0001 3823 0000     .7...7...7..#8..
 80a33e0:	5007 0000 5009 0000 5011 0000 5013 0000     .P...P...P...P..
 80a33f0:	519e 0000 5086 0000 5087 0000 5088 0000     .Q...P...P...P..
 80a3400:	5089 0000 302b 0000 3808 0001 3809 0040     .P..+0...8...8@.
 80a3410:	380a 0000 380b 00f0 3a00 0078 5001 00ff     .8...8...:x..P..
 80a3420:	5583 0050 5584 0050 5580 0002 3c01 0080     .UP..UP..U...<..
 80a3430:	3c00 0004 5800 0048 5801 0031 5802 0021     .<...XH..X1..X!.
 80a3440:	5803 001b 5804 001a 5805 001e 5806 0029     .X...X...X...X).
 80a3450:	5807 0038 5808 0026 5809 0017 580a 0011     .X8..X&..X...X..
 80a3460:	580b 000e 580c 000d 580d 000e 580e 0013     .X...X...X...X..
 80a3470:	580f 001a 5810 0015 5811 000d 5812 0008     .X...X...X...X..
 80a3480:	5813 0005 5814 0004 5815 0005 5816 0009     .X...X...X...X..
 80a3490:	5817 000d 5818 0011 5819 000a 581a 0004     .X...X...X...X..
 80a34a0:	581b 0000 581c 0000 581d 0001 581e 0006     .X...X...X...X..
 80a34b0:	581f 0009 5820 0012 5821 000b 5822 0004     .X.. X..!X.."X..
 80a34c0:	5823 0000 5824 0000 5825 0001 5826 0006     #X..$X..%X..&X..
 80a34d0:	5827 000a 5828 0017 5829 000f 582a 0009     'X..(X..)X..*X..
 80a34e0:	582b 0006 582c 0005 582d 0006 582e 000a     +X..,X..-X...X..
 80a34f0:	582f 000e 5830 0028 5831 001a 5832 0011     /X..0X(.1X..2X..
 80a3500:	5833 000e 5834 000e 5835 000f 5836 0015     3X..4X..5X..6X..
 80a3510:	5837 001d 5838 006e 5839 0039 583a 0027     7X..8Xn.9X9.:X'.
 80a3520:	583b 001f 583c 001e 583d 0023 583e 002f     ;X..<X..=X#.>X/.
 80a3530:	583f 0041 5840 000e 5841 000c 5842 000d     ?XA.@X..AX..BX..
 80a3540:	5843 000c 5844 000c 5845 000c 5846 000c     CX..DX..EX..FX..
 80a3550:	5847 000c 5848 000d 5849 000e 584a 000e     GX..HX..IX..JX..
 80a3560:	584b 000a 584c 000e 584d 000e 584e 0010     KX..LX..MX..NX..
 80a3570:	584f 0010 5850 0011 5851 000a 5852 000f     OX..PX..QX..RX..
 80a3580:	5853 000e 5854 0010 5855 0010 5856 0010     SX..TX..UX..VX..
 80a3590:	5857 000a 5858 000e 5859 000e 585a 000f     WX..XX..YX..ZX..
 80a35a0:	585b 000f 585c 000f 585d 000a 585e 0009     [X..\X..]X..^X..
 80a35b0:	585f 000d 5860 000c 5861 000b 5862 000d     _X..`X..aX..bX..
 80a35c0:	5863 0007 5864 0017 5865 0014 5866 0018     cX..dX..eX..fX..
 80a35d0:	5867 0018 5868 0016 5869 0012 586a 001b     gX..hX..iX..jX..
 80a35e0:	586b 001a 586c 0016 586d 0016 586e 0018     kX..lX..mX..nX..
 80a35f0:	586f 001f 5870 001c 5871 0016 5872 0010     oX..pX..qX..rX..
 80a3600:	5873 000f 5874 0013 5875 001c 5876 001e     sX..tX..uX..vX..
 80a3610:	5877 0017 5878 0011 5879 0011 587a 0014     wX..xX..yX..zX..
 80a3620:	587b 001e 587c 001c 587d 001c 587e 001a     {X..|X..}X..~X..
 80a3630:	587f 001a 5880 001b 5881 001f 5882 0014     .X...X...X...X..
 80a3640:	5883 001a 5884 001d 5885 001e 5886 001a     .X...X...X...X..
 80a3650:	5887 001a 5180 00ff 5181 0052 5182 0011     .X...Q...QR..Q..
 80a3660:	5183 0014 5184 0025 5185 0024 5186 0014     .Q...Q%..Q$..Q..
 80a3670:	5187 0014 5188 0014 5189 0069 518a 0060     .Q...Q...Qi..Q`.
 80a3680:	518b 00a2 518c 009c 518d 0036 518e 0034     .Q...Q...Q6..Q4.
 80a3690:	518f 0054 5190 004c 5191 00f8 5192 0004     .QT..QL..Q...Q..
 80a36a0:	5193 0070 5194 00f0 5195 00f0 5196 0003     .Qp..Q...Q...Q..
 80a36b0:	5197 0001 5198 0005 5199 002f 519a 0004     .Q...Q...Q/..Q..
 80a36c0:	519b 0000 519c 0006 519d 00a0 519e 00a0     .Q...Q...Q...Q..
 80a36d0:	528a 0000 528b 0001 528c 0004 528d 0008     .R...R...R...R..
 80a36e0:	528e 0010 528f 0020 5290 0030 5292 0000     .R...R ..R0..R..
 80a36f0:	5293 0000 5294 0000 5295 0001 5296 0000     .R...R...R...R..
 80a3700:	5297 0004 5298 0000 5299 0008 529a 0000     .R...R...R...R..
 80a3710:	529b 0010 529c 0000 529d 0020 529e 0000     .R...R...R ..R..
 80a3720:	529f 0030 5282 0000 5300 0000 5301 0020     .R0..R...S...S .
 80a3730:	5302 0000 5303 007c 530c 0000 530d 0010     .S...S|..S...S..
 80a3740:	530e 0020 530f 0080 5310 0020 5311 0080     .S ..S...S ..S..
 80a3750:	5308 0020 5309 0040 5304 0000 5305 0030     .S ..S@..S...S0.
 80a3760:	5306 0000 5307 0080 5314 0008 5315 0020     .S...S...S...S .
 80a3770:	5319 0030 5316 0010 5317 0000 5318 0002     .S0..S...S...S..
 80a3780:	5380 0001 5381 0000 5382 0000 5383 001f     .S...S...S...S..
 80a3790:	5384 0000 5385 0006 5386 0000 5387 0000     .S...S...S...S..
 80a37a0:	5388 0000 5389 00e1 538a 0000 538b 002b     .S...S...S...S+.
 80a37b0:	538c 0000 538d 0000 538e 0000 538f 0010     .S...S...S...S..
 80a37c0:	5390 0000 5391 00b3 5392 0000 5393 00a6     .S...S...S...S..
 80a37d0:	5394 0008 5480 000c 5481 0018 5482 002f     .S...T...T...T/.
 80a37e0:	5483 0055 5484 0064 5485 0071 5486 007d     .TU..Td..Tq..T}.
 80a37f0:	5487 0087 5488 0091 5489 009a 548a 00aa     .T...T...T...T..
 80a3800:	548b 00b8 548c 00cd 548d 00dd 548e 00ea     .T...T...T...T..
 80a3810:	548f 001d 5490 0005 5491 0000 5492 0004     .T...T...T...T..
 80a3820:	5493 0020 5494 0003 5495 0060 5496 0002     .T ..T...T`..T..
 80a3830:	5497 00b8 5498 0002 5499 0086 549a 0002     .T...T...T...T..
 80a3840:	549b 005b 549c 0002 549d 003b 549e 0002     .T[..T...T;..T..
 80a3850:	549f 001c 54a0 0002 54a1 0004 54a2 0001     .T...T...T...T..
 80a3860:	54a3 00ed 54a4 0001 54a5 00c5 54a6 0001     .T...T...T...T..
 80a3870:	54a7 00a5 54a8 0001 54a9 006c 54aa 0001     .T...T...Tl..T..
 80a3880:	54ab 0041 54ac 0001 54ad 0020 54ae 0000     .TA..T...T ..T..
 80a3890:	54af 0016 54b0 0001 54b1 0020 54b2 0000     .T...T...T ..T..
 80a38a0:	54b3 0010 54b4 0000 54b5 00f0 54b6 0000     .T...T...T...T..
 80a38b0:	54b7 00df 5402 003f 5403 0000 5500 0010     .T...T?..T...U..
 80a38c0:	5502 0000 5503 0006 5504 0000 5505 007f     .U...U...U...U..
 80a38d0:	5025 0080 3a0f 0030 3a10 0028 3a1b 0030     %P...:0..:(..:0.
 80a38e0:	3a1e 0028 3a11 0061 3a1f 0010 5688 00fd     .:(..:a..:...V..
 80a38f0:	5689 00df 568a 00fe 568b 00ef 568c 00fe     .V...V...V...V..
 80a3900:	568d 00ef 568e 00aa 568f 00aa ffff 00ff     .V...V...V......
 80a3910:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
 80a3920:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
 80a3930:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
 80a3940:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
 80a3950:	2545 3e64 0000                              E%d>..

080a3956 <_ZL16ov5642_2048x1536>:
 80a3956:	3800 0001 3801 00b0 3802 0000 3803 000a     .8...8...8...8..
 80a3966:	3804 000a 3805 0020 3806 0007 3807 0098     .8...8 ..8...8..
 80a3976:	3808 0008 3809 0000 380a 0006 380b 0000     .8...8...8...8..
 80a3986:	380c 000c 380d 0080 380e 0007 380f 00d0     .8...8...8...8..
 80a3996:	3810 00c2 3815 0044 3818 00a8 3824 0001     .8...8D..8..$8..
 80a39a6:	3827 000a 3a00 0078 3a0d 0010 3a0e 000d     '8...:x..:...:..
 80a39b6:	3a00 0078 460b 0035 471d 0000 471c 0050     .:x..F5..G...GP.
 80a39c6:	5682 000a 5683 0020 5686 0007 5687 0098     .V...V ..V...V..
 80a39d6:	589b 0000 589a 00c0 589b 0000 589a 00c0     .X...X...X...X..
 80a39e6:	3002 000c 3002 0000 4300 0032 460b 0035     .0...0...C2..F5.
 80a39f6:	3002 000c 3002 0000 4713 0002 4600 0080     .0...0...G...F..
 80a3a06:	4721 0002 471c 0040 4408 0000 460c 0022     !G...G@..D...F".
 80a3a16:	3815 0004 3818 00c8 501f 0000 5002 00e0     .8...8...P...P..
 80a3a26:	440a 0001 4402 0090 3811 00f0 3818 00a8     .D...D...8...8..
 80a3a36:	3621 0010 ffff 00ff                         !6......

080a3a3e <_ZL14ov5642_640x480>:
 80a3a3e:	3800 0001 3801 00a8 3802 0000 3803 000a     .8...8...8...8..
 80a3a4e:	3804 000a 3805 0020 3806 0007 3807 0098     .8...8 ..8...8..
 80a3a5e:	3808 0002 3809 0080 380a 0001 380b 00e0     .8...8...8...8..
 80a3a6e:	380c 000c 380d 0080 380e 0007 380f 00d0     .8...8...8...8..
 80a3a7e:	5001 007f 5680 0000 5681 0000 5682 000a     .P...V...V...V..
 80a3a8e:	5683 0020 5684 0000 5685 0000 5686 0007     .V ..V...V...V..
 80a3a9e:	5687 0098 3801 00b0 ffff 00ff               .V...8......

080a3aaa <_ZL15ov5642_1280x960>:
 80a3aaa:	3800 0001 3801 00b0 3802 0000 3803 000a     .8...8...8...8..
 80a3aba:	3804 000a 3805 0020 3806 0007 3807 0098     .8...8 ..8...8..
 80a3aca:	3808 0005 3809 0000 380a 0003 380b 00c0     .8...8...8...8..
 80a3ada:	380c 000c 380d 0080 380e 0007 380f 00d0     .8...8...8...8..
 80a3aea:	5001 007f 5680 0000 5681 0000 5682 000a     .P...V...V...V..
 80a3afa:	5683 0020 5684 0000 5685 0000 5686 0007     .V ..V...V...V..
 80a3b0a:	5687 0098 ffff 00ff                         .V......

080a3b12 <_ZL15ov5642_1024x768>:
 80a3b12:	3800 0001 3801 00b0 3802 0000 3803 000a     .8...8...8...8..
 80a3b22:	3804 000a 3805 0020 3806 0007 3807 0098     .8...8 ..8...8..
 80a3b32:	3808 0004 3809 0000 380a 0003 380b 0000     .8...8...8...8..
 80a3b42:	380c 000c 380d 0080 380e 0007 380f 00d0     .8...8...8...8..
 80a3b52:	5001 007f 5680 0000 5681 0000 5682 000a     .P...V...V...V..
 80a3b62:	5683 0020 5684 0000 5685 0000 5686 0007     .V ..V...V...V..
 80a3b72:	5687 0098 ffff 00ff                         .V......

080a3b7a <_ZL14ov5642_320x240>:
 80a3b7a:	3800 0001 3801 00a8 3802 0000 3803 000a     .8...8...8...8..
 80a3b8a:	3804 000a 3805 0020 3806 0007 3807 0098     .8...8 ..8...8..
 80a3b9a:	3808 0001 3809 0040 380a 0000 380b 00f0     .8...8@..8...8..
 80a3baa:	380c 000c 380d 0080 380e 0007 380f 00d0     .8...8...8...8..
 80a3bba:	5001 007f 5680 0000 5681 0000 5682 000a     .P...V...V...V..
 80a3bca:	5683 0020 5684 0000 5685 0000 5686 0007     .V ..V...V...V..
 80a3bda:	5687 0098 3801 00b0 ffff 00ff 0000          .V...8........

080a3be8 <_ZTV8SPIClass>:
	...
 80a3bf0:	1019 080a 101b 080a                         ........

080a3bf8 <_ZL14clock_divisors>:
 80a3bf8:	0800 1810 2820 3830                         .... (08

080a3c00 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a3c08:	1285 080a 128b 080a 16a3 080a 1299 080a     ................
 80a3c18:	1287 080a                                   ....

080a3c1c <_ZTV9TCPClient>:
	...
 80a3c24:	0121 080a 0139 080a 1241 080a 125b 080a     !...9...A...[...
 80a3c34:	13a1 080a 130b 080a 12dd 080a 1283 080a     ................
 80a3c44:	144d 080a 16bd 080a 133f 080a 1419 080a     M.......?.......
 80a3c54:	159b 080a 15ed 080a 126b 080a 155f 080a     ........k..._...
 80a3c64:	12bd 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a3c74:	6569 746e 7320 636f 656b 3d74 7825 6600     ient socket=%x.f
 80a3c84:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a3c94:	6c69 0d00 000a 3025 3031 2075 5d00 0020     il....%010u .] .
 80a3ca4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a3cb4:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a3cc4:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a3cd4:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a3ce4:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a3cf4:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a3d04:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a3d14:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a3d24:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a3d34:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a3d44:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3d54:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
 80a3d64:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
 80a3d74:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
 80a3d84:	6100 6373 6974 656d 0000 0000               .asctime....

080a3d90 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3d98:	1c31 080a 1c37 080a 1c4f 080a 1c45 080a     1...7...O...E...
 80a3da8:	1c33 080a                                   3...

080a3dac <_ZTV9IPAddress>:
	...
 80a3db4:	2159 080a 2149 080a 214b 080a               Y!..I!..K!..

080a3dc0 <_ZTV9USBSerial>:
	...
 80a3dc8:	2215 080a 2265 080a 2273 080a 1905 080a     ."..e"..s"......
 80a3dd8:	2251 080a 2217 080a 222d 080a 225f 080a     Q"..."..-".._"..
 80a3de8:	2243 080a 2211 080a                         C"..."..

080a3df0 <_ZTV11USARTSerial>:
	...
 80a3df8:	237d 080a 23cd 080a 23db 080a 1905 080a     }#...#...#......
 80a3e08:	2391 080a 23b3 080a 239f 080a 23c7 080a     .#...#...#...#..
 80a3e18:	237f 080a 2383 080a                         .#...#..

080a3e20 <_ZTV7TwoWire>:
	...
 80a3e28:	24dd 080a 2527 080a 24ff 080a 24df 080a     .$..'%...$...$..
 80a3e38:	2507 080a 250f 080a 2517 080a 251f 080a     .%...%...%...%..

080a3e48 <_ZTVN5spark9WiFiClassE>:
	...
 80a3e50:	2643 080a 2639 080a 262f 080a 25ad 080a     C&..9&../&...%..
 80a3e60:	1a5b 080a 2623 080a 2617 080a 260f 080a     [...#&...&...&..
 80a3e70:	2605 080a 25fb 080a 25b7 080a               .&...%...%..

080a3e7c <_ZTVN5spark12NetworkClassE>:
	...
 80a3e84:	2661 080a 266b 080a 2675 080a 267f 080a     a&..k&..u&...&..
 80a3e94:	2689 080a 2695 080a 26a1 080a 26ad 080a     .&...&...&...&..
 80a3ea4:	26b5 080a 26bf 080a 26c9 080a               .&...&...&..

080a3eb0 <__sf_fake_stdin>:
	...

080a3ed0 <__sf_fake_stdout>:
	...

080a3ef0 <__sf_fake_stderr>:
	...
 80a3f10:	0043                                        C.

080a3f12 <link_const_variable_data_end>:
	...

080a3f14 <link_constructors_location>:
 80a3f14:	080a0655 	.word	0x080a0655
 80a3f18:	080a069d 	.word	0x080a069d
 80a3f1c:	080a06a1 	.word	0x080a06a1
 80a3f20:	080a06a5 	.word	0x080a06a5
 80a3f24:	080a06a9 	.word	0x080a06a9
 80a3f28:	080a0b1d 	.word	0x080a0b1d
 80a3f2c:	080a1181 	.word	0x080a1181
 80a3f30:	080a1a75 	.word	0x080a1a75
 80a3f34:	080a1a85 	.word	0x080a1a85
 80a3f38:	080a1add 	.word	0x080a1add
 80a3f3c:	080a264d 	.word	0x080a264d
 80a3f40:	080a2731 	.word	0x080a2731
 80a3f44:	080a27b1 	.word	0x080a27b1
 80a3f48:	080a27f5 	.word	0x080a27f5
 80a3f4c:	080a2879 	.word	0x080a2879
 80a3f50:	080a28fd 	.word	0x080a28fd
 80a3f54:	080a29c1 	.word	0x080a29c1
 80a3f58:	080a2a85 	.word	0x080a2a85

080a3f5c <link_constructors_end>:
 80a3f5c:	00000000 	.word	0x00000000
